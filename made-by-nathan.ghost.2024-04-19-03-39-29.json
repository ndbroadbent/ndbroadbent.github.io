{
  "db": [
    {
      "meta": {
        "exported_on": 1713497969158,
        "version": "5.82.2"
      },
      "data": {
        "benefits": [],
        "custom_theme_settings": [
          {
            "id": "66211aa602e6b735e837dcbe",
            "theme": "source",
            "key": "navigation_layout",
            "type": "select",
            "value": "Logo in the middle"
          },
          {
            "id": "66211aa602e6b735e837dcbf",
            "theme": "source",
            "key": "site_background_color",
            "type": "color",
            "value": "#ffffff"
          },
          {
            "id": "66211aa602e6b735e837dcc0",
            "theme": "source",
            "key": "header_and_footer_color",
            "type": "select",
            "value": "Background color"
          },
          {
            "id": "66211aa602e6b735e837dcc1",
            "theme": "source",
            "key": "title_font",
            "type": "select",
            "value": "Modern sans-serif"
          },
          {
            "id": "66211aa602e6b735e837dcc2",
            "theme": "source",
            "key": "body_font",
            "type": "select",
            "value": "Modern sans-serif"
          },
          {
            "id": "66211aa602e6b735e837dcc3",
            "theme": "source",
            "key": "signup_heading",
            "type": "text",
            "value": null
          },
          {
            "id": "66211aa602e6b735e837dcc4",
            "theme": "source",
            "key": "signup_subheading",
            "type": "text",
            "value": null
          },
          {
            "id": "66211aa602e6b735e837dcc5",
            "theme": "source",
            "key": "header_style",
            "type": "select",
            "value": "Landing"
          },
          {
            "id": "66211aa602e6b735e837dcc6",
            "theme": "source",
            "key": "header_text",
            "type": "text",
            "value": null
          },
          {
            "id": "66211aa602e6b735e837dcc7",
            "theme": "source",
            "key": "background_image",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "66211aa602e6b735e837dcc8",
            "theme": "source",
            "key": "show_featured_posts",
            "type": "boolean",
            "value": "false"
          },
          {
            "id": "66211aa602e6b735e837dcc9",
            "theme": "source",
            "key": "post_feed_style",
            "type": "select",
            "value": "List"
          },
          {
            "id": "66211aa602e6b735e837dcca",
            "theme": "source",
            "key": "show_images_in_feed",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "66211aa602e6b735e837dccb",
            "theme": "source",
            "key": "show_author",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "66211aa602e6b735e837dccc",
            "theme": "source",
            "key": "show_publish_date",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "66211aa602e6b735e837dccd",
            "theme": "source",
            "key": "show_publication_info_sidebar",
            "type": "boolean",
            "value": "false"
          },
          {
            "id": "66211aa602e6b735e837dcce",
            "theme": "source",
            "key": "show_post_metadata",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "66211aa602e6b735e837dccf",
            "theme": "source",
            "key": "enable_drop_caps_on_posts",
            "type": "boolean",
            "value": "false"
          },
          {
            "id": "66211aa602e6b735e837dcd0",
            "theme": "source",
            "key": "show_related_articles",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "66211e74342bfd3a6232d530",
            "theme": "attila-master",
            "key": "color_scheme",
            "type": "select",
            "value": "System"
          },
          {
            "id": "66211e74342bfd3a6232d531",
            "theme": "attila-master",
            "key": "disqus_shortname",
            "type": "text",
            "value": null
          },
          {
            "id": "66211e74342bfd3a6232d532",
            "theme": "attila-master",
            "key": "darkmode_accent_color",
            "type": "color",
            "value": "#9d50ed"
          },
          {
            "id": "662132e9cab1a83ac77afac9",
            "theme": "casper",
            "key": "navigation_layout",
            "type": "select",
            "value": "Logo on cover"
          },
          {
            "id": "662132e9cab1a83ac77afaca",
            "theme": "casper",
            "key": "title_font",
            "type": "select",
            "value": "Modern sans-serif"
          },
          {
            "id": "662132e9cab1a83ac77afacb",
            "theme": "casper",
            "key": "body_font",
            "type": "select",
            "value": "Elegant serif"
          },
          {
            "id": "662132e9cab1a83ac77afacc",
            "theme": "casper",
            "key": "show_publication_cover",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "662132e9cab1a83ac77afacd",
            "theme": "casper",
            "key": "header_style",
            "type": "select",
            "value": "Center aligned"
          },
          {
            "id": "662132e9cab1a83ac77aface",
            "theme": "casper",
            "key": "feed_layout",
            "type": "select",
            "value": "List"
          },
          {
            "id": "662132e9cab1a83ac77afacf",
            "theme": "casper",
            "key": "color_scheme",
            "type": "select",
            "value": "Auto"
          },
          {
            "id": "662132e9cab1a83ac77afad0",
            "theme": "casper",
            "key": "post_image_style",
            "type": "select",
            "value": "Wide"
          },
          {
            "id": "662132e9cab1a83ac77afad1",
            "theme": "casper",
            "key": "email_signup_text",
            "type": "text",
            "value": "Sign up for more like this."
          },
          {
            "id": "662132e9cab1a83ac77afad2",
            "theme": "casper",
            "key": "show_recent_posts_footer",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "6621dcd7cab1a83ac77afcb7",
            "theme": "Source-disqus",
            "key": "navigation_layout",
            "type": "select",
            "value": "Logo in the middle"
          },
          {
            "id": "6621dcd7cab1a83ac77afcb8",
            "theme": "Source-disqus",
            "key": "site_background_color",
            "type": "color",
            "value": "#ffffff"
          },
          {
            "id": "6621dcd7cab1a83ac77afcb9",
            "theme": "Source-disqus",
            "key": "header_and_footer_color",
            "type": "select",
            "value": "Background color"
          },
          {
            "id": "6621dcd7cab1a83ac77afcba",
            "theme": "Source-disqus",
            "key": "title_font",
            "type": "select",
            "value": "Modern sans-serif"
          },
          {
            "id": "6621dcd7cab1a83ac77afcbb",
            "theme": "Source-disqus",
            "key": "body_font",
            "type": "select",
            "value": "Modern sans-serif"
          },
          {
            "id": "6621dcd7cab1a83ac77afcbc",
            "theme": "Source-disqus",
            "key": "signup_heading",
            "type": "text",
            "value": null
          },
          {
            "id": "6621dcd7cab1a83ac77afcbd",
            "theme": "Source-disqus",
            "key": "signup_subheading",
            "type": "text",
            "value": null
          },
          {
            "id": "6621dcd7cab1a83ac77afcbe",
            "theme": "Source-disqus",
            "key": "header_style",
            "type": "select",
            "value": "Landing"
          },
          {
            "id": "6621dcd7cab1a83ac77afcbf",
            "theme": "Source-disqus",
            "key": "header_text",
            "type": "text",
            "value": null
          },
          {
            "id": "6621dcd7cab1a83ac77afcc0",
            "theme": "Source-disqus",
            "key": "background_image",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "6621dcd7cab1a83ac77afcc1",
            "theme": "Source-disqus",
            "key": "show_featured_posts",
            "type": "boolean",
            "value": "false"
          },
          {
            "id": "6621dcd7cab1a83ac77afcc2",
            "theme": "Source-disqus",
            "key": "post_feed_style",
            "type": "select",
            "value": "List"
          },
          {
            "id": "6621dcd7cab1a83ac77afcc3",
            "theme": "Source-disqus",
            "key": "show_images_in_feed",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "6621dcd7cab1a83ac77afcc4",
            "theme": "Source-disqus",
            "key": "show_author",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "6621dcd7cab1a83ac77afcc5",
            "theme": "Source-disqus",
            "key": "show_publish_date",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "6621dcd7cab1a83ac77afcc6",
            "theme": "Source-disqus",
            "key": "show_publication_info_sidebar",
            "type": "boolean",
            "value": "false"
          },
          {
            "id": "6621dcd8cab1a83ac77afcc7",
            "theme": "Source-disqus",
            "key": "show_post_metadata",
            "type": "boolean",
            "value": "true"
          },
          {
            "id": "6621dcd8cab1a83ac77afcc8",
            "theme": "Source-disqus",
            "key": "enable_drop_caps_on_posts",
            "type": "boolean",
            "value": "false"
          },
          {
            "id": "6621dcd8cab1a83ac77afcc9",
            "theme": "Source-disqus",
            "key": "show_related_articles",
            "type": "boolean",
            "value": "true"
          }
        ],
        "newsletters": [
          {
            "id": "66211aa402e6b735e837da7d",
            "uuid": "3e08fc8b-a042-4bde-9c0c-2557f5bad155",
            "name": "Made By Nathan",
            "description": null,
            "feedback_enabled": 0,
            "slug": "default-newsletter",
            "sender_name": null,
            "sender_email": null,
            "sender_reply_to": "newsletter",
            "status": "active",
            "visibility": "members",
            "subscribe_on_signup": 1,
            "sort_order": 0,
            "header_image": null,
            "show_header_icon": 1,
            "show_header_title": 1,
            "title_font_category": "sans_serif",
            "title_alignment": "center",
            "show_feature_image": 1,
            "body_font_category": "sans_serif",
            "footer_content": null,
            "show_badge": 1,
            "show_header_name": 0,
            "show_post_title_section": 1,
            "show_comment_cta": 1,
            "show_subscription_details": 0,
            "show_latest_posts": 0,
            "background_color": "light",
            "border_color": null,
            "title_color": null,
            "created_at": "2024-04-18T13:05:40.000Z",
            "updated_at": "2024-04-18T13:15:28.000Z"
          }
        ],
        "offer_redemptions": [],
        "offers": [],
        "posts": [
          {
            "id": "66212f3bcab1a83ac77af882",
            "uuid": "af8992f6-2065-4aa8-a0d2-27cc20917f38",
            "title": "Compaq Evo T20 projects",
            "slug": "compaq-evo-t20-projects",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Compaq Evo T20s are fun. I have a few that I'm using for various projects. I plan to set one up as a RFID controlled alarm/door lock system. Its running Damn Small Linux using ruby, rubygems and sinatra packages that I compiled myself.\\n\\n<a href=\\\"http://www.mowson.org/karl/evo_t20/\\\">Karl Mowatt-Wilson's tutorials</a> have been a huge help with flashing the T20s with linux images, as well as the <a href=\\\"http://open-evot20.sourceforge.net/wiki/index.php\\\">open-evot20 site</a>.\\n\\nI wrote a <a href=\\\"http://github.com/ndbroadbent/rubyk8055\\\">K8055 USB Ruby C wrapper</a> for the <a href=\\\"http://www.apogeekits.com/usb_interface.htm\\\">K8055 USB interface experiment board</a> (<a href=\\\"http://www.jaycar.co.nz/productView.asp?ID=KV3600&amp;CATID=25&amp;form=CAT&amp;SUBCATID=432\\\">bought from here</a>). I tried getting to grips with Swig and posted a few questions on the mailing list, but gave up in the end, and wrote the C wrapper by hand. Credit to <a href=\\\"http://libk8055.sourceforge.net/\\\">Sven Lindberg's libk8055 (linux drivers for K8055)</a>\\n\\nI'm trying to set up another T20 as an internet radio/mp3 server, but this is harder than I thought it would be. Compiling <a href=\\\"http://nex.scrapping.cc/shell-fm/\\\" target=\\\"_blank\\\">shell.fm</a> and <a href=\\\"http://mpd.wikia.com/wiki/Music_Player_Daemon_Wiki\\\">MPD (music player daemon)</a> on DSL is turning out to be nearly impossible. I've been wading through rpm and deb packages, trying to get the right versions of libao2, libao-dev, libmad0, libmad0-dev ... nothing seems to work. Would love to know if anyone has successfully compiled shell.fm and/or mpd recently on DSL. Advice would be hugely appreciated.\\n\\nAnyway, <a href=\\\"http://docs.google.com/View?id=dcfcvm9s_23gs32zshc\\\">you can have a look at my T20 notes here,</a> <a href=\\\"http://github.com/ndbroadbent/linux_on_t20\\\">and download my tweaked T20 build scripts from here</a>.\\n\\nThe notes are pretty scrambled and random, but I guess its better that they're in one document instead of 50 blog posts..\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Compaq Evo T20s are fun. I have a few that I'm using for various projects. I plan to set one up as a RFID controlled alarm/door lock system. Its running Damn Small Linux using ruby, rubygems and sinatra packages that I compiled myself.</p>\n<p><a href=\"http://www.mowson.org/karl/evo_t20/\">Karl Mowatt-Wilson's tutorials</a> have been a huge help with flashing the T20s with linux images, as well as the <a href=\"http://open-evot20.sourceforge.net/wiki/index.php\">open-evot20 site</a>.</p>\n<p>I wrote a <a href=\"http://github.com/ndbroadbent/rubyk8055\">K8055 USB Ruby C wrapper</a> for the <a href=\"http://www.apogeekits.com/usb_interface.htm\">K8055 USB interface experiment board</a> (<a href=\"http://www.jaycar.co.nz/productView.asp?ID=KV3600&amp;CATID=25&amp;form=CAT&amp;SUBCATID=432\">bought from here</a>). I tried getting to grips with Swig and posted a few questions on the mailing list, but gave up in the end, and wrote the C wrapper by hand. Credit to <a href=\"http://libk8055.sourceforge.net/\">Sven Lindberg's libk8055 (linux drivers for K8055)</a></p>\n<p>I'm trying to set up another T20 as an internet radio/mp3 server, but this is harder than I thought it would be. Compiling <a href=\"http://nex.scrapping.cc/shell-fm/\" target=\"_blank\">shell.fm</a> and <a href=\"http://mpd.wikia.com/wiki/Music_Player_Daemon_Wiki\">MPD (music player daemon)</a> on DSL is turning out to be nearly impossible. I've been wading through rpm and deb packages, trying to get the right versions of libao2, libao-dev, libmad0, libmad0-dev ... nothing seems to work. Would love to know if anyone has successfully compiled shell.fm and/or mpd recently on DSL. Advice would be hugely appreciated.</p>\n<p>Anyway, <a href=\"http://docs.google.com/View?id=dcfcvm9s_23gs32zshc\">you can have a look at my T20 notes here,</a> <a href=\"http://github.com/ndbroadbent/linux_on_t20\">and download my tweaked T20 build scripts from here</a>.</p>\n<p>The notes are pretty scrambled and random, but I guess its better that they're in one document instead of 50 blog posts..</p>\n",
            "comment_id": "1",
            "plaintext": "Compaq Evo T20s are fun. I have a few that I'm using for various projects. I plan to set one up as a RFID controlled alarm/door lock system. Its running Damn Small Linux using ruby, rubygems and sinatra packages that I compiled myself.\n\n\nKarl Mowatt-Wilson's tutorials have been a huge help with flashing the T20s with linux images, as well as the open-evot20 site.\n\n\nI wrote a K8055 USB Ruby C wrapper for the K8055 USB interface experiment board (bought from here). I tried getting to grips with Swig and posted a few questions on the mailing list, but gave up in the end, and wrote the C wrapper by hand. Credit to Sven Lindberg's libk8055 (linux drivers for K8055)\n\n\nI'm trying to set up another T20 as an internet radio/mp3 server, but this is harder than I thought it would be. Compiling shell.fm and MPD (music player daemon) on DSL is turning out to be nearly impossible. I've been wading through rpm and deb packages, trying to get the right versions of libao2, libao-dev, libmad0, libmad0-dev ... nothing seems to work. Would love to know if anyone has successfully compiled shell.fm and/or mpd recently on DSL. Advice would be hugely appreciated.\n\n\nAnyway, you can have a look at my T20 notes here, and download my tweaked T20 build scripts from here.\n\n\nThe notes are pretty scrambled and random, but I guess its better that they're in one document instead of 50 blog posts..\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-04-08T00:00:00.000Z",
            "updated_at": "2024-04-19T02:34:59.000Z",
            "published_at": "2010-04-08T13:51:23.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af883",
            "uuid": "a2230ce9-615c-4aaa-b734-88f36ac88f19",
            "title": "The Compaq Evo T20 works",
            "slug": "it-works",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"I've finished the software research stage of my Compaq Evo T20 experiments. I have settled on the Tinycore 2.7 distribution. So I now have a 300MHz thin client that:\\n\\n<ul>\\n\\t<li>can connect to a wired or wireless network.</li>\\n\\t<li>can play audio through its onboard sound device.</li>\\n\\t<li>has the required libraries to run MPD (music player daemon) \\n\\t    and shell.fm (minimal console application for streaming last.fm stations.)</li>\\n\\t<li>can run Ruby 1.8.7, rubygems, rails, sinatra, etc (Ruby 1.9.x isn't compiling properly just yet.)</li>\\n\\t<li>can load and use my k8055 linux drivers to control up to 8 digital outputs, 2 PWM outputs,\\n\\t    5 digital inputs and 2 analog inputs.</li>\\n</ul>\\n\\nThe possibilities for this are endless! It's easy to see the potential of a tiny, stable, fanless computer that can be put anywhere, control anything, and be controlled from anywhere.\\n\\nSome of my ideas:\\n\\n- Online remote control car server via webcam\\n- Networked 8-stage fireworks display\\n- Timelapse camera controller with pan and tilt\\n- RFID tag access control system (swipe an authorized RFID card and unlock a door)\\n- Last.fm radio player attached to home sterio system, controllable via network.\\n\\nI have actually implemented the last idea. It took a lot of help from other people before I solved all of the problems I was having. A few hints would be:\\n\\n- Never use ndiswrapper with rt73 wireless devices. It made my T20s freeze randomly. Get `rt73.bin` from the driver packages on <a href=\\\"http://www.ralinktech.com/support.php?s=2\\\">the manufactures website</a>. Copy it to `/usr/lib/firmware`, and start wpa_supplicant with the wext driver option.\\n- To get sound working on a Compaq Evo T20 running tinycore linux, all you have to do is place the following lines in `/opt/bootlocal.sh`:\\n\\n```bash\\necho \\\"# KMW: hacked sound setup - BEGIN\\\" >> /etc/modprobe.conf\\necho \\\"alias snd-card-0 snd-sb16\\\"         >> /etc/modprobe.conf\\necho \\\"alias sound-slot-0 snd-sb16\\\"       >> /etc/modprobe.conf\\necho \\\"options snd-sb16 isapnp=0\\\"         >> /etc/modprobe.conf\\necho \\\"# KMW: hacked sound setup - END\\\"   >> /etc/modprobe.conf\\n/usr/local/etc/init.d/alsasound start\\n```\\n\\n(Thanks to Karl Mowatt-Wilson for this)\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I've finished the software research stage of my Compaq Evo T20 experiments. I have settled on the Tinycore 2.7 distribution. So I now have a 300MHz thin client that:</p>\n<ul>\n\t<li>can connect to a wired or wireless network.</li>\n\t<li>can play audio through its onboard sound device.</li>\n\t<li>has the required libraries to run MPD (music player daemon)&nbsp;\n\t    and shell.fm (minimal console application for streaming last.fm stations.)</li>\n\t<li>can run Ruby 1.8.7, rubygems, rails, sinatra, etc (Ruby 1.9.x isn't compiling properly just yet.)</li>\n\t<li>can load and use my k8055 linux drivers to control up to 8 digital outputs, 2 PWM outputs,\n\t    5 digital inputs and 2 analog inputs.</li>\n</ul>\n<p>The possibilities for this are endless! It's easy to see the potential of a tiny, stable, fanless computer that can be put anywhere, control anything, and be controlled from anywhere.</p>\n<p>Some of my ideas:</p>\n<ul>\n<li>Online remote control car server via webcam</li>\n<li>Networked 8-stage fireworks display</li>\n<li>Timelapse camera controller with pan and tilt</li>\n<li>RFID tag access control system (swipe an authorized RFID card and unlock a door)</li>\n<li>Last.fm radio player attached to home sterio system, controllable via network.</li>\n</ul>\n<p>I have actually implemented the last idea. It took a lot of help from other people before I solved all of the problems I was having. A few hints would be:</p>\n<ul>\n<li>Never use ndiswrapper with rt73 wireless devices. It made my T20s freeze randomly. Get <code>rt73.bin</code> from the driver packages on <a href=\"http://www.ralinktech.com/support.php?s=2\">the manufactures website</a>. Copy it to <code>/usr/lib/firmware</code>, and start wpa_supplicant with the wext driver option.</li>\n<li>To get sound working on a Compaq Evo T20 running tinycore linux, all you have to do is place the following lines in <code>/opt/bootlocal.sh</code>:</li>\n</ul>\n<pre><code class=\"language-bash\">echo \"# KMW: hacked sound setup - BEGIN\" &gt;&gt; /etc/modprobe.conf\necho \"alias snd-card-0 snd-sb16\" &nbsp; &nbsp; &nbsp; &nbsp; &gt;&gt; /etc/modprobe.conf\necho \"alias sound-slot-0 snd-sb16\" &nbsp; &nbsp; &nbsp; &gt;&gt; /etc/modprobe.conf\necho \"options snd-sb16 isapnp=0\" &nbsp; &nbsp; &nbsp; &nbsp; &gt;&gt; /etc/modprobe.conf\necho \"# KMW: hacked sound setup - END\" &nbsp; &gt;&gt; /etc/modprobe.conf\n/usr/local/etc/init.d/alsasound start\n</code></pre>\n<p>(Thanks to Karl Mowatt-Wilson for this)</p>\n",
            "comment_id": "2",
            "plaintext": "I've finished the software research stage of my Compaq Evo T20 experiments. I have settled on the Tinycore 2.7 distribution. So I now have a 300MHz thin client that:\n\n\n * can connect to a wired or wireless network.\n * can play audio through its onboard sound device.\n * has the required libraries to run MPD (music player daemon) \n   and shell.fm (minimal console application for streaming last.fm stations.)\n * can run Ruby 1.8.7, rubygems, rails, sinatra, etc (Ruby 1.9.x isn't compiling properly just yet.)\n * can load and use my k8055 linux drivers to control up to 8 digital outputs, 2 PWM outputs,\n   5 digital inputs and 2 analog inputs.\n\n\nThe possibilities for this are endless! It's easy to see the potential of a tiny, stable, fanless computer that can be put anywhere, control anything, and be controlled from anywhere.\n\n\nSome of my ideas:\n\n\n * Online remote control car server via webcam\n * Networked 8-stage fireworks display\n * Timelapse camera controller with pan and tilt\n * RFID tag access control system (swipe an authorized RFID card and unlock a door)\n * Last.fm radio player attached to home sterio system, controllable via network.\n\n\nI have actually implemented the last idea. It took a lot of help from other people before I solved all of the problems I was having. A few hints would be:\n\n\n * Never use ndiswrapper with rt73 wireless devices. It made my T20s freeze randomly. Get rt73.bin from the driver packages on the manufactures website. Copy it to /usr/lib/firmware, and start wpa_supplicant with the wext driver option.\n * To get sound working on a Compaq Evo T20 running tinycore linux, all you have to do is place the following lines in /opt/bootlocal.sh:\n\n\necho \"# KMW: hacked sound setup - BEGIN\" >> /etc/modprobe.conf\necho \"alias snd-card-0 snd-sb16\"         >> /etc/modprobe.conf\necho \"alias sound-slot-0 snd-sb16\"       >> /etc/modprobe.conf\necho \"options snd-sb16 isapnp=0\"         >> /etc/modprobe.conf\necho \"# KMW: hacked sound setup - END\"   >> /etc/modprobe.conf\n/usr/local/etc/init.d/alsasound start\n\n\n\n(Thanks to Karl Mowatt-Wilson for this)\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-04-15T00:00:00.000Z",
            "updated_at": "2024-04-19T02:34:34.000Z",
            "published_at": "2010-04-15T22:22:32.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af884",
            "uuid": "8a1f0a10-5944-4232-9abb-2f6ed0afb60b",
            "title": "Next project!",
            "slug": "next-project",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nSo I have practically finished the last.fm player. Its running as I type this, and the sinatra server running on the machine is keeping me up to date with the tracks that are playing. But I'm not quite finished with this little project yet.\\n\\nAt work, I found an Advatel TCD226C LED Wallboard. It is a single line, 26 character LED display, that can communicate over RS232. The only problem is that the protocol is proprietary and the manufacturer isnt going to budge. So, time to get my hands dirty! I've sent 2 or 3 emails to various people who seem to be experts on reverse engineering LED displays. Hopefully I can make some progress.\\n\\nOn a related note, I bought a Pertelian USB LCD screen. Its 4 lines x 20 chars and am looking forward to setting it up on my shell.fm T20. Then I won't have to keep running to my internet browser every time I want to know what track is playing ;)\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>So I have practically finished the last.fm player. Its running as I type this, and the sinatra server running on the machine is keeping me up to date with the tracks that are playing. But I'm not quite finished with this little project yet.</p>\n<p>At work, I found an Advatel TCD226C LED Wallboard. It is a single line, 26 character LED display, that can communicate over RS232. The only problem is that the protocol is proprietary and the manufacturer isnt going to budge. So, time to get my hands dirty! I've sent 2 or 3 emails to various people who seem to be experts on reverse engineering LED displays. Hopefully I can make some progress.</p>\n<p>On a related note, I bought a Pertelian USB LCD screen. Its 4 lines x 20 chars and am looking forward to setting it up on my shell.fm T20. Then I won't have to keep running to my internet browser every time I want to know what track is playing ;)</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "3",
            "plaintext": "So I have practically finished the last.fm player. Its running as I type this, and the sinatra server running on the machine is keeping me up to date with the tracks that are playing. But I'm not quite finished with this little project yet.\n\n\nAt work, I found an Advatel TCD226C LED Wallboard. It is a single line, 26 character LED display, that can communicate over RS232. The only problem is that the protocol is proprietary and the manufacturer isnt going to budge. So, time to get my hands dirty! I've sent 2 or 3 emails to various people who seem to be experts on reverse engineering LED displays. Hopefully I can make some progress.\n\n\nOn a related note, I bought a Pertelian USB LCD screen. Its 4 lines x 20 chars and am looking forward to setting it up on my shell.fm T20. Then I won't have to keep running to my internet browser every time I want to know what track is playing ;)\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-04-15T00:00:00.000Z",
            "updated_at": "2010-04-15T00:00:00.000Z",
            "published_at": "2010-04-15T23:15:57.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af885",
            "uuid": "83e037c7-440f-48f1-86b1-a75cec451261",
            "title": "Pertelian X2040, lcd4linux, shell-fm",
            "slug": "pertelian-x2040-lcd4linux-shell-fm",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nI received my Pertelian X2040, and had a bit of trouble getting it work on my 64bit Ubuntu machine. The characters were getting all mixed up. I gave up on my 64bit machine and decided to focus my efforts on the T20 running tinycore.\\n\\nTo get <a href=\\\"http://lcd4linux.bulix.org/\\\">lcd4linux</a> running on tinycore with any lcd screen, you need the dbus, usbutils and usb-serial packages installed.\\n\\nAt first, lcd4linux was asking me for mysql, and then sqlite, and those are pretty hefty packages for a little thin client. So before you compile lcd4linux, do this if you just want the fifo and exec plugins (substitute for your requirements):\\n\\n```bash\\n./configure --with-plugins=fifo,exec --with-drivers=Pertelian\\n```\\n\\n(also keep in mind the suggested compiling flags from the <a href=\\\"http://wiki.tinycorelinux.com/tiki-index.php?page=Creating+Extensions\\\">\\\"Creating an Extension\\\"</a> page on the tinycore wiki)\\n\\nWill post some pics or video once I get it all working nicely. I'm also really keen to build a nice varnished pine box to house my shell.fm player (like the following guy from germany did..), with the LCD screen embedded.\\n\\n<img style=\\\"width: 600px;\\\" class=\\\"lightbox\\\" alt=\\\"T20 Thin Client pine box made by Dominik Huber\\\" src=\\\"__GHOST_URL__/content/images/posts/2010/04/thinclient.jpg\\\" />\\n\\nP.S. I bought one of these <a href=\\\"http://usb.brando.com/prod_detail.php?prod_id=00666\\\">super-tiny keyboards</a>\\nfor my T20 projects. So fun.\\n\\n<img alt=\\\"Super Tiny USB Keyboard\\\" src=\\\"__GHOST_URL__/content/images/posts/2010/04/supertiny-keyboard.jpg\\\" />\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I received my Pertelian X2040, and had a bit of trouble getting it work on my 64bit Ubuntu machine. The characters were getting all mixed up. I gave up on my 64bit machine and decided to focus my efforts on the T20 running tinycore.</p>\n<p>To get <a href=\"http://lcd4linux.bulix.org/\">lcd4linux</a> running on tinycore with any lcd screen, you need the dbus, usbutils and usb-serial packages installed.</p>\n<p>At first, lcd4linux was asking me for mysql, and then sqlite, and those are pretty hefty packages for a little thin client. So before you compile lcd4linux, do this if you just want the fifo and exec plugins (substitute for your requirements):</p>\n<pre><code class=\"language-bash\">./configure --with-plugins=fifo,exec --with-drivers=Pertelian\n</code></pre>\n<p>(also keep in mind the suggested compiling flags from the <a href=\"http://wiki.tinycorelinux.com/tiki-index.php?page=Creating+Extensions\">\"Creating an Extension\"</a> page on the tinycore wiki)</p>\n<p>Will post some pics or video once I get it all working nicely. I'm also really keen to build a nice varnished pine box to house my shell.fm player (like the following guy from germany did..), with the LCD screen embedded.</p>\n<img style=\"width: 600px;\" class=\"lightbox\" alt=\"T20 Thin Client pine box made by Dominik Huber\" src=\"__GHOST_URL__/content/images/posts/2010/04/thinclient.jpg\">\n<p>P.S. I bought one of these <a href=\"http://usb.brando.com/prod_detail.php?prod_id=00666\">super-tiny keyboards</a><br>\nfor my T20 projects. So fun.</p>\n<img alt=\"Super Tiny USB Keyboard\" src=\"__GHOST_URL__/content/images/posts/2010/04/supertiny-keyboard.jpg\">\n",
            "comment_id": "4",
            "plaintext": "I received my Pertelian X2040, and had a bit of trouble getting it work on my 64bit Ubuntu machine. The characters were getting all mixed up. I gave up on my 64bit machine and decided to focus my efforts on the T20 running tinycore.\n\n\nTo get lcd4linux running on tinycore with any lcd screen, you need the dbus, usbutils and usb-serial packages installed.\n\n\nAt first, lcd4linux was asking me for mysql, and then sqlite, and those are pretty hefty packages for a little thin client. So before you compile lcd4linux, do this if you just want the fifo and exec plugins (substitute for your requirements):\n\n\n./configure --with-plugins=fifo,exec --with-drivers=Pertelian\n\n\n\n(also keep in mind the suggested compiling flags from the \"Creating an Extension\" page on the tinycore wiki)\n\n\nWill post some pics or video once I get it all working nicely. I'm also really keen to build a nice varnished pine box to house my shell.fm player (like the following guy from germany did..), with the LCD screen embedded.\n\n\n\nP.S. I bought one of these super-tiny keyboards\n\nfor my T20 projects. So fun.\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-04-20T00:00:00.000Z",
            "updated_at": "2024-04-19T02:32:09.000Z",
            "published_at": "2010-04-20T13:19:42.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af886",
            "uuid": "d2b27a43-2468-4ec3-9e41-28b3539f573a",
            "title": "Fireworks display in time to music",
            "slug": "fireworks-display-in-time-to-music",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nI've had a <a href=\\\"http://reaper.fm/\\\">REAPER</a> license for a year or 2 now. Get rid of Logic Pro and Protools, REAPER is the most awesome music creation software I have ever used. I love the unparalleled flexibility to make it do whatever you can imagine.\\n\\nI just followed this <a href=\\\"http://www.davehayes.org/2007/04/27/howto-reaper-on-ubuntu-linux-with-wineasio\\\">extremely helpful tutorial by Dave Hayes</a> to get REAPER running on Ubuntu with wineasio. And now, I am in the middle of researching midi plugins that can trigger shell or network events.\\n\\nMy goal is to have REAPER play a song on one track. I will have another track set up with midi notes that fire off triggers to a plugin. This plugin will fire an event on my K8055 USB interface board. This USB board will trigger a relay. This relay will trigger a charge and set off a fireball in the field behind my house :D. I work for a stage lighting company in my spare time too, if I can get my hands on some USB -&gt; DMX controllers, it would be cool to set up a few strobes and halogens as well.\\n\\n### UPDATE (30/09/11):\\n\\nI actually did set everything up last year, and it was all ready to go, but then .. it rained :( Show was canceled.\\n\\nI might try this again once I'm back in NZ.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I've had a <a href=\"http://reaper.fm/\">REAPER</a> license for a year or 2 now. Get rid of Logic Pro and Protools, REAPER is the most awesome music creation software I have ever used. I love the unparalleled flexibility to make it do whatever you can imagine.</p>\n<p>I just followed this <a href=\"http://www.davehayes.org/2007/04/27/howto-reaper-on-ubuntu-linux-with-wineasio\">extremely helpful tutorial by Dave Hayes</a> to get REAPER running on Ubuntu with wineasio. And now, I am in the middle of researching midi plugins that can trigger shell or network events.</p>\n<p>My goal is to have REAPER play a song on one track. I will have another track set up with midi notes that fire off triggers to a plugin. This plugin will fire an event on my K8055 USB interface board. This USB board will trigger a relay. This relay will trigger a charge and set off a fireball in the field behind my house :D. I work for a stage lighting company in my spare time too, if I can get my hands on some USB -&gt; DMX controllers, it would be cool to set up a few strobes and halogens as well.</p>\n<h3 id=\"update-300911\">UPDATE (30/09/11):</h3>\n<p>I actually did set everything up last year, and it was all ready to go, but then .. it rained :( Show was canceled.</p>\n<p>I might try this again once I'm back in NZ.</p>\n",
            "comment_id": "5",
            "plaintext": "I've had a REAPER license for a year or 2 now. Get rid of Logic Pro and Protools, REAPER is the most awesome music creation software I have ever used. I love the unparalleled flexibility to make it do whatever you can imagine.\n\n\nI just followed this extremely helpful tutorial by Dave Hayes to get REAPER running on Ubuntu with wineasio. And now, I am in the middle of researching midi plugins that can trigger shell or network events.\n\n\nMy goal is to have REAPER play a song on one track. I will have another track set up with midi notes that fire off triggers to a plugin. This plugin will fire an event on my K8055 USB interface board. This USB board will trigger a relay. This relay will trigger a charge and set off a fireball in the field behind my house :D. I work for a stage lighting company in my spare time too, if I can get my hands on some USB -> DMX controllers, it would be cool to set up a few strobes and halogens as well.\n\n\n\nUPDATE (30/09/11):\n\n\nI actually did set everything up last year, and it was all ready to go, but then .. it rained :( Show was canceled.\n\n\nI might try this again once I'm back in NZ.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-04-25T00:00:00.000Z",
            "updated_at": "2024-04-19T02:30:27.000Z",
            "published_at": "2010-04-25T14:06:56.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af887",
            "uuid": "d270d3d3-0788-414b-af91-b2378427d567",
            "title": "Hacking DSP-420 LCD displays",
            "slug": "my-job-is-sweet",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nI recently found a bunch of<a href=\\\"http://www.barcode-manufacturer.com/pole_display/customer_display/dsp400.html\\\"> DSP-420 LCD displays</a>, like the ones that you see on POS terminals in grocery stores. After a fruitless battle with the proprietary protocol of an LED wallboard (that I also found at work :) ), it was good to find so much protocol documentation on these little displays. I had it up and running within a few hours, displaying the artist, title and track length from shell.fm. (<a href=\\\"http://github.com/ndbroadbent/shell-fm_dsp420lcd\\\">Started a github repo for the code too</a>.)\\n\\nMy friend suggested hacking the USB -&gt; Serial adapter I had, and using 5v from the USB port to power the device itself. It works brilliantly. With the same friend, we're also in the process of designing and etching a PCB for an 8 channel relay board, to be attached to my K8055, I'll post a bit about that next..\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>I recently found a bunch of<a href=\"http://www.barcode-manufacturer.com/pole_display/customer_display/dsp400.html\"> DSP-420 LCD displays</a>, like the ones that you see on POS terminals in grocery stores. After a fruitless battle with the proprietary protocol of an LED wallboard (that I also found at work :) ), it was good to find so much protocol documentation on these little displays. I had it up and running within a few hours, displaying the artist, title and track length from shell.fm. (<a href=\"http://github.com/ndbroadbent/shell-fm_dsp420lcd\">Started a github repo for the code too</a>.)</p>\n<p>My friend suggested hacking the USB -&gt; Serial adapter I had, and using 5v from the USB port to power the device itself. It works brilliantly. With the same friend, we're also in the process of designing and etching a PCB for an 8 channel relay board, to be attached to my K8055, I'll post a bit about that next..</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "6",
            "plaintext": "I recently found a bunch of DSP-420 LCD displays, like the ones that you see on POS terminals in grocery stores. After a fruitless battle with the proprietary protocol of an LED wallboard (that I also found at work :) ), it was good to find so much protocol documentation on these little displays. I had it up and running within a few hours, displaying the artist, title and track length from shell.fm. (Started a github repo for the code too.)\n\n\nMy friend suggested hacking the USB -> Serial adapter I had, and using 5v from the USB port to power the device itself. It works brilliantly. With the same friend, we're also in the process of designing and etching a PCB for an 8 channel relay board, to be attached to my K8055, I'll post a bit about that next..\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-04-25T00:00:00.000Z",
            "updated_at": "2010-04-25T00:00:00.000Z",
            "published_at": "2010-04-25T13:55:31.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af888",
            "uuid": "b7d3fdc5-6c63-484c-af6d-d3f671b68234",
            "title": "How to use a bluetooth headset on Ubuntu 9.10 +",
            "slug": "how-to-use-a-bluetooth-headset-on-ubuntu-9-10",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"I found a little bluetooth headset at work, and wanted to play audio through it from my laptop. It turns out that nowadays, Ubuntu actually makes this really easy.\\n\\nI found a guide written for Ubuntu 9.04 on <a href=\\\"http://forums.overclockers.com.au/showthread.php?t=780054\\\">this forum post</a>, but Ubuntu 9.10 now does most of the work for you. (Steps 15 through 27 are still used in this guide, so credit to <a href=\\\"http://forums.overclockers.com.au/member.php?s=3b3d3beb07f6dadf978042eec4a64034&amp;u=1635\\\">HyRax1</a> from <a href=\\\"http://forums.overclockers.com.au\\\">forums.overclockers.com.au</a> for the original tutorial)\\n\\nBluetooth must already be configured, and your headset must be paired with your machine first. The headset must also be turned on and connected while you follow these steps. Ubuntu should automatically create bluez audio devices for you in PulseAudio.\\n\\nThese are the steps that worked for me. YMMV with other headset brands/models.\\n\\n<ol>\\n\\t<li>Install PulseAudio utils :  $ sudo apt-get install paprefs paman padevchooser</li>\\n\\t<li>Once installed, go to Applications-&gt;Sound &amp; Video-&gt;PulseAudio Device Chooser. This will add a black microphone jack icon to your system tray.</li>\\n\\t<li>Do a left-click on the jack icon and a menu appears. In this menu, choose \\\"Manager\\\". A new window appears.</li>\\n\\t<li>If it's not already connected, click on the \\\"Connect\\\" button to connect to your local PulseAudio server. When connected, you will see details about it listed.</li>\\n\\t<li>Click on the Devices tab. Under \\\"Sinks\\\" you should see an entry for \\\"bluez_sink.XX_XX_XX_XX_XX_XX\\\".</li>\\n\\t<li>Click 'properties' for the 'bluez_sink' device. Highlight the \\\"Name:\\\" of the device (you can do this with a triple-leftclick of your mouse), and press Ctrl+C.</li>\\n\\t<li>Now go to the Sample Cache tab. You are shown a list of sounds. Choose an OGG file from this list. At the bottom is a \\\"Playback on\\\" drop-down. Choose \\\"bluez_sink.XX_XX_XX_XX_XX_XX\\\" from this list and click on the Play button. You should hear a Ubuntu system sound through your speakers. This proves to us that PulseAudio can play through your Bluetooth headset (but this is NOT the redirection - this is just a test).</li>\\n\\t<li>Close the PulseAudio Manager.</li>\\n\\t<li>Do another left-click on the mic jack icon in your system tray.</li>\\n\\t<li>Go to \\\"Default Sink\\\" and then choose \\\"Other\\\" from the sub-menu. A window appears.</li>\\n\\t<li>In this window, press Ctrl+V to paste the device name that we copied earlier, and click OK.</li>\\n\\t<li>Play a sound from somewhere, eg: MP3 or movie in Totem. You should now hear your audio coming through your Bluetooth headset! <em>NOTE: Existing audio streams at the time of changing the sink will continue to play through whatever they were playing through until stopped and started again.</em></li>\\n\\t<li>To switch back to your speakers, simply click on the mic jack icon again, choose \\\"Default Sink\\\" and choose \\\"Default\\\" from the sub-menu. The next audio stream played will go back through your speakers.</li>\\n\\t<li>To make the PulseAudio Device Chooser start automatically on startup, click on the mic jack icon again, choose Preferences from the menu and then click on \\\"Start applet on Session Login\\\" in the window.</li>\\n\\t<li>Enjoy! <img title=\\\"Stick Out Tongue\\\" src=\\\"https://forums.overclockers.com.au/content/images/smilies/tongue.gif\\\" border=\\\"0\\\" alt=\\\"\\\" /></li>\\n</ol>\\n\\nAlso note: Any application (including Skype) <strong>should</strong> be able to play audio through the headset if you follow these steps. If you want to use Skype, you will also need to set up the mic on the headset by following the same steps to configure the bluez source device (‘bluez_source.XX…’) as the 'Default Source'.\\n\\nI was able to record and playback audio fine with Audacity, and a test call on Skype worked fine.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I found a little bluetooth headset at work, and wanted to play audio through it from my laptop. It turns out that nowadays, Ubuntu actually makes this really easy.</p>\n<p>I found a guide written for Ubuntu 9.04 on <a href=\"http://forums.overclockers.com.au/showthread.php?t=780054\">this forum post</a>, but Ubuntu 9.10 now does most of the work for you. (Steps 15 through 27 are still used in this guide, so credit to <a href=\"http://forums.overclockers.com.au/member.php?s=3b3d3beb07f6dadf978042eec4a64034&amp;u=1635\">HyRax1</a> from <a href=\"http://forums.overclockers.com.au\">forums.overclockers.com.au</a> for the original tutorial)</p>\n<p>Bluetooth must already be configured, and your headset must be paired with your machine first. The headset must also be turned on and connected while you follow these steps. Ubuntu should automatically create bluez audio devices for you in PulseAudio.</p>\n<p>These are the steps that worked for me. YMMV with other headset brands/models.</p>\n<ol>\n\t<li>Install PulseAudio utils :&nbsp; $ sudo apt-get install paprefs paman padevchooser</li>\n\t<li>Once installed, go to Applications-&gt;Sound &amp; Video-&gt;PulseAudio Device Chooser. This will add a black microphone jack icon to your system tray.</li>\n\t<li>Do a left-click on the jack icon and a menu appears. In this menu, choose \"Manager\". A new window appears.</li>\n\t<li>If it's not already connected, click on the \"Connect\" button to connect to your local PulseAudio server. When connected, you will see details about it listed.</li>\n\t<li>Click on the Devices tab. Under \"Sinks\" you should see an entry for \"bluez_sink.XX_XX_XX_XX_XX_XX\".</li>\n\t<li>Click 'properties' for the 'bluez_sink' device. Highlight the \"Name:\" of the device (you can do this with a triple-leftclick of your mouse), and press Ctrl+C.</li>\n\t<li>Now go to the Sample Cache tab. You are shown a list of sounds. Choose an OGG file from this list. At the bottom is a \"Playback on\" drop-down. Choose \"bluez_sink.XX_XX_XX_XX_XX_XX\" from this list and click on the Play button. You should hear a Ubuntu system sound through your speakers. This proves to us that PulseAudio can play through your Bluetooth headset (but this is NOT the redirection - this is just a test).</li>\n\t<li>Close the PulseAudio Manager.</li>\n\t<li>Do another left-click on the mic jack icon in your system tray.</li>\n\t<li>Go to \"Default Sink\" and then choose \"Other\" from the sub-menu. A window appears.</li>\n\t<li>In this window, press Ctrl+V to paste the device name that we copied earlier, and click OK.</li>\n\t<li>Play a sound from somewhere, eg: MP3 or movie in Totem. You should now hear your audio coming through your Bluetooth headset! <em>NOTE: Existing audio streams at the time of changing the sink will continue to play through whatever they were playing through until stopped and started again.</em></li>\n\t<li>To switch back to your speakers, simply click on the mic jack icon again, choose \"Default Sink\" and choose \"Default\" from the sub-menu. The next audio stream played will go back through your speakers.</li>\n\t<li>To make the PulseAudio Device Chooser start automatically on startup, click on the mic jack icon again, choose Preferences from the menu and then click on \"Start applet on Session Login\" in the window.</li>\n\t<li>Enjoy! <img title=\"Stick Out Tongue\" src=\"https://forums.overclockers.com.au/content/images/smilies/tongue.gif\" border=\"0\" alt=\"\"></li>\n</ol>\n<p>Also note: Any application (including Skype) <strong>should</strong> be able to play audio through the headset if you follow these steps. If you want to use Skype, you will also need to set up the mic on the headset by following the same steps to configure the bluez source device (‘bluez_source.XX…’) as the 'Default Source'.</p>\n<p>I was able to record and playback audio fine with Audacity, and a test call on Skype worked fine.</p>\n",
            "comment_id": "7",
            "plaintext": "I found a little bluetooth headset at work, and wanted to play audio through it from my laptop. It turns out that nowadays, Ubuntu actually makes this really easy.\n\n\nI found a guide written for Ubuntu 9.04 on this forum post, but Ubuntu 9.10 now does most of the work for you. (Steps 15 through 27 are still used in this guide, so credit to HyRax1 from forums.overclockers.com.au for the original tutorial)\n\n\nBluetooth must already be configured, and your headset must be paired with your machine first. The headset must also be turned on and connected while you follow these steps. Ubuntu should automatically create bluez audio devices for you in PulseAudio.\n\n\nThese are the steps that worked for me. YMMV with other headset brands/models.\n\n\n 1.  Install PulseAudio utils :  $ sudo apt-get install paprefs paman padevchooser\n 2.  Once installed, go to Applications->Sound & Video->PulseAudio Device Chooser. This will add a black microphone jack icon to your system tray.\n 3.  Do a left-click on the jack icon and a menu appears. In this menu, choose \"Manager\". A new window appears.\n 4.  If it's not already connected, click on the \"Connect\" button to connect to your local PulseAudio server. When connected, you will see details about it listed.\n 5.  Click on the Devices tab. Under \"Sinks\" you should see an entry for \"bluez_sink.XX_XX_XX_XX_XX_XX\".\n 6.  Click 'properties' for the 'bluez_sink' device. Highlight the \"Name:\" of the device (you can do this with a triple-leftclick of your mouse), and press Ctrl+C.\n 7.  Now go to the Sample Cache tab. You are shown a list of sounds. Choose an OGG file from this list. At the bottom is a \"Playback on\" drop-down. Choose \"bluez_sink.XX_XX_XX_XX_XX_XX\" from this list and click on the Play button. You should hear a Ubuntu system sound through your speakers. This proves to us that PulseAudio can play through your Bluetooth headset (but this is NOT the redirection - this is just a test).\n 8.  Close the PulseAudio Manager.\n 9.  Do another left-click on the mic jack icon in your system tray.\n 10. Go to \"Default Sink\" and then choose \"Other\" from the sub-menu. A window appears.\n 11. In this window, press Ctrl+V to paste the device name that we copied earlier, and click OK.\n 12. Play a sound from somewhere, eg: MP3 or movie in Totem. You should now hear your audio coming through your Bluetooth headset! NOTE: Existing audio streams at the time of changing the sink will continue to play through whatever they were playing through until stopped and started again.\n 13. To switch back to your speakers, simply click on the mic jack icon again, choose \"Default Sink\" and choose \"Default\" from the sub-menu. The next audio stream played will go back through your speakers.\n 14. To make the PulseAudio Device Chooser start automatically on startup, click on the mic jack icon again, choose Preferences from the menu and then click on \"Start applet on Session Login\" in the window.\n 15. Enjoy!\n\n\nAlso note: Any application (including Skype) should be able to play audio through the headset if you follow these steps. If you want to use Skype, you will also need to set up the mic on the headset by following the same steps to configure the bluez source device (‘bluez_source.XX…’) as the 'Default Source'.\n\n\nI was able to record and playback audio fine with Audacity, and a test call on Skype worked fine.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-04-29T00:00:00.000Z",
            "updated_at": "2024-04-19T02:29:32.000Z",
            "published_at": "2010-04-29T10:39:42.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af889",
            "uuid": "bc8d445f-c90c-49d2-86a3-eb3c397ef2c7",
            "title": "Last.fm Player - Project Videos",
            "slug": "project-videos",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\n<iframe width=\\\"560\\\" height=\\\"349\\\" src=\\\"https://www.youtube.com/embed/bKTrjd3BlNQ?rel=0\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n\\n<br /><br />\\n\\n<p>My Compaq Evo T20 running tinycore linux, playing shell.fm,\\ndisplaying track info via lcd4linux on a Pertelian X2o40 USB LCD display.</p>\\n\\n<br />\\n\\n<iframe width=\\\"560\\\" height=\\\"349\\\" src=\\\"https://www.youtube.com/embed/1EQNPFSNS_A?rel=0\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n\\n<br /><br />\\n\\n<p>Uses music software <a href=\\\"https://reaper.fm\\\">Reaper</a>\\nto play audio and generate MIDI events. Midi events are sent to the 'output' of\\n<a href=\\\"https://www.midiox.com/myoke.htm\\\">MIDI Yoke</a>, which patches them to a\\nsoftware emulated MIDI input.\\nUsed the <a href=\\\"https://www.midiox.com/\\\">MIDIOX</a> COM wrapper with Visual Basic,\\nto monitor the MIDI Yoke input and trigger http downloads on certain MIDI note events.\\nWrote a sinatra server in Ruby that sends signals to the K8055 USB board\\n(via my <a href=\\\"https://github.com/ndbroadbent/rubyk8055\\\">Ruby driver wrapper</a>) for certain http requests.</p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><iframe width=\"560\" height=\"349\" src=\"https://www.youtube.com/embed/bKTrjd3BlNQ?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n<p><br /><br /></p>\n<p>My Compaq Evo T20 running tinycore linux, playing shell.fm,\ndisplaying track info via lcd4linux on a Pertelian X2o40 USB LCD display.</p>\n<br />\n<iframe width=\"560\" height=\"349\" src=\"https://www.youtube.com/embed/1EQNPFSNS_A?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n<p><br /><br /></p>\n<p>Uses music software <a href=\"https://reaper.fm\">Reaper</a>\nto play audio and generate MIDI events. Midi events are sent to the 'output' of\n<a href=\"https://www.midiox.com/myoke.htm\">MIDI Yoke</a>, which patches them to a\nsoftware emulated MIDI input.\nUsed the <a href=\"https://www.midiox.com/\">MIDIOX</a> COM wrapper with Visual Basic,\nto monitor the MIDI Yoke input and trigger http downloads on certain MIDI note events.\nWrote a sinatra server in Ruby that sends signals to the K8055 USB board\n(via my <a href=\"https://github.com/ndbroadbent/rubyk8055\">Ruby driver wrapper</a>) for certain http requests.</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "8",
            "plaintext": "\n\n\n\n\n\n\n\nMy Compaq Evo T20 running tinycore linux, playing shell.fm,\ndisplaying track info via lcd4linux on a Pertelian X2o40 USB LCD display.\n\n\n\n\n\n\n\n\n\n\nUses music software Reaper\nto play audio and generate MIDI events. Midi events are sent to the 'output' of\nMIDI Yoke, which patches them to a\nsoftware emulated MIDI input.\nUsed the MIDIOX COM wrapper with Visual Basic,\nto monitor the MIDI Yoke input and trigger http downloads on certain MIDI note events.\nWrote a sinatra server in Ruby that sends signals to the K8055 USB board\n(via my Ruby driver wrapper) for certain http requests.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-04-29T00:00:00.000Z",
            "updated_at": "2010-04-29T00:00:00.000Z",
            "published_at": "2010-04-29T11:35:52.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af88a",
            "uuid": "8736d268-d0dd-48d5-8a1c-a03b394b3528",
            "title": "jqgrid on Spree",
            "slug": "jqgrid-on-spree",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Been a fan of jqgrid for quite some time, but wasn't looking forward to the struggle of getting it to work with Rails.\\n\\nThankfully, someones already done it for me:\\n<a href=\\\"http://www.2dconcept.com/jquery-grid-rails-plugin\\\">http://www.2dconcept.com/jquery-grid-rails-plugin</a>\\n\\nIt did take a little while to debug some things that were going wrong, though. Firebug was giving me the error: `$.jgrid.formatter is undefined`. After some digging around, I realized that no jqgrid locale files were being loaded.\\n\\nBy default, Spree has its i18n locale set to \\\"en-US\\\". <a href=\\\"http://www.2dconcept.com/jquery-grid-rails-plugin\\\" target=\\\"_blank\\\">2dcJqgrid</a> has a fancy method that sets the jqgrid locale to the same locale as your Rails app, but unfortunately that breaks down for any 'en-\\\\*\\\\*' locales, because jqgrid only has the one 'en' locale file in its 'i18n' directory.\\n\\nThe simple fix is to change the file `2dc_jqgrid.rb` (starting from line 11), from this:\\n\\n```ruby\\ndef jqgrid_javascripts\\nlocale = I18n.locale rescue :en\\njs = ''\\n...\\n```\\n\\nto this:\\n\\n```ruby\\ndef jqgrid_javascripts\\nlocale = I18n.locale rescue :en\\nlocale = :en if locale.to_s.start_with?(\\\"en\\\")\\njs = ''\\n...\\n```\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Been a fan of jqgrid for quite some time, but wasn't looking forward to the struggle of getting it to work with Rails.</p>\n<p>Thankfully, someones already done it for me:<br>\n<a href=\"http://www.2dconcept.com/jquery-grid-rails-plugin\">http://www.2dconcept.com/jquery-grid-rails-plugin</a></p>\n<p>It did take a little while to debug some things that were going wrong, though. Firebug was giving me the error: <code>$.jgrid.formatter is undefined</code>. After some digging around, I realized that no jqgrid locale files were being loaded.</p>\n<p>By default, Spree has its i18n locale set to \"en-US\". <a href=\"http://www.2dconcept.com/jquery-grid-rails-plugin\" target=\"_blank\">2dcJqgrid</a> has a fancy method that sets the jqgrid locale to the same locale as your Rails app, but unfortunately that breaks down for any 'en-**' locales, because jqgrid only has the one 'en' locale file in its 'i18n' directory.</p>\n<p>The simple fix is to change the file <code>2dc_jqgrid.rb</code> (starting from line 11), from this:</p>\n<pre><code class=\"language-ruby\">def jqgrid_javascripts\nlocale = I18n.locale rescue :en\njs = ''\n...\n</code></pre>\n<p>to this:</p>\n<pre><code class=\"language-ruby\">def jqgrid_javascripts\nlocale = I18n.locale rescue :en\nlocale = :en if locale.to_s.start_with?(\"en\")\njs = ''\n...\n</code></pre>\n",
            "comment_id": "9",
            "plaintext": "Been a fan of jqgrid for quite some time, but wasn't looking forward to the struggle of getting it to work with Rails.\n\n\nThankfully, someones already done it for me:\n\nhttp://www.2dconcept.com/jquery-grid-rails-plugin\n\n\nIt did take a little while to debug some things that were going wrong, though. Firebug was giving me the error: $.jgrid.formatter is undefined. After some digging around, I realized that no jqgrid locale files were being loaded.\n\n\nBy default, Spree has its i18n locale set to \"en-US\". 2dcJqgrid has a fancy method that sets the jqgrid locale to the same locale as your Rails app, but unfortunately that breaks down for any 'en-**' locales, because jqgrid only has the one 'en' locale file in its 'i18n' directory.\n\n\nThe simple fix is to change the file 2dc_jqgrid.rb (starting from line 11), from this:\n\n\ndef jqgrid_javascripts\nlocale = I18n.locale rescue :en\njs = ''\n...\n\n\n\nto this:\n\n\ndef jqgrid_javascripts\nlocale = I18n.locale rescue :en\nlocale = :en if locale.to_s.start_with?(\"en\")\njs = ''\n...\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-04-30T00:00:00.000Z",
            "updated_at": "2024-04-19T02:28:50.000Z",
            "published_at": "2010-04-30T17:22:57.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af88b",
            "uuid": "9d8174f5-1264-4789-9c8e-c67910061788",
            "title": "Obscure jqGrid API notes",
            "slug": "obscure-jqgrid-api-notes",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"If you are using an older version of jqGrid because it comes nicely wrapped up in the\\n<a href=\\\"http://www.2dconcept.com/jquery-grid-rails-plugin\\\">jquery-grid-rails-plugin</a>, keep in mind that all the <a href=\\\"http://trirand.com/blog/jqgrid/jqgrid.html\\\">demo code</a> is written with the new API introduced in version 3.6. Fortunately, most of the demo code can still be reused with our version of jqGrid (3.5). Just get rid of any `jqGrid(' **\\\\*\\\\*** ')` function wrappers, and everything should work fine. (I find this easier to do than rewriting the rails plugin for the new version)\\n\\nFor example:\\n\\n```js\\nvar ids = jQuery(\\\"#rowed2\\\").jqGrid(\\\"getDataIDs\\\");\\n```\\n\\nbecomes:\\n\\n```js\\nvar ids = jQuery(\\\"#rowed2\\\").getDataIDs();\\n```\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>If you are using an older version of jqGrid because it comes nicely wrapped up in the<br>\n<a href=\"http://www.2dconcept.com/jquery-grid-rails-plugin\">jquery-grid-rails-plugin</a>, keep in mind that all the <a href=\"http://trirand.com/blog/jqgrid/jqgrid.html\">demo code</a> is written with the new API introduced in version 3.6. Fortunately, most of the demo code can still be reused with our version of jqGrid (3.5). Just get rid of any <code>jqGrid(' **\\*\\*** ')</code> function wrappers, and everything should work fine. (I find this easier to do than rewriting the rails plugin for the new version)</p>\n<p>For example:</p>\n<pre><code class=\"language-js\">var ids = jQuery(\"#rowed2\").jqGrid(\"getDataIDs\");\n</code></pre>\n<p>becomes:</p>\n<pre><code class=\"language-js\">var ids = jQuery(\"#rowed2\").getDataIDs();\n</code></pre>\n",
            "comment_id": "10",
            "plaintext": "If you are using an older version of jqGrid because it comes nicely wrapped up in the\n\njquery-grid-rails-plugin, keep in mind that all the demo code is written with the new API introduced in version 3.6. Fortunately, most of the demo code can still be reused with our version of jqGrid (3.5). Just get rid of any jqGrid(' **\\*\\*** ') function wrappers, and everything should work fine. (I find this easier to do than rewriting the rails plugin for the new version)\n\n\nFor example:\n\n\nvar ids = jQuery(\"#rowed2\").jqGrid(\"getDataIDs\");\n\n\n\nbecomes:\n\n\nvar ids = jQuery(\"#rowed2\").getDataIDs();\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-05-06T00:00:00.000Z",
            "updated_at": "2024-04-19T02:27:50.000Z",
            "published_at": "2010-05-06T15:33:06.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af88c",
            "uuid": "6d0a0272-eaa0-4f21-b1ba-180aaf2bed8f",
            "title": "Scanning lots of photos at once with GIMP on Ubuntu Linux",
            "slug": "scanning-lots-of-photos-at-once",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"I needed a way to scan a lot of photos at once. I was going to write a GIMP plugin to extract out multiple images from a single scanned image of 3 or 4 photos, and then rotate them automatically. But as always, someone had already beat me to it :)\\n\\nSee <a href=\\\"http://www.gimptalk.com/forum/divide-or-crop-multiple-images-from-single-scan-t36438s0.html\\\">this forum on GimpTalk</a> for the original script.\\n\\n(The only problem I had is that the <a href=\\\"http://registry.gimp.org/node/2958\\\">Deskew</a> plugin for GIMP is located on a website whose server seems to be permanently offline. I did manage to find an alternative location, so I've posted a self-hosted link to the plugin below)\\n\\n<strong>Steps to scan in multiple images:</strong>\\n\\n* Download <a href=\\\"http://ffaat.pointclark.net/incoming/scripts/DivideScannedImages.scm\\\">DivideScannedImages.scm</a> to\\n`~/.gimp-2.6/scripts`\\n* Download <a href=\\\"__GHOST_URL__/content/files/2010/05/deskew\\\">deskew</a> to `/usr/lib/gimp/2.0/plug-ins`\\n* Start GIMP\\n* Click Filters -> Batch Tools -> Batch Divide Scanned Images\\n\\nThe rest is easy to figure out. Just make sure your 'size threshold' is large enough. Also, it may help to cover the photos with a couple of sheets of A4 paper, to give an even white background. Then place a few photos (3 or 4) on the scanner, with adequate spaces between them, scan them, and let the plugin do the rest!\\n\\nThanks to <strong> <a href=\\\"https://www.gimptalk.com/forum/memberlist.php?mode=viewprofile&amp;u=10783\\\">RobA</a> </strong> for the awesome script!\\n\\n&nbsp;\\n\\n# Example\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2010/05/scan1-resized-post.jpg\\\" />\\n\\n### becomes:\\n\"},{\"type\":\"gallery\",\"version\":1,\"images\":[{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/scan1-a.jpg\",\"width\":409,\"height\":607,\"fileName\":\"scan1-a.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/scan1-b.jpg\",\"width\":266,\"height\":365,\"fileName\":\"scan1-b.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/scan1-c.jpg\",\"width\":590,\"height\":404,\"fileName\":\"scan1-c.jpg\"}],\"caption\":\"\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I needed a way to scan a lot of photos at once. I was going to write a GIMP plugin to extract out multiple images from a single scanned image of 3 or 4 photos, and then rotate them automatically. But as always, someone had already beat me to it :)</p>\n<p>See <a href=\"http://www.gimptalk.com/forum/divide-or-crop-multiple-images-from-single-scan-t36438s0.html\">this forum on GimpTalk</a> for the original script.</p>\n<p>(The only problem I had is that the <a href=\"http://registry.gimp.org/node/2958\">Deskew</a> plugin for GIMP is located on a website whose server seems to be permanently offline. I did manage to find an alternative location, so I've posted a self-hosted link to the plugin below)</p>\n<p><strong>Steps to scan in multiple images:</strong></p>\n<ul>\n<li>Download <a href=\"http://ffaat.pointclark.net/incoming/scripts/DivideScannedImages.scm\">DivideScannedImages.scm</a> to<br>\n<code>~/.gimp-2.6/scripts</code></li>\n<li>Download <a href=\"__GHOST_URL__/content/files/2010/05/deskew\">deskew</a> to <code>/usr/lib/gimp/2.0/plug-ins</code></li>\n<li>Start GIMP</li>\n<li>Click Filters -&gt; Batch Tools -&gt; Batch Divide Scanned Images</li>\n</ul>\n<p>The rest is easy to figure out. Just make sure your 'size threshold' is large enough. Also, it may help to cover the photos with a couple of sheets of A4 paper, to give an even white background. Then place a few photos (3 or 4) on the scanner, with adequate spaces between them, scan them, and let the plugin do the rest!</p>\n<p>Thanks to <strong> <a href=\"https://www.gimptalk.com/forum/memberlist.php?mode=viewprofile&amp;u=10783\">RobA</a> </strong> for the awesome script!</p>\n<p>&nbsp;</p>\n<h1 id=\"example\">Example</h1>\n<img src=\"__GHOST_URL__/content/images/posts/2010/05/scan1-resized-post.jpg\">\n<h3 id=\"becomes\">becomes:</h3>\n<figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/scan1-a.jpg\" width=\"409\" height=\"607\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/scan1-b.jpg\" width=\"266\" height=\"365\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/scan1-c.jpg\" width=\"590\" height=\"404\" loading=\"lazy\" alt=\"\"></div></div></div></figure>",
            "comment_id": "11",
            "plaintext": "I needed a way to scan a lot of photos at once. I was going to write a GIMP plugin to extract out multiple images from a single scanned image of 3 or 4 photos, and then rotate them automatically. But as always, someone had already beat me to it :)\n\n\nSee this forum on GimpTalk for the original script.\n\n\n(The only problem I had is that the Deskew plugin for GIMP is located on a website whose server seems to be permanently offline. I did manage to find an alternative location, so I've posted a self-hosted link to the plugin below)\n\n\nSteps to scan in multiple images:\n\n\n * Download DivideScannedImages.scm to\n   \n   ~/.gimp-2.6/scripts\n * Download deskew to /usr/lib/gimp/2.0/plug-ins\n * Start GIMP\n * Click Filters -> Batch Tools -> Batch Divide Scanned Images\n\n\nThe rest is easy to figure out. Just make sure your 'size threshold' is large enough. Also, it may help to cover the photos with a couple of sheets of A4 paper, to give an even white background. Then place a few photos (3 or 4) on the scanner, with adequate spaces between them, scan them, and let the plugin do the rest!\n\n\nThanks to RobA for the awesome script!\n\n\n \n\n\n\nExample\n\n\n\n\nbecomes:\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-05-13T00:00:00.000Z",
            "updated_at": "2024-04-19T02:27:07.000Z",
            "published_at": "2010-05-13T22:13:09.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af88d",
            "uuid": "a5754b92-fd62-485d-9cfd-04ab9c6f24c7",
            "title": "YoutubeJukebox",
            "slug": "youtubejukebox",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\n<a href=\\\"http://github.com/ndbroadbent/youtube_jukebox\\\">http://github.com/ndbroadbent/youtube_jukebox</a>\\n\\nA ruby script that downloads youtube videos, converts them to mp3, and plays them in a vlc playlist as they are processed.\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p><a href=\"http://github.com/ndbroadbent/youtube_jukebox\">http://github.com/ndbroadbent/youtube_jukebox</a></p>\n<p>A ruby script that downloads youtube videos, converts them to mp3, and plays them in a vlc playlist as they are processed.</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "12",
            "plaintext": "http://github.com/ndbroadbent/youtube_jukebox\n\n\nA ruby script that downloads youtube videos, converts them to mp3, and plays them in a vlc playlist as they are processed.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-05-13T00:00:00.000Z",
            "updated_at": "2010-05-13T00:00:00.000Z",
            "published_at": "2010-05-13T17:46:25.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af88e",
            "uuid": "ffb60256-6cfb-463d-b48e-d3d96be077a6",
            "title": "blueberry pi",
            "slug": "blueberry-pi",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\n<a href=\\\"__GHOST_URL__/content/images/posts/2010/05/blueberry_pi.jpg\\\"><img class=\\\"alignnone size-medium wp-image-81\\\" title=\\\"blueberry_pi\\\" src=\\\"__GHOST_URL__/content/images/posts/2010/05/blueberry_pi.jpg?w=300\\\" alt=\\\"\\\" width=\\\"300\\\" height=\\\"258\\\" /></a>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p><a href=\"__GHOST_URL__/content/images/posts/2010/05/blueberry_pi.jpg\"><img class=\"alignnone size-medium wp-image-81\" title=\"blueberry_pi\" src=\"__GHOST_URL__/content/images/posts/2010/05/blueberry_pi.jpg?w=300\" alt=\"\" width=\"300\" height=\"258\" /></a></p>\n<!--kg-card-end: markdown-->",
            "comment_id": "13",
            "plaintext": "\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-05-14T00:00:00.000Z",
            "updated_at": "2010-05-14T00:00:00.000Z",
            "published_at": "2010-05-14T11:02:54.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af88f",
            "uuid": "d70d4bbd-92d8-44c2-8463-c183ba1db0e3",
            "title": "How to create a favicon.ico with GIMP",
            "slug": "how-to-create-a-favicon-ico-with-gimp",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"<strong>UPDATE</strong>: Theres an easier way to do this here: <a href=\\\"http://www.htmlcenter.com/blog/creating-a-favicon-for-your-website/\\\">http://www.htmlcenter.com/blog/creating-a-favicon-for-your-website/</a>.\\n\\n<a href=\\\"http://linuxproblem.org/art_19.html\\\">http://linuxproblem.org/art_19.html</a>\\n\\nBy<strong> <a href=\\\"http://linuxproblem.org/auth_1.html\\\">Mathias Kettner</a> </strong>:\\n\\nYou need an image file that GIMP can open (PNG, GIF, etc.). And you need the command line tool <code>ppmtowinicon</code> from the <code>netpbm</code>-tools (on SuSE you have to have installed the package <code>netpbm</code>). Now perform the following actions:\\n\\n<ul>\\n<li>Open your image with GIMP.</li>\\n<li>If your image is not a square then resize the canvas with GIMP.</li>\\n<li>Scale the image to 16x16 pixel (Image, Scale image).</li>\\n<li>Choose <em>File, save as..</em> and save as <code>favicon.ppm</code> with <em>raw</em> encoding.</li>\\n<li>Close GIMP</li>\\n<li>Convert <code>favicon.ppm</code> using the command line utility <code>ppmtowinicon</code>:\\n</ul>\\n\\n```bash\\nppmtowinicon -output favicon.ico favicon.ppm\\n```\\n\\nThat's all. Now copy your <code>favicon.ico</code> to the document root of Apache, for example to <code>/srv/www/htdocs/favicon.ico</code>, if you are using SuSE Linux &gt;= 8.1.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><strong>UPDATE</strong>: Theres an easier way to do this here: <a href=\"http://www.htmlcenter.com/blog/creating-a-favicon-for-your-website/\">http://www.htmlcenter.com/blog/creating-a-favicon-for-your-website/</a>.</p>\n<p><a href=\"http://linuxproblem.org/art_19.html\">http://linuxproblem.org/art_19.html</a></p>\n<p>By<strong> <a href=\"http://linuxproblem.org/auth_1.html\">Mathias Kettner</a> </strong>:</p>\n<p>You need an image file that GIMP can open (PNG, GIF, etc.). And you need the command line tool <code>ppmtowinicon</code> from the <code>netpbm</code>-tools (on SuSE you have to have installed the package <code>netpbm</code>). Now perform the following actions:</p>\n<ul>\n<li>Open your image with GIMP.</li>\n<li>If your image is not a square then resize the canvas with GIMP.</li>\n<li>Scale the image to 16x16 pixel (Image, Scale image).</li>\n<li>Choose <em>File, save as..</em> and save as <code>favicon.ppm</code> with <em>raw</em> encoding.</li>\n<li>Close GIMP</li>\n<li>Convert <code>favicon.ppm</code> using the command line utility <code>ppmtowinicon</code>:\n</li></ul>\n<pre><code class=\"language-bash\">ppmtowinicon -output favicon.ico favicon.ppm\n</code></pre>\n<p>That's all. Now copy your <code>favicon.ico</code> to the document root of Apache, for example to <code>/srv/www/htdocs/favicon.ico</code>, if you are using SuSE Linux &gt;= 8.1.</p>\n",
            "comment_id": "14",
            "plaintext": "UPDATE: Theres an easier way to do this here: http://www.htmlcenter.com/blog/creating-a-favicon-for-your-website/.\n\n\nhttp://linuxproblem.org/art_19.html\n\n\nBy Mathias Kettner :\n\n\nYou need an image file that GIMP can open (PNG, GIF, etc.). And you need the command line tool ppmtowinicon from the netpbm-tools (on SuSE you have to have installed the package netpbm). Now perform the following actions:\n\n\n * Open your image with GIMP.\n * If your image is not a square then resize the canvas with GIMP.\n * Scale the image to 16x16 pixel (Image, Scale image).\n * Choose File, save as.. and save as favicon.ppm with raw encoding.\n * Close GIMP\n * Convert favicon.ppm using the command line utility ppmtowinicon:\n   \n\n\nppmtowinicon -output favicon.ico favicon.ppm\n\n\n\nThat's all. Now copy your favicon.ico to the document root of Apache, for example to /srv/www/htdocs/favicon.ico, if you are using SuSE Linux >= 8.1.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-05-20T00:00:00.000Z",
            "updated_at": "2024-04-19T02:21:49.000Z",
            "published_at": "2010-05-20T13:19:13.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af890",
            "uuid": "a3818313-9d50-4b10-ba5f-4be6c43a418d",
            "title": "git shortcuts",
            "slug": "git-shortcuts",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"It seems that for every single git repository I create,\\nI just want to be able to run \\\"git push\\\" and \\\"git pull\\\".\\n\\\"git pull origin master\\\" just gets annoying after a while.\\nIn case I forget how to do this again, this is all it takes (provided you already have an 'origin' remote configured):\\n\\n```bash\\ngit config branch.master.remote origin\\ngit config branch.master.merge refs/heads/master\\n```\\n\\nOther useful git shortcut that I literally use everyday\\n(add them to the bottom of ~/.bashrc and then run $ source ~/.bashrc):\\n\\n```bash\\nalias gst='git status'\\nalias gca='git commit -am'\\nalias gc='git commit -m'\\n```\\n\\nSo, say I've made changes to lots of files and I want to commit them all. I just type:\\n\\n```bash\\n$ gca \\\"I made a bunch of changes to lots of files\\\"\\n```\\n\\nAnd if Ive made lots of changes to various files, but only want to commit changes in one file \\\"foo.bar\\\", I type:\\n\\n```bash\\n$ git add foo.bar\\n$ gc \\\"I made a change to foo.bar\\\"\\n```\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>It seems that for every single git repository I create,<br>\nI just want to be able to run \"git push\" and \"git pull\".<br>\n\"git pull origin master\" just gets annoying after a while.<br>\nIn case I forget how to do this again, this is all it takes (provided you already have an 'origin' remote configured):</p>\n<pre><code class=\"language-bash\">git config branch.master.remote origin\ngit config branch.master.merge refs/heads/master\n</code></pre>\n<p>Other useful git shortcut that I literally use everyday<br>\n(add them to the bottom of ~/.bashrc and then run $ source ~/.bashrc):</p>\n<pre><code class=\"language-bash\">alias gst='git status'\nalias gca='git commit -am'\nalias gc='git commit -m'\n</code></pre>\n<p>So, say I've made changes to lots of files and I want to commit them all. I just type:</p>\n<pre><code class=\"language-bash\">$ gca \"I made a bunch of changes to lots of files\"\n</code></pre>\n<p>And if Ive made lots of changes to various files, but only want to commit changes in one file \"foo.bar\", I type:</p>\n<pre><code class=\"language-bash\">$ git add foo.bar\n$ gc \"I made a change to foo.bar\"\n</code></pre>\n",
            "comment_id": "15",
            "plaintext": "It seems that for every single git repository I create,\n\nI just want to be able to run \"git push\" and \"git pull\".\n\n\"git pull origin master\" just gets annoying after a while.\n\nIn case I forget how to do this again, this is all it takes (provided you already have an 'origin' remote configured):\n\n\ngit config branch.master.remote origin\ngit config branch.master.merge refs/heads/master\n\n\n\nOther useful git shortcut that I literally use everyday\n\n(add them to the bottom of ~/.bashrc and then run $ source ~/.bashrc):\n\n\nalias gst='git status'\nalias gca='git commit -am'\nalias gc='git commit -m'\n\n\n\nSo, say I've made changes to lots of files and I want to commit them all. I just type:\n\n\n$ gca \"I made a bunch of changes to lots of files\"\n\n\n\nAnd if Ive made lots of changes to various files, but only want to commit changes in one file \"foo.bar\", I type:\n\n\n$ git add foo.bar\n$ gc \"I made a change to foo.bar\"\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-05-21T00:00:00.000Z",
            "updated_at": "2024-04-19T02:21:11.000Z",
            "published_at": "2010-05-21T13:40:27.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af891",
            "uuid": "0a8befde-223d-46ac-8e0a-aef70c7956d5",
            "title": "Don't override core Rails methods",
            "slug": "dont-override-core-rails-methods",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nEvery programmer makes mistakes.. But every so often though, you make those mistakes that really mess things up. I just made two of them, and feel like a right n00b.\\n\\nBoth mistakes simply involved overwriting ActiveRecord methods.\\nThe first time, I made an `update` method in my model. And just recently, I realized that I had made a `named_scope` called `new` for another model.\\n\\nNEVER use method names such as `create`, `update`, `new`, or `destroy` in ANY of your models.. strange things happen!\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Every programmer makes mistakes.. But every so often though, you make those mistakes that really mess things up. I just made two of them, and feel like a right n00b.</p>\n<p>Both mistakes simply involved overwriting ActiveRecord methods.<br>\nThe first time, I made an <code>update</code> method in my model. And just recently, I realized that I had made a <code>named_scope</code> called <code>new</code> for another model.</p>\n<p>NEVER use method names such as <code>create</code>, <code>update</code>, <code>new</code>, or <code>destroy</code> in ANY of your models.. strange things happen!</p>\n",
            "comment_id": "16",
            "plaintext": "Every programmer makes mistakes.. But every so often though, you make those mistakes that really mess things up. I just made two of them, and feel like a right n00b.\n\n\nBoth mistakes simply involved overwriting ActiveRecord methods.\n\nThe first time, I made an update method in my model. And just recently, I realized that I had made a named_scope called new for another model.\n\n\nNEVER use method names such as create, update, new, or destroy in ANY of your models.. strange things happen!\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-05-28T00:00:00.000Z",
            "updated_at": "2024-04-19T02:18:34.000Z",
            "published_at": "2010-05-28T14:55:05.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af892",
            "uuid": "a02425aa-9a9b-4b53-a0ca-fa7cab0a327c",
            "title": "Last.fm on embedded systems",
            "slug": "last-fm-on-embedded-systems",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nI've finished most of the work I'm going to do on my shell.fm ruby server. Its written on sinatra + jquery + jquery-ui (so, a lot of ajax calls). It also requires my custom shell.fm fork if you want the volume control to work.\\n\\nYou can find my shell.fm fork here: <a href=\\\"http://github.com/ndbroadbent/shell-fm\\\">http://github.com/ndbroadbent/shell-fm</a>\\n\\nand the shell.fm sinatra server is here: <a href=\\\"http://github.com/ndbroadbent/shell-fm_sinatra\\\">http://github.com/ndbroadbent/shell-fm_sinatra</a>\\n\\nBy the way, this post is about an embedded linux system that plays last.fm internet radio streams. I have set it up on tinycore linux, and its a permanent part of my home sterio system.\\n\\nHere are some screenshots of the shell.fm sinatra web interface:\\n\\n<img class=\\\"lightbox\\\" alt=\\\"shell.fm sinatra\\\" src=\\\"__GHOST_URL__/content/images/posts/2010/06/changing-station.png\\\" />\\n\\n<img class=\\\"lightbox\\\" alt=\\\"paused track, volume change\\\" src=\\\"__GHOST_URL__/content/images/posts/2010/06/paused.png\\\" />\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>I've finished most of the work I'm going to do on my shell.fm ruby server. Its written on sinatra + jquery + jquery-ui (so, a lot of ajax calls). It also requires my custom shell.fm fork if you want the volume control to work.</p>\n<p>You can find my shell.fm fork here: <a href=\"http://github.com/ndbroadbent/shell-fm\">http://github.com/ndbroadbent/shell-fm</a></p>\n<p>and the shell.fm sinatra server is here: <a href=\"http://github.com/ndbroadbent/shell-fm_sinatra\">http://github.com/ndbroadbent/shell-fm_sinatra</a></p>\n<p>By the way, this post is about an embedded linux system that plays last.fm internet radio streams. I have set it up on tinycore linux, and its a permanent part of my home sterio system.</p>\n<p>Here are some screenshots of the shell.fm sinatra web interface:</p>\n<img class=\"lightbox\" alt=\"shell.fm sinatra\" src=\"__GHOST_URL__/content/images/posts/2010/06/changing-station.png\" />\n<img class=\"lightbox\" alt=\"paused track, volume change\" src=\"__GHOST_URL__/content/images/posts/2010/06/paused.png\" />\n<!--kg-card-end: markdown-->",
            "comment_id": "17",
            "plaintext": "I've finished most of the work I'm going to do on my shell.fm ruby server. Its written on sinatra + jquery + jquery-ui (so, a lot of ajax calls). It also requires my custom shell.fm fork if you want the volume control to work.\n\n\nYou can find my shell.fm fork here: http://github.com/ndbroadbent/shell-fm\n\n\nand the shell.fm sinatra server is here: http://github.com/ndbroadbent/shell-fm_sinatra\n\n\nBy the way, this post is about an embedded linux system that plays last.fm internet radio streams. I have set it up on tinycore linux, and its a permanent part of my home sterio system.\n\n\nHere are some screenshots of the shell.fm sinatra web interface:\n\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-06-26T00:00:00.000Z",
            "updated_at": "2010-06-26T00:00:00.000Z",
            "published_at": "2010-06-26T00:30:15.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af893",
            "uuid": "ddc13454-ddd6-4565-8f07-d1947177f88d",
            "title": "How to upgrade git on legacy Ubuntu",
            "slug": "how-to-upgrade-git-on-legacy-ubuntu",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Follow these steps to get git 1.7 + on ubuntu 9.10 or less. (10.04 comes with the latest version)\\n\\n```bash\\nsudo apt-get install libcurl4-dev  # (for new http[s] support)\\ncd /tmp\\nwget http://kernel.org/pub/software/scm/git/git-1.7.2.1.tar.gz\\ntar -xf git-1.7.2.1.tar.gz\\ncd git-1.7.2.1/\\n./configure\\nmake\\nsudo make install\\nln -nfs /usr/bin/git /usr/local/bin/git\\n```\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Follow these steps to get git 1.7 + on ubuntu 9.10 or less. (10.04 comes with the latest version)</p>\n<pre><code class=\"language-bash\">sudo apt-get install libcurl4-dev&nbsp; # (for new http[s] support)\ncd /tmp\nwget http://kernel.org/pub/software/scm/git/git-1.7.2.1.tar.gz\ntar -xf git-1.7.2.1.tar.gz\ncd git-1.7.2.1/\n./configure\nmake\nsudo make install\nln -nfs /usr/bin/git /usr/local/bin/git\n</code></pre>\n",
            "comment_id": "18",
            "plaintext": "Follow these steps to get git 1.7 + on ubuntu 9.10 or less. (10.04 comes with the latest version)\n\n\nsudo apt-get install libcurl4-dev  # (for new http[s] support)\ncd /tmp\nwget http://kernel.org/pub/software/scm/git/git-1.7.2.1.tar.gz\ntar -xf git-1.7.2.1.tar.gz\ncd git-1.7.2.1/\n./configure\nmake\nsudo make install\nln -nfs /usr/bin/git /usr/local/bin/git\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-08-04T00:00:00.000Z",
            "updated_at": "2024-04-19T02:17:37.000Z",
            "published_at": "2010-08-04T23:28:02.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af894",
            "uuid": "c84efdb3-bf83-4d39-a1da-209cf853c981",
            "title": "wimp.com rss feed",
            "slug": "wimp-com-rss-feed",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nI found out about <a href=\\\"http://www.wimp.com\\\">http://www.wimp.com</a> last year, and have been watching their daily videos ever since. Its a simple website that offers 5 or 6 daily videos on a range of topics, such as science, comedy and innovation. And thats all there is. No bells and whistles, just a daily list of 5 videos. The videos are awesome, but I always wanted to watch them with google reader via rss.\\n\\nSo I wrote a simple rss feed/ad-free viewer in rails: Add <a href=\\\"http://wimp-rss.heroku.com/rss\\\">http://wimp-rss.heroku.com/rss</a> to your RSS reader. Enjoy :)\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>I found out about <a href=\"http://www.wimp.com\">http://www.wimp.com</a> last year, and have been watching their daily videos ever since. Its a simple website that offers 5 or 6 daily videos on a range of topics, such as science, comedy and innovation. And thats all there is. No bells and whistles, just a daily list of 5 videos. The videos are awesome, but I always wanted to watch them with google reader via rss.</p>\n<p>So I wrote a simple rss feed/ad-free viewer in rails: Add <a href=\"http://wimp-rss.heroku.com/rss\">http://wimp-rss.heroku.com/rss</a> to your RSS reader. Enjoy :)</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "19",
            "plaintext": "I found out about http://www.wimp.com last year, and have been watching their daily videos ever since. Its a simple website that offers 5 or 6 daily videos on a range of topics, such as science, comedy and innovation. And thats all there is. No bells and whistles, just a daily list of 5 videos. The videos are awesome, but I always wanted to watch them with google reader via rss.\n\n\nSo I wrote a simple rss feed/ad-free viewer in rails: Add http://wimp-rss.heroku.com/rss to your RSS reader. Enjoy :)\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-08-05T00:00:00.000Z",
            "updated_at": "2010-08-05T00:00:00.000Z",
            "published_at": "2010-08-05T21:12:40.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af895",
            "uuid": "3a46cb1c-fb5b-4d90-8134-5f9bb9934953",
            "title": "RSpec tasks on Rails 3",
            "slug": "rspec-tasks-on-rails-3",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\n## Problem:\\n\\n```\\nuninitialized constant RSpec::Rake\\n```\\n\\n## Solution:\\n\\nYou are using Rails 3 (and RSpec 2), and trying to define a custom rake task with `Spec::Rake::SpecTask.new`\\n\\nInstead, do:\\n\\n```ruby\\nRSpec::Core::RakeTask.new(:spec) do |t|\\n...\\n```\\n\\nand make sure to change:\\n\\n```ruby\\nt.spec_files = FileList['spec/**/*_spec.rb']\\n```\\n\\nto\\n\\n```ruby\\nt.pattern = 'spec/\\\\*_/_\\\\_spec.rb'\\n```\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<h2 id=\"problem\">Problem:</h2>\n<pre><code>uninitialized constant RSpec::Rake\n</code></pre>\n<h2 id=\"solution\">Solution:</h2>\n<p>You are using Rails 3 (and RSpec 2), and trying to define a custom rake task with <code>Spec::Rake::SpecTask.new</code></p>\n<p>Instead, do:</p>\n<pre><code class=\"language-ruby\">RSpec::Core::RakeTask.new(:spec) do |t|\n...\n</code></pre>\n<p>and make sure to change:</p>\n<pre><code class=\"language-ruby\">t.spec_files = FileList['spec/**/*_spec.rb']\n</code></pre>\n<p>to</p>\n<pre><code class=\"language-ruby\">t.pattern = 'spec/\\*_/_\\_spec.rb'\n</code></pre>\n",
            "comment_id": "20",
            "plaintext": "Problem:\n\n\nuninitialized constant RSpec::Rake\n\n\n\n\nSolution:\n\n\nYou are using Rails 3 (and RSpec 2), and trying to define a custom rake task with Spec::Rake::SpecTask.new\n\n\nInstead, do:\n\n\nRSpec::Core::RakeTask.new(:spec) do |t|\n...\n\n\n\nand make sure to change:\n\n\nt.spec_files = FileList['spec/**/*_spec.rb']\n\n\n\nto\n\n\nt.pattern = 'spec/\\*_/_\\_spec.rb'\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-09-25T00:00:00.000Z",
            "updated_at": "2024-04-19T02:17:15.000Z",
            "published_at": "2010-09-25T19:51:35.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af896",
            "uuid": "88f5a941-e0d9-44da-849e-d034829f510c",
            "title": "Configure SMTP - SMTP Error: Could not connect to SMTP host.",
            "slug": "configure-wordpress-smtp-error-could-not-connect-to-smtp-host",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nIf you are trying to configure your wordpress installation to\\nsend email from your gmail account: <ol> <li>Install\\nthe 'Configure SMTP' plugin, and check the 'Send e-mail via\\nGMail?' box.</li> <li>Send a test email to make sure\\neverything is working.</li> </ol> You might get the\\nerror message \\\"SMTP Error: Could not connect to SMTP host.\\\"\\n\\n<ul> <li>You just need to open port 465 on your\\nfirewall. You might need to ask your hosting provider / system administrator to do\\nthis for you.</li> <li> If it still doesn't work, you\\nmight need to double-check your gmail password..</li>\\n</ul>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>If you are trying to configure your wordpress installation to<br>\nsend email from your gmail account: <ol> <li>Install<br>\nthe 'Configure SMTP' plugin, and check the 'Send e-mail via<br>\nGMail?' box.</li> <li>Send a test email to make sure<br>\neverything is working.</li> </ol> You might get the<br>\nerror message &quot;SMTP Error: Could not connect to SMTP host.&quot;</p>\n<ul> <li>You just need to open port 465 on your\nfirewall. You might need to ask your hosting provider / system administrator to do\nthis for you.</li> <li> If it still doesn't work, you\nmight need to double-check your gmail password..</li>\n</ul>\n<!--kg-card-end: markdown-->",
            "comment_id": "21",
            "plaintext": "If you are trying to configure your wordpress installation to\n\nsend email from your gmail account:\n\n 1. Install\n    \n    the 'Configure SMTP' plugin, and check the 'Send e-mail via\n    \n    GMail?' box.\n 2. Send a test email to make sure\n    \n    everything is working.\n\nYou might get the\n\nerror message \"SMTP Error: Could not connect to SMTP host.\"\n\n\n\n\n * You just need to open port 465 on your\n   firewall. You might need to ask your hosting provider / system administrator to do\n   this for you.\n * If it still doesn't work, you\n   might need to double-check your gmail password..\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-10-07T00:00:00.000Z",
            "updated_at": "2010-10-07T00:00:00.000Z",
            "published_at": "2010-10-07T18:23:30.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af897",
            "uuid": "853564b3-8c44-4f5a-9457-5cd93cde46da",
            "title": "How to preserve indentation in wordpress [sourcecode] tags",
            "slug": "how-to-keep-indentation-in-wordpress-sourcecode-tags",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Dont use the visual editor. Copy the code into your 'HTML' view and it will preserve indentation. Copy it into 'Visual' view and your code will be all left-aligned...\\n\\nExamples:\\n\\n<strong>Code pasted in 'Visual' View</strong>\\n\\n```html\\n<indent>\\n  <indent>\\n    <indent> </indent>\\n  </indent>\\n</indent>\\n```\\n\\n<strong>Code pasted in 'HTML' View</strong>\\n\\n```html\\n<indent>\\n  <indent>\\n    <indent> </indent>\\n  </indent>\\n</indent>\\n```\\n\\nYMMV, but this is what works for me.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Dont use the visual editor. Copy the code into your 'HTML' view and it will preserve indentation. Copy it into 'Visual' view and your code will be all left-aligned...</p>\n<p>Examples:</p>\n<p><strong>Code pasted in 'Visual' View</strong></p>\n<pre><code class=\"language-html\">&lt;indent&gt;\n  &lt;indent&gt;\n    &lt;indent&gt; &lt;/indent&gt;\n  &lt;/indent&gt;\n&lt;/indent&gt;\n</code></pre>\n<p><strong>Code pasted in 'HTML' View</strong></p>\n<pre><code class=\"language-html\">&lt;indent&gt;\n  &lt;indent&gt;\n    &lt;indent&gt; &lt;/indent&gt;\n  &lt;/indent&gt;\n&lt;/indent&gt;\n</code></pre>\n<p>YMMV, but this is what works for me.</p>\n",
            "comment_id": "22",
            "plaintext": "Dont use the visual editor. Copy the code into your 'HTML' view and it will preserve indentation. Copy it into 'Visual' view and your code will be all left-aligned...\n\n\nExamples:\n\n\nCode pasted in 'Visual' View\n\n\n<indent>\n  <indent>\n    <indent> </indent>\n  </indent>\n</indent>\n\n\n\nCode pasted in 'HTML' View\n\n\n<indent>\n  <indent>\n    <indent> </indent>\n  </indent>\n</indent>\n\n\n\nYMMV, but this is what works for me.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-10-19T00:00:00.000Z",
            "updated_at": "2024-04-19T02:15:57.000Z",
            "published_at": "2010-10-19T20:58:38.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af898",
            "uuid": "84028b03-9c4c-46e0-80d5-81dd6ef15742",
            "title": "How to use bundler with multiple Gemfiles in plugins / extensions",
            "slug": "how-to-use-bundler-with-plugins-extensions",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Bundler makes it very easy to point to a gem folder on your system, and I definitely recommend this approach a lot more. The plugin can be a gem that we can just require, and it can specify its own dependencies in its .gemspec file.\\n\\nBut if you really don't want your plugin to be a gem, for whatever reason, then read on...\\n\\nIf we are developing a Spree extension, or a Retrospectiva extension, or a Fat Free CRM plugin, we might sometimes need a way to require the gems in multiple Gemfiles, but Bundler doesn't cater for this. The best solution I came up with is this:\\n\\n<ol>\\n\\t<li>Add a <strong>Gemfile</strong> file to the root of your plugin or extension, and specify the gems you need in the normal way.</li>\\n\\t<li>Add the following code to the bottom of your root Gemfile (in your main Rails app):</li>\\n</ol>\\n\\n```ruby\\n# Install gems from each plugin\\n\\nDir.glob(File.join(File.dirname(**FILE**), 'vendor', 'plugins', '\\\\*\\\\*', \\\"Gemfile\\\")) do |gemfile|\\neval(IO.read(gemfile), binding)\\nend\\n```\\n\\nThis will find and evaluate the Gemfiles from each of your plugins/extensions, as if you were modifying your base Gemfile.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Bundler makes it very easy to point to a gem folder on your system, and I definitely recommend this approach a lot more. The plugin can be a gem that we can just require, and it can specify its own dependencies in its .gemspec file.</p>\n<p>But if you really don't want your plugin to be a gem, for whatever reason, then read on...</p>\n<p>If we are developing a Spree extension, or a Retrospectiva extension, or a Fat Free CRM plugin, we might sometimes need a way to require the gems in multiple Gemfiles, but Bundler doesn't cater for this. The best solution I came up with is this:</p>\n<ol>\n\t<li>Add a <strong>Gemfile</strong> file to the root of your plugin or extension, and specify the gems you need in the normal way.</li>\n\t<li>Add the following code to the bottom of your root Gemfile (in your main Rails app):</li>\n</ol>\n<pre><code class=\"language-ruby\"># Install gems from each plugin\n\nDir.glob(File.join(File.dirname(**FILE**), 'vendor', 'plugins', '\\*\\*', \"Gemfile\")) do |gemfile|\neval(IO.read(gemfile), binding)\nend\n</code></pre>\n<p>This will find and evaluate the Gemfiles from each of your plugins/extensions, as if you were modifying your base Gemfile.</p>\n",
            "comment_id": "23",
            "plaintext": "Bundler makes it very easy to point to a gem folder on your system, and I definitely recommend this approach a lot more. The plugin can be a gem that we can just require, and it can specify its own dependencies in its .gemspec file.\n\n\nBut if you really don't want your plugin to be a gem, for whatever reason, then read on...\n\n\nIf we are developing a Spree extension, or a Retrospectiva extension, or a Fat Free CRM plugin, we might sometimes need a way to require the gems in multiple Gemfiles, but Bundler doesn't cater for this. The best solution I came up with is this:\n\n\n 1. Add a Gemfile file to the root of your plugin or extension, and specify the gems you need in the normal way.\n 2. Add the following code to the bottom of your root Gemfile (in your main Rails app):\n\n\n# Install gems from each plugin\n\nDir.glob(File.join(File.dirname(**FILE**), 'vendor', 'plugins', '\\*\\*', \"Gemfile\")) do |gemfile|\neval(IO.read(gemfile), binding)\nend\n\n\n\nThis will find and evaluate the Gemfiles from each of your plugins/extensions, as if you were modifying your base Gemfile.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-10-19T00:00:00.000Z",
            "updated_at": "2024-04-19T02:16:16.000Z",
            "published_at": "2010-10-19T20:37:16.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af899",
            "uuid": "04bcabfa-f5d2-4768-9867-932018cbcd88",
            "title": "Search and replace in multiple files on linux with bash, egrep, sed function",
            "slug": "search-and-replace-in-multiple-files-on-linux-with-bash-egrep-sed-function",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Here's a simple function to add to your shell if you ever want to replace a string in multiple files at once. It ignores everything in `.git`, otherwise you get 'bad index file sha1 signature' errors.\\n\\n```bash\\nfunction gsed () {\\nif [ -z \\\"$3\\\" ]\\nthen\\necho \\\"== Usage: gsed search_string replace_string [path]\\\"\\nelse\\negrep --exclude-dir=.git -lRZ \\\"$1\\\" $3 | xargs -0 -l sed -i -e \\\"s/$1/$2/g\\\"\\nfi\\n}\\n```\\n\\nAdd it to the bottom of `~/.bashrc`.\\n\\nSo if you want to replace all occurences of 'badly_named_method' with 'awesome_method_name' in the current directory, you would type:\\n\\n```bash\\ngsed \\\"badly_named_ruby_method\\\" \\\"awesome_method_name\\\" .\\n```\\n\\n> Note: quotes are optional for single words.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Here's a simple function to add to your shell if you ever want to replace a string in multiple files at once. It ignores everything in <code>.git</code>, otherwise you get 'bad index file sha1 signature' errors.</p>\n<pre><code class=\"language-bash\">function gsed () {\nif [ -z \"$3\" ]\nthen\necho \"== Usage: gsed search_string replace_string [path]\"\nelse\negrep --exclude-dir=.git -lRZ \"$1\" $3 | xargs -0 -l sed -i -e \"s/$1/$2/g\"\nfi\n}\n</code></pre>\n<p>Add it to the bottom of <code>~/.bashrc</code>.</p>\n<p>So if you want to replace all occurences of 'badly_named_method' with 'awesome_method_name' in the current directory, you would type:</p>\n<pre><code class=\"language-bash\">gsed \"badly_named_ruby_method\" \"awesome_method_name\" .\n</code></pre>\n<blockquote>\n<p>Note: quotes are optional for single words.</p>\n</blockquote>\n",
            "comment_id": "24",
            "plaintext": "Here's a simple function to add to your shell if you ever want to replace a string in multiple files at once. It ignores everything in .git, otherwise you get 'bad index file sha1 signature' errors.\n\n\nfunction gsed () {\nif [ -z \"$3\" ]\nthen\necho \"== Usage: gsed search_string replace_string [path]\"\nelse\negrep --exclude-dir=.git -lRZ \"$1\" $3 | xargs -0 -l sed -i -e \"s/$1/$2/g\"\nfi\n}\n\n\n\nAdd it to the bottom of ~/.bashrc.\n\n\nSo if you want to replace all occurences of 'badly_named_method' with 'awesome_method_name' in the current directory, you would type:\n\n\ngsed \"badly_named_ruby_method\" \"awesome_method_name\" .\n\n\n\n\n\n\nNote: quotes are optional for single words.\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-10-26T00:00:00.000Z",
            "updated_at": "2024-04-19T02:15:31.000Z",
            "published_at": "2010-10-26T18:05:53.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af89a",
            "uuid": "84a5e511-ece8-41e8-9680-a6caadc3c891",
            "title": "Make 'git status' put filepaths into numbered variables",
            "slug": "more-git-shortcuts-filepaths-in-bash-variables",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"I like my shortcuts for `git` (ie. `gst` for `git status`, `gca` for `git commit -a -m`, etc.)\\nBut I wanted more, so I thought it would be nice if I could somehow create 'shortcuts' to the filepaths of modified files whenever I run `git status`.\\nI created a function to export the paths of each modified file into numbered environment variables, and it has really sped up my workflow.\\n\\nYou will need to configure git if you want to have colorized output:\\n\\n```bash\\ngit config --global color.status always\\n```\\n\\nPaste the following script at the bottom of your `~/.bashrc file`, and use it by typing `gs`. (Change the shortcut to whatever you like.)\\n\\n```bash\\n# Processes your git status output, exporting bash variables\\n# for the filepaths of each modified file.\\n# To ensure colored output, please run: $ git config --global color.status always\\n# Written by Nathan D. Broadbent (www.madebynathan.com)\\n# -----------------------------------------------------------\\n\\ngs() {\\npfix=\\\"e\\\" # Set your preferred shortcut letter here\\nmax_changes=20 # Max changes before reverting to standard 'git status' (can be very slow otherwise)\\nIFS=$'\\\\n'\\n\\n# Only export variables for less than $max_changes\\n\\nstatus=`git status --porcelain`\\nif [ `echo \\\"$status\\\" | wc -l` -lt $max_changes ]; then\\nf=0 # Counter for the number of files\\nfor line in $status; do\\n      file=$(echo $line | sed \\\"s/^...//g\\\")\\n      let f++\\n      files[$f]=$file         # Array for formatting the output\\n      export $pfix$f=$file # Exporting variable for use.\\ndone\\n\\n    status=`git status`    # Fetch full status\\n\\n    # Search and replace each line, showing the exported variable name next to files.\\n    for line in $status; do\\n      i=1\\n      while [ $i -le $f ]; do\\n        search=${files[$i]}\\n        replace=\\\"\\\\033[2;37m[\\\\033[1m\\\\$$pfix$i\\\\033[2;37m]\\\\033[0m $search \\\"\\n        #echo $replace\\n        # (fixes a case when a file contains another file as a substring)\\n        line=${line/$search/$replace }   # Substitution for files with a space suffix.\\n        line=${line/%$search/$replace}    # Substitution for files with a newline suffix.\\n        let i++\\n      done\\n      echo -e $line                        # Print the final transformed line.\\n    done\\n\\nelse # If there are too many changed files, this 'gs' function will slow down. # In this case, fall back to plain 'git status'\\ngit status\\nfi\\n\\n# Reset IFS separator to default.\\n\\nunset IFS\\n}\\n```\\n\\nNow you can just type `gs`, and use the exported variables for commands. You can also customise the shortcut letter by changing the `pfix` variable in the function. I chose `e` because it's easy to slide your finger to it from the `$` key.\\n\\nExample:\\n\\n```bash\\n$ gs\\n\\n# On branch master\\n# Your branch is ahead of 'origin/master' by 4 commits.\\n#\\n# Changed but not updated:\\n# (use \\\"git add <file>...\\\"; to update what will be committed)\\n# (use \\\"git checkout -- <file>...\\\"; to discard changes in working directory)\\n# (commit or discard the untracked or modified content in submodules)\\n#\\n# modified: [$e1] vendor/plugins/crm_merge (modified content)\\n# modified: [$e2] vendor/plugins/crm_search (new commits, modified content)\\n# modified: [$e3] vendor/plugins/crm_super_tags (modified content)\\n#\\n\\nno changes added to commit (use \\\"git add\\\"; and/or \\\"git commit -a\\\")\\n\\n$ cd $e2\\nor\\n$ git rm -r $e3\\n```\\n\\n&nbsp;\\n\\nI use git version 1.7.1.1, GNU bash version 4.1.5(1), and Ubuntu 10.04.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I like my shortcuts for <code>git</code> (ie. <code>gst</code> for <code>git status</code>, <code>gca</code> for <code>git commit -a -m</code>, etc.)<br>\nBut I wanted more, so I thought it would be nice if I could somehow create 'shortcuts' to the filepaths of modified files whenever I run <code>git status</code>.<br>\nI created a function to export the paths of each modified file into numbered environment variables, and it has really sped up my workflow.</p>\n<p>You will need to configure git if you want to have colorized output:</p>\n<pre><code class=\"language-bash\">git config --global color.status always\n</code></pre>\n<p>Paste the following script at the bottom of your <code>~/.bashrc file</code>, and use it by typing <code>gs</code>. (Change the shortcut to whatever you like.)</p>\n<pre><code class=\"language-bash\"># Processes your git status output, exporting bash variables\n# for the filepaths of each modified file.\n# To ensure colored output, please run: $ git config --global color.status always\n# Written by Nathan D. Broadbent (www.madebynathan.com)\n# -----------------------------------------------------------\n\ngs() {\npfix=\"e\" # Set your preferred shortcut letter here\nmax_changes=20 # Max changes before reverting to standard 'git status' (can be very slow otherwise)\nIFS=$'\\n'\n\n# Only export variables for less than $max_changes\n\nstatus=`git status --porcelain`\nif [ `echo \"$status\" | wc -l` -lt $max_changes ]; then\nf=0 # Counter for the number of files\nfor line in $status; do\n      file=$(echo $line | sed \"s/^...//g\")\n      let f++\n      files[$f]=$file         # Array for formatting the output\n      export $pfix$f=$file # Exporting variable for use.\ndone\n\n    status=`git status`    # Fetch full status\n\n    # Search and replace each line, showing the exported variable name next to files.\n    for line in $status; do\n      i=1\n      while [ $i -le $f ]; do\n        search=${files[$i]}\n        replace=\"\\033[2;37m[\\033[1m\\$$pfix$i\\033[2;37m]\\033[0m $search \"\n        #echo $replace\n        # (fixes a case when a file contains another file as a substring)\n        line=${line/$search/$replace }   # Substitution for files with a space suffix.\n        line=${line/%$search/$replace}    # Substitution for files with a newline suffix.\n        let i++\n      done\n      echo -e $line                        # Print the final transformed line.\n    done\n\nelse # If there are too many changed files, this 'gs' function will slow down. # In this case, fall back to plain 'git status'\ngit status\nfi\n\n# Reset IFS separator to default.\n\nunset IFS\n}\n</code></pre>\n<p>Now you can just type <code>gs</code>, and use the exported variables for commands. You can also customise the shortcut letter by changing the <code>pfix</code> variable in the function. I chose <code>e</code> because it's easy to slide your finger to it from the <code>$</code> key.</p>\n<p>Example:</p>\n<pre><code class=\"language-bash\">$ gs\n\n# On branch master\n# Your branch is ahead of 'origin/master' by 4 commits.\n#\n# Changed but not updated:\n# (use \"git add &lt;file&gt;...\"; to update what will be committed)\n# (use \"git checkout -- &lt;file&gt;...\"; to discard changes in working directory)\n# (commit or discard the untracked or modified content in submodules)\n#\n# modified: [$e1] vendor/plugins/crm_merge (modified content)\n# modified: [$e2] vendor/plugins/crm_search (new commits, modified content)\n# modified: [$e3] vendor/plugins/crm_super_tags (modified content)\n#\n\nno changes added to commit (use \"git add\"; and/or \"git commit -a\")\n\n$ cd $e2\nor\n$ git rm -r $e3\n</code></pre>\n<p>&nbsp;</p>\n<p>I use git version 1.7.1.1, GNU bash version 4.1.5(1), and Ubuntu 10.04.</p>\n",
            "comment_id": "25",
            "plaintext": "I like my shortcuts for git (ie. gst for git status, gca for git commit -a -m, etc.)\n\nBut I wanted more, so I thought it would be nice if I could somehow create 'shortcuts' to the filepaths of modified files whenever I run git status.\n\nI created a function to export the paths of each modified file into numbered environment variables, and it has really sped up my workflow.\n\n\nYou will need to configure git if you want to have colorized output:\n\n\ngit config --global color.status always\n\n\n\nPaste the following script at the bottom of your ~/.bashrc file, and use it by typing gs. (Change the shortcut to whatever you like.)\n\n\n# Processes your git status output, exporting bash variables\n# for the filepaths of each modified file.\n# To ensure colored output, please run: $ git config --global color.status always\n# Written by Nathan D. Broadbent (www.madebynathan.com)\n# -----------------------------------------------------------\n\ngs() {\npfix=\"e\" # Set your preferred shortcut letter here\nmax_changes=20 # Max changes before reverting to standard 'git status' (can be very slow otherwise)\nIFS=$'\\n'\n\n# Only export variables for less than $max_changes\n\nstatus=`git status --porcelain`\nif [ `echo \"$status\" | wc -l` -lt $max_changes ]; then\nf=0 # Counter for the number of files\nfor line in $status; do\n      file=$(echo $line | sed \"s/^...//g\")\n      let f++\n      files[$f]=$file         # Array for formatting the output\n      export $pfix$f=$file # Exporting variable for use.\ndone\n\n    status=`git status`    # Fetch full status\n\n    # Search and replace each line, showing the exported variable name next to files.\n    for line in $status; do\n      i=1\n      while [ $i -le $f ]; do\n        search=${files[$i]}\n        replace=\"\\033[2;37m[\\033[1m\\$$pfix$i\\033[2;37m]\\033[0m $search \"\n        #echo $replace\n        # (fixes a case when a file contains another file as a substring)\n        line=${line/$search/$replace }   # Substitution for files with a space suffix.\n        line=${line/%$search/$replace}    # Substitution for files with a newline suffix.\n        let i++\n      done\n      echo -e $line                        # Print the final transformed line.\n    done\n\nelse # If there are too many changed files, this 'gs' function will slow down. # In this case, fall back to plain 'git status'\ngit status\nfi\n\n# Reset IFS separator to default.\n\nunset IFS\n}\n\n\n\nNow you can just type gs, and use the exported variables for commands. You can also customise the shortcut letter by changing the pfix variable in the function. I chose e because it's easy to slide your finger to it from the $ key.\n\n\nExample:\n\n\n$ gs\n\n# On branch master\n# Your branch is ahead of 'origin/master' by 4 commits.\n#\n# Changed but not updated:\n# (use \"git add <file>...\"; to update what will be committed)\n# (use \"git checkout -- <file>...\"; to discard changes in working directory)\n# (commit or discard the untracked or modified content in submodules)\n#\n# modified: [$e1] vendor/plugins/crm_merge (modified content)\n# modified: [$e2] vendor/plugins/crm_search (new commits, modified content)\n# modified: [$e3] vendor/plugins/crm_super_tags (modified content)\n#\n\nno changes added to commit (use \"git add\"; and/or \"git commit -a\")\n\n$ cd $e2\nor\n$ git rm -r $e3\n\n\n\n \n\n\nI use git version 1.7.1.1, GNU bash version 4.1.5(1), and Ubuntu 10.04.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-10-29T00:00:00.000Z",
            "updated_at": "2024-04-19T02:14:38.000Z",
            "published_at": "2010-10-29T22:31:35.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af89b",
            "uuid": "2dbda9ec-b0f3-4b13-8bf4-802e72531e4b",
            "title": "Trying to use l1merain but it doesn't work?",
            "slug": "trying-to-use-l1merain-but-it-doesnt-work",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nYou are trying to use l1merain to jailbreak on windows xp, but your iPhone doesn't take it.. You should see a green rain drop if the jailbreaking process is successful, but you just see the apple icon.\\n\\nWhat you need to do is press CTRL+SHIFT+ESC. Sort by 'Image Name'. Then end these processes: 'iPodService' and 'iTunes'.\\n\\nYour jailbreak should now work fine.\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>You are trying to use l1merain to jailbreak on windows xp, but your iPhone doesn't take it.. You should see a green rain drop if the jailbreaking process is successful, but you just see the apple icon.</p>\n<p>What you need to do is press CTRL+SHIFT+ESC. Sort by 'Image Name'. Then end these processes: 'iPodService' and 'iTunes'.</p>\n<p>Your jailbreak should now work fine.</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "26",
            "plaintext": "You are trying to use l1merain to jailbreak on windows xp, but your iPhone doesn't take it.. You should see a green rain drop if the jailbreaking process is successful, but you just see the apple icon.\n\n\nWhat you need to do is press CTRL+SHIFT+ESC. Sort by 'Image Name'. Then end these processes: 'iPodService' and 'iTunes'.\n\n\nYour jailbreak should now work fine.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-11-01T00:00:00.000Z",
            "updated_at": "2010-11-01T00:00:00.000Z",
            "published_at": "2010-11-01T14:26:55.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af89c",
            "uuid": "7c4f935e-205f-434c-9e8b-16e807bef623",
            "title": "Grooveshark - Set Current Song as Browser Title",
            "slug": "grooveshark-set-current-song-as-browser-title",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nI like Grooveshark. Its like last.fm, but you can choose the songs &amp; albums you want to play. I would like to get a subscription one day, but I'm not sure when the RIAA is planning their attack, so maybe I'll hold off for now :)\\n\\nIn the meantime, I was dissapointed that I couldn't see which song was currently playing in the browser title. So heres a greasemonkey script to do just that:\\n\\n<a href=\\\"http://userscripts.org/scripts/show/87742\\\">http://userscripts.org/scripts/show/87742</a>\\n\\nHope you find it useful!\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>I like Grooveshark. Its like last.fm, but you can choose the songs &amp; albums you want to play. I would like to get a subscription one day, but I'm not sure when the RIAA is planning their attack, so maybe I'll hold off for now :)</p>\n<p>In the meantime, I was dissapointed that I couldn't see which song was currently playing in the browser title. So heres a greasemonkey script to do just that:</p>\n<p><a href=\"http://userscripts.org/scripts/show/87742\">http://userscripts.org/scripts/show/87742</a></p>\n<p>Hope you find it useful!</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "27",
            "plaintext": "I like Grooveshark. Its like last.fm, but you can choose the songs & albums you want to play. I would like to get a subscription one day, but I'm not sure when the RIAA is planning their attack, so maybe I'll hold off for now :)\n\n\nIn the meantime, I was dissapointed that I couldn't see which song was currently playing in the browser title. So heres a greasemonkey script to do just that:\n\n\nhttp://userscripts.org/scripts/show/87742\n\n\nHope you find it useful!\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-11-04T00:00:00.000Z",
            "updated_at": "2010-11-04T00:00:00.000Z",
            "published_at": "2010-11-04T19:07:51.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af89d",
            "uuid": "ffc71121-5610-43cb-ad7b-7a4c4b29f093",
            "title": "My attempt at an embossed metal box from beverage can",
            "slug": "my-attempt-at-an-embossed-metal-box-from-beverage-can",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nI was inspired by a [makezine.com article I was reading this evening](http://blog.makezine.com/archive/2010/11/how-to_embossed_metal_box_from_beve.html), and decided to follow a tutorial to make an embossed box out of an aluminium can. I haven't done anything creative for a long time, and I really enjoyed it.\\n\\n<img class=\\\"lightbox\\\" src=\\\"__GHOST_URL__/content/images/posts/2010/11/box-small.jpg\\\" alt=\\\"Embossed Aluminium Box\\\" />\\n\\nI'm not sure if sanding the outside of the can is completely necessary, since its only visible on the inside of the box. Also, a ballpoint pen isn't the best tool to use, since it leaves blue ink everywhere.\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>I was inspired by a <a href=\"http://blog.makezine.com/archive/2010/11/how-to_embossed_metal_box_from_beve.html\">makezine.com article I was reading this evening</a>, and decided to follow a tutorial to make an embossed box out of an aluminium can. I haven't done anything creative for a long time, and I really enjoyed it.</p>\n<img class=\"lightbox\" src=\"__GHOST_URL__/content/images/posts/2010/11/box-small.jpg\" alt=\"Embossed Aluminium Box\" />\n<p>I'm not sure if sanding the outside of the can is completely necessary, since its only visible on the inside of the box. Also, a ballpoint pen isn't the best tool to use, since it leaves blue ink everywhere.</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "28",
            "plaintext": "I was inspired by a makezine.com article I was reading this evening, and decided to follow a tutorial to make an embossed box out of an aluminium can. I haven't done anything creative for a long time, and I really enjoyed it.\n\n\n\nI'm not sure if sanding the outside of the can is completely necessary, since its only visible on the inside of the box. Also, a ballpoint pen isn't the best tool to use, since it leaves blue ink everywhere.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-11-05T00:00:00.000Z",
            "updated_at": "2010-11-05T00:00:00.000Z",
            "published_at": "2010-11-05T15:05:57.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af89e",
            "uuid": "52d99874-0917-4f8e-825b-dfe2712bdba5",
            "title": "RFID apartment lock (& iPhone app)",
            "slug": "octopus-card-door-lock",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"[Octopus cards](http://en.wikipedia.org/wiki/Octopus_card) in Hong Kong can be used to purchase almost anything, such as groceries, McDonalds, and public transport. Since everyone has one, a lot of apartments are using them for access control.\\n\\nOne of my first projects after moving back to Hong Kong was installing an electronic lock on my apartment door. My door can be now be unlocked with an Octopus RFID card, iPhone app, or over the web.\\n\\n<br/>\\n<h3>Parts List</h3>\\n<ul>\\n\\t<li> Compaq Evo T20 thin client running linux (and Ruby!) (any dedicated PC would work too)</li>\\n</ul>\\n<ul>\\n\\t<li>USB Octopus Card Reader (Sony FeliCa ISO14443C)\\n<ul>\\n\\t<li>a <strong>14443C-R-USB-D2</strong> from <a href=\\\"http://www.rfidshop.com.hk/\\\">http://www.rfidshop.com.hk/</a> under <strong>Passive RFID Reader</strong> → <strong>13.56Mhz</strong> → <strong>ISO14443C – Sony Felica</strong></li>\\n</ul>\\n</li>\\n\\t<li>Door with a lock that can be unlocked by turning the handle from the inside.</li>\\n\\t<li>12V central locking actuator from a car door.</li>\\n\\t<li>Vellman K8055 USB interface board</li>\\n\\t<li>Ruby octopus reader library, etc (<a href=\\\"http://github.com/ndbroadbent/octopus\\\">http://github.com/ndbroadbent/octopus</a>)</li>\\n</ul>\\n<br/>\\n\\nI wrote a small ruby library to read an octopus card ID (<a href=\\\"http://github.com/ndbroadbent/octopus\\\">http://github.com/ndbroadbent/octopus</a>), using a USB RFID reader for the 13.56 MHz Sony FeliCa chip. I used a K8055 USB interface board to switch on a relay every time an authorized octopus card was recognized.\\n\\nMy apartment door lock is the \\\"button\\\" kind, with a button in the middle of the handle that pops out when the knob is turned from the inside. So I put a screw into the base of the handle, and mounted the actuator on the apartment door, so the actuator turns the handle and unlocks the door. Of course its not the most elegant solution, but the actuator was only about $7 USD...\\nIt can only unlock the door, but I don't need it to lock automatically.\\n\\nI added a web server, and wrote an iPhone app so that I can unlock the door via our wifi connection.\\nI've also added some more relays to control the house lights and ceiling fan.\\n\\nHere's some photos of the lock and the iPhone app (sorry for the quality):\\n\"},{\"type\":\"gallery\",\"version\":1,\"images\":[{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/compaq_evo_t20.jpg\",\"width\":480,\"height\":640,\"fileName\":\"compaq_evo_t20.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/flat10C-screen.jpg\",\"width\":480,\"height\":640,\"fileName\":\"flat10C-screen.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/inside_door.jpg\",\"width\":480,\"height\":640,\"fileName\":\"inside_door.jpg\"},{\"row\":1,\"src\":\"__GHOST_URL__/content/images/2024/04/outside_door.jpg\",\"width\":480,\"height\":640,\"fileName\":\"outside_door.jpg\"},{\"row\":1,\"src\":\"__GHOST_URL__/content/images/2024/04/welcome_nathan.jpg\",\"width\":480,\"height\":640,\"fileName\":\"welcome_nathan.jpg\"},{\"row\":1,\"src\":\"__GHOST_URL__/content/images/2024/04/IMG_0173.png\",\"width\":320,\"height\":480,\"fileName\":\"IMG_0173.png\"},{\"row\":2,\"src\":\"__GHOST_URL__/content/images/2024/04/IMG_0174.png\",\"width\":320,\"height\":480,\"fileName\":\"IMG_0174.png\"},{\"row\":2,\"src\":\"__GHOST_URL__/content/images/2024/04/IMG_0176.png\",\"width\":320,\"height\":480,\"fileName\":\"IMG_0176.png\"},{\"row\":2,\"src\":\"__GHOST_URL__/content/images/2024/04/IMG_0178.png\",\"width\":320,\"height\":480,\"fileName\":\"IMG_0178.png\"}],\"caption\":\"\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><a href=\"http://en.wikipedia.org/wiki/Octopus_card\">Octopus cards</a> in Hong Kong can be used to purchase almost anything, such as groceries, McDonalds, and public transport. Since everyone has one, a lot of apartments are using them for access control.</p>\n<p>One of my first projects after moving back to Hong Kong was installing an electronic lock on my apartment door. My door can be now be unlocked with an Octopus RFID card, iPhone app, or over the web.</p>\n<br>\n<h3>Parts List</h3>\n<ul>\n\t<li> Compaq Evo T20 thin client running linux (and Ruby!) (any dedicated PC would work too)</li>\n</ul>\n<ul>\n\t<li>USB Octopus Card Reader (Sony FeliCa ISO14443C)\n<ul>\n\t<li>a <strong>14443C-R-USB-D2</strong> from <a href=\"http://www.rfidshop.com.hk/\">http://www.rfidshop.com.hk/</a> under <strong>Passive RFID Reader</strong> → <strong>13.56Mhz</strong> → <strong>ISO14443C – Sony Felica</strong></li>\n</ul>\n</li>\n\t<li>Door with a lock that can be unlocked by turning the handle from the inside.</li>\n\t<li>12V central locking actuator from a car door.</li>\n\t<li>Vellman K8055 USB interface board</li>\n\t<li>Ruby octopus reader library, etc (<a href=\"http://github.com/ndbroadbent/octopus\">http://github.com/ndbroadbent/octopus</a>)</li>\n</ul>\n<br>\n<p>I wrote a small ruby library to read an octopus card ID (<a href=\"http://github.com/ndbroadbent/octopus\">http://github.com/ndbroadbent/octopus</a>), using a USB RFID reader for the 13.56 MHz Sony FeliCa chip. I used a K8055 USB interface board to switch on a relay every time an authorized octopus card was recognized.</p>\n<p>My apartment door lock is the \"button\" kind, with a button in the middle of the handle that pops out when the knob is turned from the inside. So I put a screw into the base of the handle, and mounted the actuator on the apartment door, so the actuator turns the handle and unlocks the door. Of course its not the most elegant solution, but the actuator was only about $7 USD...<br>\nIt can only unlock the door, but I don't need it to lock automatically.</p>\n<p>I added a web server, and wrote an iPhone app so that I can unlock the door via our wifi connection.<br>\nI've also added some more relays to control the house lights and ceiling fan.</p>\n<p>Here's some photos of the lock and the iPhone app (sorry for the quality):</p>\n<figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/compaq_evo_t20.jpg\" width=\"480\" height=\"640\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/flat10C-screen.jpg\" width=\"480\" height=\"640\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/inside_door.jpg\" width=\"480\" height=\"640\" loading=\"lazy\" alt=\"\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/outside_door.jpg\" width=\"480\" height=\"640\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/welcome_nathan.jpg\" width=\"480\" height=\"640\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/IMG_0173.png\" width=\"320\" height=\"480\" loading=\"lazy\" alt=\"\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/IMG_0174.png\" width=\"320\" height=\"480\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/IMG_0176.png\" width=\"320\" height=\"480\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/IMG_0178.png\" width=\"320\" height=\"480\" loading=\"lazy\" alt=\"\"></div></div></div></figure>",
            "comment_id": "29",
            "plaintext": "Octopus cards in Hong Kong can be used to purchase almost anything, such as groceries, McDonalds, and public transport. Since everyone has one, a lot of apartments are using them for access control.\n\n\nOne of my first projects after moving back to Hong Kong was installing an electronic lock on my apartment door. My door can be now be unlocked with an Octopus RFID card, iPhone app, or over the web.\n\n\n\n\n\nParts List\n\n\n * Compaq Evo T20 thin client running linux (and Ruby!) (any dedicated PC would work too)\n\n\n * USB Octopus Card Reader (Sony FeliCa ISO14443C)\n   \n   * a 14443C-R-USB-D2 from http://www.rfidshop.com.hk/ under Passive RFID Reader → 13.56Mhz → ISO14443C – Sony Felica\n   \n * Door with a lock that can be unlocked by turning the handle from the inside.\n * 12V central locking actuator from a car door.\n * Vellman K8055 USB interface board\n * Ruby octopus reader library, etc (http://github.com/ndbroadbent/octopus)\n\n\n\n\nI wrote a small ruby library to read an octopus card ID (http://github.com/ndbroadbent/octopus), using a USB RFID reader for the 13.56 MHz Sony FeliCa chip. I used a K8055 USB interface board to switch on a relay every time an authorized octopus card was recognized.\n\n\nMy apartment door lock is the \"button\" kind, with a button in the middle of the handle that pops out when the knob is turned from the inside. So I put a screw into the base of the handle, and mounted the actuator on the apartment door, so the actuator turns the handle and unlocks the door. Of course its not the most elegant solution, but the actuator was only about $7 USD...\n\nIt can only unlock the door, but I don't need it to lock automatically.\n\n\nI added a web server, and wrote an iPhone app so that I can unlock the door via our wifi connection.\n\nI've also added some more relays to control the house lights and ceiling fan.\n\n\nHere's some photos of the lock and the iPhone app (sorry for the quality):\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-11-05T00:00:00.000Z",
            "updated_at": "2024-04-19T02:10:18.000Z",
            "published_at": "2010-11-05T20:10:37.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af89f",
            "uuid": "64a0f7bb-9495-4863-8717-10900101e33a",
            "title": "Get Punished for Breaking Your Software Tests",
            "slug": "get-attacked-for-breaking-software",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nAt work, we use software called Atlassian Bamboo. It does CI (continuous integration) for us, so whenever a developer updates the code, it will run all of the software's tests, and makes sure everything still works.\\n\\nWe had a USB Missile launcher lying around, and I thought it could be put to good use. So now, whenever a developer commits a change that breaks a test, he gets shot.\\n\\n<br>\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2010/11/Photo-Nov-11-17-21-55.jpg\\\" alt=\\\"CI Sentinel\\\" />\\n\\n<br>\\n\\nThe launcher is a bit wimpy though. I'd like to replace the springs with some more powerful ones, since the darts only get about half way to Steve's desk :P\\n\\nIf you're interested, see here for the source code and instructions:\\n<a href=\\\"https://github.com/ndbroadbent/bamboo_punisher\\\">https://github.com/ndbroadbent/bamboo_punisher</a>\\n\\n### UPDATE:\\n\\nI attached a webcam and set it to record a video every time a missile was fired. Heres a link to the latest video:\\n[http://www.youtube.com/watch?v=MK1p7Nz5c9s](http://www.youtube.com/watch?v=MK1p7Nz5c9s)\\n\\n### UPDATE 2:\\n\\nThe Atlassian guys wrote an article about us and posted it on their blog!\\n\\nClick here to see it: [http://blogs.atlassian.com/devtools/2010/12/missiles-failed-builds-bamboo-punisher.html](http://blogs.atlassian.com/devtools/2010/12/missiles-failed-builds-bamboo-punisher.html)\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>At work, we use software called Atlassian Bamboo. It does CI (continuous integration) for us, so whenever a developer updates the code, it will run all of the software's tests, and makes sure everything still works.</p>\n<p>We had a USB Missile launcher lying around, and I thought it could be put to good use. So now, whenever a developer commits a change that breaks a test, he gets shot.</p>\n<br>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2010/11/Photo-Nov-11-17-21-55.jpg\" alt=\"CI Sentinel\">\n<br>\n<p>The launcher is a bit wimpy though. I'd like to replace the springs with some more powerful ones, since the darts only get about half way to Steve's desk :P</p>\n<p>If you're interested, see here for the source code and instructions:<br>\n<a href=\"https://github.com/ndbroadbent/bamboo_punisher\">https://github.com/ndbroadbent/bamboo_punisher</a></p>\n<h3 id=\"update\">UPDATE:</h3>\n<p>I attached a webcam and set it to record a video every time a missile was fired. Heres a link to the latest video:<br>\n<a href=\"http://www.youtube.com/watch?v=MK1p7Nz5c9s\">http://www.youtube.com/watch?v=MK1p7Nz5c9s</a></p>\n<h3 id=\"update-2\">UPDATE 2:</h3>\n<p>The Atlassian guys wrote an article about us and posted it on their blog!</p>\n<p>Click here to see it: <a href=\"http://blogs.atlassian.com/devtools/2010/12/missiles-failed-builds-bamboo-punisher.html\">http://blogs.atlassian.com/devtools/2010/12/missiles-failed-builds-bamboo-punisher.html</a></p>\n",
            "comment_id": "30",
            "plaintext": "At work, we use software called Atlassian Bamboo. It does CI (continuous integration) for us, so whenever a developer updates the code, it will run all of the software's tests, and makes sure everything still works.\n\n\nWe had a USB Missile launcher lying around, and I thought it could be put to good use. So now, whenever a developer commits a change that breaks a test, he gets shot.\n\n\n\n\n\n\n\nThe launcher is a bit wimpy though. I'd like to replace the springs with some more powerful ones, since the darts only get about half way to Steve's desk :P\n\n\nIf you're interested, see here for the source code and instructions:\n\nhttps://github.com/ndbroadbent/bamboo_punisher\n\n\n\nUPDATE:\n\n\nI attached a webcam and set it to record a video every time a missile was fired. Heres a link to the latest video:\n\nhttp://www.youtube.com/watch?v=MK1p7Nz5c9s\n\n\n\nUPDATE 2:\n\n\nThe Atlassian guys wrote an article about us and posted it on their blog!\n\n\nClick here to see it: http://blogs.atlassian.com/devtools/2010/12/missiles-failed-builds-bamboo-punisher.html\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-11-12T00:00:00.000Z",
            "updated_at": "2024-04-19T02:07:21.000Z",
            "published_at": "2010-11-12T09:38:09.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8a0",
            "uuid": "98adb365-5e87-4efd-8568-fefd7733c035",
            "title": "Gedit plugin I18n Helper for Rails",
            "slug": "gedit-plugin-i18n-helper-for-rails",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nGedit plugin - I18n Helper for Rails\\nMenu and keyboard shortcut for internationalizing strings in Rails templates.\\n\\nSimple at the moment, but useful to anyone who might want to learn how to write a gedit plugin to manipulate selected strings.\\n\\n<a href=\\\"https://github.com/ndbroadbent/gedit_i18n_helper\\\">https://github.com/ndbroadbent/gedit_i18n_helper</a>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>Gedit plugin - I18n Helper for Rails<br>\nMenu and keyboard shortcut for internationalizing strings in Rails templates.</p>\n<p>Simple at the moment, but useful to anyone who might want to learn how to write a gedit plugin to manipulate selected strings.</p>\n<p><a href=\"https://github.com/ndbroadbent/gedit_i18n_helper\">https://github.com/ndbroadbent/gedit_i18n_helper</a></p>\n<!--kg-card-end: markdown-->",
            "comment_id": "31",
            "plaintext": "Gedit plugin - I18n Helper for Rails\n\nMenu and keyboard shortcut for internationalizing strings in Rails templates.\n\n\nSimple at the moment, but useful to anyone who might want to learn how to write a gedit plugin to manipulate selected strings.\n\n\nhttps://github.com/ndbroadbent/gedit_i18n_helper\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-12-03T00:00:00.000Z",
            "updated_at": "2010-12-03T00:00:00.000Z",
            "published_at": "2010-12-03T04:34:48.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8a1",
            "uuid": "ae211e0b-d47d-41e4-889c-7f20fd218231",
            "title": "iOS JB tweak - Replace operator with current prepaid balance",
            "slug": "ios-tweak-replace-operator-with-current-prepaid-balance",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\n<a href=\\\"https://github.com/ndbroadbent/ios_replace_operator_with_balance\\\"><strong>https://github.com/ndbroadbent/ios_replace_operator_with_balance</strong></a>\\n\\nReplace Operator on jailbroken iOS 4.x with current prepaid balance.\\nSpecifically written for PCCW in Hong Kong, with an AT+CUSD command of `##122#`.\\n\\nAn extension to <a href=\\\"https://github.com/NSPwn/Fake-Operator\\\">Fake-Operator</a>\\n\\nCredit to <a href=\\\"http://george.insideiphone.com/index.php/2007/11/25/a-convenient-tool-to-send-at-commands\\\">this site</a> for the source code of sendmodem.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2010/12/photo.png\\\" alt=\\\"BalanceAsOperator screenshot\\\" />\\n\\n<strong>Install</strong>\\n\\nDownload the .deb package from the <a href=\\\"https://github.com/ndbroadbent/ios_replace_operator_with_balance\\\">‘Downloads’ page on github</a>, and install with `dpkg -i << package >>.deb`\\n\\n<strong>How it works</strong>\\n\\nPackage contains an executable binary that sends an AT USSD command to the carrier, which returns the balance message. Program then replaces the carrier name in the top left corner with the parsed balance. It does this by altering the com.nspwn.fakeoperatorpreferences plist, and then notifying FakeOperator to update SpringBoard.\\n\\nAlso includes a launchd script that schedules the program to be executed every half hour.\\n\\n<strong>Tags</strong>\\n\\nThis project might also be useful if you need to learn how to:\\n\\n- Compile an iPhone program for iOS 4.1/4.2\\n- Run a script or application on iOS 4.1/4.2 at a scheduled interval (with launchd)\\n- Send AT commands to the iPhone/iPad modem (programmatically send SMS/dial numbers/etc)\\n- Write plist files to alter preferences for another application\\n\\n<strong>Why</strong>\\n\\nMy carrier (PCCW) doesn’t believe in sending SMS alerts when my balance is about to, or even has, run out. I’ve emailed them about it, but thats just the way it is. So I thought this would be a better alternative to getting a new number.\\n\\nWould be happy to help anyone alter this for their own carriers, if requested. However, some operators do weird stuff like SMS every time you send an AT command like this, so that would be annoying.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><a href=\"https://github.com/ndbroadbent/ios_replace_operator_with_balance\"><strong>https://github.com/ndbroadbent/ios_replace_operator_with_balance</strong></a></p>\n<p>Replace Operator on jailbroken iOS 4.x with current prepaid balance.<br>\nSpecifically written for PCCW in Hong Kong, with an AT+CUSD command of <code>##122#</code>.</p>\n<p>An extension to <a href=\"https://github.com/NSPwn/Fake-Operator\">Fake-Operator</a></p>\n<p>Credit to <a href=\"http://george.insideiphone.com/index.php/2007/11/25/a-convenient-tool-to-send-at-commands\">this site</a> for the source code of sendmodem.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2010/12/photo.png\" alt=\"BalanceAsOperator screenshot\">\n<p><strong>Install</strong></p>\n<p>Download the .deb package from the <a href=\"https://github.com/ndbroadbent/ios_replace_operator_with_balance\">‘Downloads’ page on github</a>, and install with <code>dpkg -i &lt;&lt; package &gt;&gt;.deb</code></p>\n<p><strong>How it works</strong></p>\n<p>Package contains an executable binary that sends an AT USSD command to the carrier, which returns the balance message. Program then replaces the carrier name in the top left corner with the parsed balance. It does this by altering the com.nspwn.fakeoperatorpreferences plist, and then notifying FakeOperator to update SpringBoard.</p>\n<p>Also includes a launchd script that schedules the program to be executed every half hour.</p>\n<p><strong>Tags</strong></p>\n<p>This project might also be useful if you need to learn how to:</p>\n<ul>\n<li>Compile an iPhone program for iOS 4.1/4.2</li>\n<li>Run a script or application on iOS 4.1/4.2 at a scheduled interval (with launchd)</li>\n<li>Send AT commands to the iPhone/iPad modem (programmatically send SMS/dial numbers/etc)</li>\n<li>Write plist files to alter preferences for another application</li>\n</ul>\n<p><strong>Why</strong></p>\n<p>My carrier (PCCW) doesn’t believe in sending SMS alerts when my balance is about to, or even has, run out. I’ve emailed them about it, but thats just the way it is. So I thought this would be a better alternative to getting a new number.</p>\n<p>Would be happy to help anyone alter this for their own carriers, if requested. However, some operators do weird stuff like SMS every time you send an AT command like this, so that would be annoying.</p>\n",
            "comment_id": "32",
            "plaintext": "https://github.com/ndbroadbent/ios_replace_operator_with_balance\n\n\nReplace Operator on jailbroken iOS 4.x with current prepaid balance.\n\nSpecifically written for PCCW in Hong Kong, with an AT+CUSD command of ##122#.\n\n\nAn extension to Fake-Operator\n\n\nCredit to this site for the source code of sendmodem.\n\n\n\nInstall\n\n\nDownload the .deb package from the ‘Downloads’ page on github, and install with dpkg -i << package >>.deb\n\n\nHow it works\n\n\nPackage contains an executable binary that sends an AT USSD command to the carrier, which returns the balance message. Program then replaces the carrier name in the top left corner with the parsed balance. It does this by altering the com.nspwn.fakeoperatorpreferences plist, and then notifying FakeOperator to update SpringBoard.\n\n\nAlso includes a launchd script that schedules the program to be executed every half hour.\n\n\nTags\n\n\nThis project might also be useful if you need to learn how to:\n\n\n * Compile an iPhone program for iOS 4.1/4.2\n * Run a script or application on iOS 4.1/4.2 at a scheduled interval (with launchd)\n * Send AT commands to the iPhone/iPad modem (programmatically send SMS/dial numbers/etc)\n * Write plist files to alter preferences for another application\n\n\nWhy\n\n\nMy carrier (PCCW) doesn’t believe in sending SMS alerts when my balance is about to, or even has, run out. I’ve emailed them about it, but thats just the way it is. So I thought this would be a better alternative to getting a new number.\n\n\nWould be happy to help anyone alter this for their own carriers, if requested. However, some operators do weird stuff like SMS every time you send an AT command like this, so that would be annoying.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-12-26T00:00:00.000Z",
            "updated_at": "2024-04-19T02:05:13.000Z",
            "published_at": "2010-12-26T16:42:16.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8a2",
            "uuid": "20b0df0a-dd94-4d8c-8f3b-57872fe16ba7",
            "title": "More home automation..",
            "slug": "more-home-automation",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nMy hall light turns on for 15 minutes if it's past 10pm and I unlock my door with an octopus card or iPhone.\\n\\n<a href=\\\"__GHOST_URL__/content/images/posts/2010/12/hall-light.jpg\\\"><img class=\\\"aligncenter size-medium wp-image-311\\\" title=\\\"Hall Light Automated\\\" src=\\\"__GHOST_URL__/content/images/posts/2010/12/hall-light.jpg\\\" alt=\\\"Hall Light Automated\\\" width=\\\"225\\\" height=\\\"300\\\" /></a>\\n\\nIts just a 12v relay (rated at 240V/30A), and some cat-5 to the thin client PC. All happens to fit perfectly inside the light switch.\\n\\nNext up, automatic plant watering ...\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>My hall light turns on for 15 minutes if it's past 10pm and I unlock my door with an octopus card or iPhone.</p>\n<p><a href=\"__GHOST_URL__/content/images/posts/2010/12/hall-light.jpg\"><img class=\"aligncenter size-medium wp-image-311\" title=\"Hall Light Automated\" src=\"__GHOST_URL__/content/images/posts/2010/12/hall-light.jpg\" alt=\"Hall Light Automated\" width=\"225\" height=\"300\" /></a></p>\n<p>Its just a 12v relay (rated at 240V/30A), and some cat-5 to the thin client PC. All happens to fit perfectly inside the light switch.</p>\n<p>Next up, automatic plant watering ...</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "33",
            "plaintext": "My hall light turns on for 15 minutes if it's past 10pm and I unlock my door with an octopus card or iPhone.\n\n\n\n\n\nIts just a 12v relay (rated at 240V/30A), and some cat-5 to the thin client PC. All happens to fit perfectly inside the light switch.\n\n\nNext up, automatic plant watering ...\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-12-27T00:00:00.000Z",
            "updated_at": "2010-12-27T00:00:00.000Z",
            "published_at": "2010-12-27T16:29:12.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8a3",
            "uuid": "7f37efe9-5329-468d-80a0-bac249b6b593",
            "title": "Demo iPhone app - Apartment automation",
            "slug": "demo-iphone-app-apartment-automation",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"<a href=\\\"https://github.com/ndbroadbent/ios_flat_10c\\\"><strong>https://github.com/ndbroadbent/ios_flat_10c</strong></a>\\n\\nThis is the little app I wrote to control my apartment. Its not going to be much use to anyone by itself, but as it says on the github page:\\n\\nYou could use this as a demo app to help you learn about:\\n\\n<ul>\\n\\t<li>InAppSettingsKit\\n<ul>\\n\\t<li>Configure settings from within an iPhone app.</li>\\n</ul>\\n</li>\\n\\t<li>ASI HTTP library\\n<ul>\\n\\t<li>Sending HTTP GET and POST requests with form data.</li>\\n</ul>\\n</li>\\n\\t<li>Cloning the ‘slide to unlock’ feature from the iPhone lock screen.</li>\\n\\t<li>Using capistrano to deploy an iPhone app straight to your phone over SSH. (for jailbroken phones only)</li>\\n\\t<li>etc.</li>\\n</ul>\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2010/12/photo3.png\\\" alt=\\\"Apartment Automation\\\" />\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><a href=\"https://github.com/ndbroadbent/ios_flat_10c\"><strong>https://github.com/ndbroadbent/ios_flat_10c</strong></a></p>\n<p>This is the little app I wrote to control my apartment. Its not going to be much use to anyone by itself, but as it says on the github page:</p>\n<p>You could use this as a demo app to help you learn about:</p>\n<ul>\n\t<li>InAppSettingsKit\n<ul>\n\t<li>Configure settings from within an iPhone app.</li>\n</ul>\n</li>\n\t<li>ASI HTTP library\n<ul>\n\t<li>Sending HTTP GET and POST requests with form data.</li>\n</ul>\n</li>\n\t<li>Cloning the ‘slide to unlock’ feature from the iPhone lock screen.</li>\n\t<li>Using capistrano to deploy an iPhone app straight to your phone over SSH. (for jailbroken phones only)</li>\n\t<li>etc.</li>\n</ul>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2010/12/photo3.png\" alt=\"Apartment Automation\">\n",
            "comment_id": "34",
            "plaintext": "https://github.com/ndbroadbent/ios_flat_10c\n\n\nThis is the little app I wrote to control my apartment. Its not going to be much use to anyone by itself, but as it says on the github page:\n\n\nYou could use this as a demo app to help you learn about:\n\n\n * InAppSettingsKit\n   \n   * Configure settings from within an iPhone app.\n   \n * ASI HTTP library\n   \n   * Sending HTTP GET and POST requests with form data.\n   \n * Cloning the ‘slide to unlock’ feature from the iPhone lock screen.\n * Using capistrano to deploy an iPhone app straight to your phone over SSH. (for jailbroken phones only)\n * etc.\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-12-28T00:00:00.000Z",
            "updated_at": "2024-04-19T02:04:39.000Z",
            "published_at": "2010-12-28T18:21:50.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8a4",
            "uuid": "7f562b5a-1a81-4277-8513-9ca5be15dd05",
            "title": "Wikipedia is great, help keep it free!",
            "slug": "wikipedia-is-great",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Support Wikipedia!\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h2\"},{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\n<a href=\\\"https://wikimediafoundation.org/wiki/Support_Wikipedia/en\\\"><img border=\\\"0\\\" alt=\\\"Support Wikipedia\\\" src=\\\"https://upload.wikimedia.org/wikipedia/commons/4/41/Fundraising_2009-horizontal-thanks-en.png\\\" /></a><!--more-->\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<h2 id=\"support-wikipedia\">Support Wikipedia!</h2><p><a href=\"https://wikimediafoundation.org/wiki/Support_Wikipedia/en\"><img border=\"0\" alt=\"Support Wikipedia\" src=\"https://upload.wikimedia.org/wikipedia/commons/4/41/Fundraising_2009-horizontal-thanks-en.png\"></a><!--more--></p>\n",
            "comment_id": "35",
            "plaintext": "Support Wikipedia!\n\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2010-12-31T00:00:00.000Z",
            "updated_at": "2024-04-19T02:03:49.000Z",
            "published_at": "2010-12-31T07:02:38.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8a5",
            "uuid": "8934507c-3ca4-4a3b-921b-b3d1fc0cc012",
            "title": "Add .bashrc to iPhone for SSH or MobileTerminal",
            "slug": "add-bashrc-to-iphone",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"When you SSH into your iPhone, or if you use MobileTerminal, you might want to use some of the aliases or functions that you're used to.\\n\\nTo do this:\\n\\n<ol>\\n\\t<li>Create and edit your \\\".bashrc\\\" file at \\\"/var/root/.bashrc\\\"</li>\\n\\t<li>Add the following line to \\\"/etc/profile\\\":</li>\\n</ol>\\n\\n```bash\\nsource /var/root/.bashrc\\n```\\n\\nAn example alias would be: alias respring=\\\"killall SpringBoard\\\"\\n\\nColored prompts look great in MobileTerminal too.\\n\\n<a href=\\\"https://github.com/ndbroadbent/ubuntu_config/blob/master/assets/iphone_bashrc.sh\\\">This is the bashrc that I use on my iPhone.</a>\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>When you SSH into your iPhone, or if you use MobileTerminal, you might want to use some of the aliases or functions that you're used to.</p>\n<p>To do this:</p>\n<ol>\n\t<li>Create and edit your \".bashrc\" file at \"/var/root/.bashrc\"</li>\n\t<li>Add the following line to \"/etc/profile\":</li>\n</ol>\n<pre><code class=\"language-bash\">source /var/root/.bashrc\n</code></pre>\n<p>An example alias would be: alias respring=\"killall SpringBoard\"</p>\n<p>Colored prompts look great in MobileTerminal too.</p>\n<p><a href=\"https://github.com/ndbroadbent/ubuntu_config/blob/master/assets/iphone_bashrc.sh\">This is the bashrc that I use on my iPhone.</a></p>\n",
            "comment_id": "36",
            "plaintext": "When you SSH into your iPhone, or if you use MobileTerminal, you might want to use some of the aliases or functions that you're used to.\n\n\nTo do this:\n\n\n 1. Create and edit your \".bashrc\" file at \"/var/root/.bashrc\"\n 2. Add the following line to \"/etc/profile\":\n\n\nsource /var/root/.bashrc\n\n\n\nAn example alias would be: alias respring=\"killall SpringBoard\"\n\n\nColored prompts look great in MobileTerminal too.\n\n\nThis is the bashrc that I use on my iPhone.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-01-07T00:00:00.000Z",
            "updated_at": "2024-04-19T02:03:15.000Z",
            "published_at": "2011-01-07T07:23:48.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8a6",
            "uuid": "c60e6373-1371-4353-a010-4a74243e0679",
            "title": "Build a ruby gem and host it on rubygems.org in 4 easy steps",
            "slug": "how-to-build-a-ruby-gem-and-host-it-on-rubygems-org-in-4-easy-steps",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Building a ruby gem these days is really, really easy. Bundler provides a great framework generator to get you started. Bundler also lets you install a gem straight from a github repository, so now is the time to say goodbye to your git submodules and start packaging your code into gems.\\n\\n<ol>\\n\\t<li><a href=\\\"https://rubygems.org/users/new\\\">Sign up for a rubygems.org account</a></li>\\n\\t<li>`bundle gem shiny_new_gem`\\n(This creates the framework for your gem)</li>\\n\\t<li>Edit `shiny_new_gem.gemspec`, and add your code in your gem's lib folder.\\n(When the gem is required, whatever is in `lib/shiny_new_gem.rb` will be executed.)</li>\\n\\t<li>\\n\\n```\\n# Build the gem\\nrake build\\n# Push the gem up to rubygems.org\\n# (you will be asked for your email and password)\\ngem push pkg/shiny_new_gem-0.0.1.gem\\n```\\n\\n</li>\\n</ol>\\n\\nDone! Now any rails developer can add `gem \\\"shiny_new_gem\\\"` to their Gemfile, and use your creation. Pretty soon you'll be famous! You'll be hired by important people! You'll buy a boat!\\n\\nGo build your gems!\"}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Building a ruby gem these days is really, really easy. Bundler provides a great framework generator to get you started. Bundler also lets you install a gem straight from a github repository, so now is the time to say goodbye to your git submodules and start packaging your code into gems.</p>\n<ol>\n\t<li><a href=\"https://rubygems.org/users/new\">Sign up for a rubygems.org account</a></li>\n\t<li>`bundle gem shiny_new_gem`\n(This creates the framework for your gem)</li>\n\t<li>Edit `shiny_new_gem.gemspec`, and add your code in your gem's lib folder.\n(When the gem is required, whatever is in `lib/shiny_new_gem.rb` will be executed.)</li>\n\t<li>\n<pre><code># Build the gem\nrake build\n# Push the gem up to rubygems.org\n# (you will be asked for your email and password)\ngem push pkg/shiny_new_gem-0.0.1.gem\n</code></pre>\n</li>\n</ol>\n<p>Done! Now any rails developer can add <code>gem \"shiny_new_gem\"</code> to their Gemfile, and use your creation. Pretty soon you'll be famous! You'll be hired by important people! You'll buy a boat!</p>\n<p>Go build your gems!</p>\n",
            "comment_id": "37",
            "plaintext": "Building a ruby gem these days is really, really easy. Bundler provides a great framework generator to get you started. Bundler also lets you install a gem straight from a github repository, so now is the time to say goodbye to your git submodules and start packaging your code into gems.\n\n\n 1. Sign up for a rubygems.org account\n 2. `bundle gem shiny_new_gem`\n    (This creates the framework for your gem)\n 3. Edit `shiny_new_gem.gemspec`, and add your code in your gem's lib folder.\n    (When the gem is required, whatever is in `lib/shiny_new_gem.rb` will be executed.)\n 4. \n    \n    \n    # Build the gem\n    rake build\n    # Push the gem up to rubygems.org\n    # (you will be asked for your email and password)\n    gem push pkg/shiny_new_gem-0.0.1.gem\n    \n    \n\n\nDone! Now any rails developer can add gem \"shiny_new_gem\" to their Gemfile, and use your creation. Pretty soon you'll be famous! You'll be hired by important people! You'll buy a boat!\n\n\nGo build your gems!\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-01-22T00:00:00.000Z",
            "updated_at": "2024-04-19T02:02:56.000Z",
            "published_at": "2011-01-22T06:39:39.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8a7",
            "uuid": "a55316e4-30f2-4168-8d25-eebcb370f52e",
            "title": "Daily Calvin & Hobbes RSS feed (with embedded images)",
            "slug": "daily-calvin-hobbes-rss-feed-with-embedded-images",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\n<a href=\\\"https://pipes.yahoo.com/pipes/\\\">Yahoo Pipes</a> is fantastic. I wasn't a big fan of yahoo in the past, but their pipes service is amazing. Its great for sprucing up a not-so-well implemented RSS feed, and lets you create feeds from virtually anything on the web.\\n\\nHere's a <a title=\\\"Calvin and Hobbes RSS\\\" href=\\\"https://pipes.yahoo.com/pipes/pipe.run?_id=4ea8ada9a8b0f29e54ce1056f46f9202&amp;_render=rss\\\" target=\\\"_blank\\\">daily Calvin and Hobbes RSS feed</a> that parses the comic image from the linked page, and drops it in the feed itself. Perfect for Google Reader.\\n\\n<img title=\\\"calvin &amp; hobbes\\\" src=\\\"__GHOST_URL__/content/images/posts/2011/01/calvinhobbes-resized-post.gif\\\" />\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p><a href=\"https://pipes.yahoo.com/pipes/\">Yahoo Pipes</a> is fantastic. I wasn't a big fan of yahoo in the past, but their pipes service is amazing. Its great for sprucing up a not-so-well implemented RSS feed, and lets you create feeds from virtually anything on the web.</p>\n<p>Here's a <a title=\"Calvin and Hobbes RSS\" href=\"https://pipes.yahoo.com/pipes/pipe.run?_id=4ea8ada9a8b0f29e54ce1056f46f9202&amp;_render=rss\" target=\"_blank\">daily Calvin and Hobbes RSS feed</a> that parses the comic image from the linked page, and drops it in the feed itself. Perfect for Google Reader.</p>\n<img title=\"calvin &amp; hobbes\" src=\"__GHOST_URL__/content/images/posts/2011/01/calvinhobbes-resized-post.gif\" />\n<!--kg-card-end: markdown-->",
            "comment_id": "38",
            "plaintext": "Yahoo Pipes is fantastic. I wasn't a big fan of yahoo in the past, but their pipes service is amazing. Its great for sprucing up a not-so-well implemented RSS feed, and lets you create feeds from virtually anything on the web.\n\n\nHere's a daily Calvin and Hobbes RSS feed that parses the comic image from the linked page, and drops it in the feed itself. Perfect for Google Reader.\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-01-29T00:00:00.000Z",
            "updated_at": "2011-01-29T00:00:00.000Z",
            "published_at": "2011-01-29T08:26:41.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8a8",
            "uuid": "a0345266-0dc1-49d9-a16f-7831d664d2cd",
            "title": "New Cydia Themes (Sounds)",
            "slug": "new-cydia-themes-sounds",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"### Custom sounds for iPhone mail tone and keypad\\n\\nI've released a few small packages to the modmyi cydia repo.\\nYou can find them by searching for them by name:\\n\\n<strong>Message For Me – IT Crowd Mail Tone</strong>\\nReplaces the 'new email' sound with a clip of Moss saying \\\"Message for me!\\\"\\n\\n<strong>Piano DTMF Tones</strong>\\nReplaces the keypad sounds in the 'phone' app with piano notes.\\n\\n<strong>Plants Vs Zombies - Coin SMS Tone</strong>\\nPlants Vs Zombies Coin SMS Tone\\n\\n<strong>Crash Bandicoot Sounds</strong>\\nReplaces iPhone sounds with sounds from the game \\\"Crash Bandicoot\\\" on Playstation 1\\n\\n<ul>\\n  <li>SMS Tone - 'Ka-ching'</li>\\n  <li>New Mail Tone - 'Ooogabooga'</li>\\n  <li>Sent mail - 'Spinning noise'</li>\\n  <li>Plug in to power source - 'Wumpa fruit'</li>\\n  <li>Error/low power - 'TNT'</li>\\n</ul>\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<h3 id=\"custom-sounds-for-iphone-mail-tone-and-keypad\">Custom sounds for iPhone mail tone and keypad</h3>\n<p>I've released a few small packages to the modmyi cydia repo.<br>\nYou can find them by searching for them by name:</p>\n<p><strong>Message For Me – IT Crowd Mail Tone</strong><br>\nReplaces the 'new email' sound with a clip of Moss saying \"Message for me!\"</p>\n<p><strong>Piano DTMF Tones</strong><br>\nReplaces the keypad sounds in the 'phone' app with piano notes.</p>\n<p><strong>Plants Vs Zombies - Coin SMS Tone</strong><br>\nPlants Vs Zombies Coin SMS Tone</p>\n<p><strong>Crash Bandicoot Sounds</strong><br>\nReplaces iPhone sounds with sounds from the game \"Crash Bandicoot\" on Playstation 1</p>\n<ul>\n  <li>SMS Tone - 'Ka-ching'</li>\n  <li>New Mail Tone - 'Ooogabooga'</li>\n  <li>Sent mail - 'Spinning noise'</li>\n  <li>Plug in to power source - 'Wumpa fruit'</li>\n  <li>Error/low power - 'TNT'</li>\n</ul>\n",
            "comment_id": "39",
            "plaintext": "Custom sounds for iPhone mail tone and keypad\n\n\nI've released a few small packages to the modmyi cydia repo.\n\nYou can find them by searching for them by name:\n\n\nMessage For Me – IT Crowd Mail Tone\n\nReplaces the 'new email' sound with a clip of Moss saying \"Message for me!\"\n\n\nPiano DTMF Tones\n\nReplaces the keypad sounds in the 'phone' app with piano notes.\n\n\nPlants Vs Zombies - Coin SMS Tone\n\nPlants Vs Zombies Coin SMS Tone\n\n\nCrash Bandicoot Sounds\n\nReplaces iPhone sounds with sounds from the game \"Crash Bandicoot\" on Playstation 1\n\n\n * SMS Tone - 'Ka-ching'\n * New Mail Tone - 'Ooogabooga'\n * Sent mail - 'Spinning noise'\n * Plug in to power source - 'Wumpa fruit'\n * Error/low power - 'TNT'\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-02-10T00:00:00.000Z",
            "updated_at": "2024-04-19T01:57:43.000Z",
            "published_at": "2011-02-10T01:28:28.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8a9",
            "uuid": "21d5d58e-ec58-4610-ab8f-d5a13b671cdd",
            "title": "Rails 3 caching views in development mode",
            "slug": "rails3-is-caching-views-in-development-mode-but-i-told-it-not-to",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"We are working with a Rails 3 port of Fat Free CRM. We have so many plugins modifying classes that we have to set `config.cache_classes` to `true`.\\nBut all our view templates seemed to stay cached as well, and I had to restart the server each time I made a change to a template. I couldn't really explain why this was happening, and after a lot of searching I came across <a href=\\\"https://rails.lighthouseapp.com/projects/8994/tickets/5847-rails-301-configaction_viewcache_template_loading-is-missing\\\">this Rails LightHouse ticket</a>.\\n\\nWe just needed to add this to the end of our `environments/development.rb` file to clear the view template cache after every request:\\n\\n```ruby\\nActiveSupport.on_load(:after_initialize) do\\n  ActionController::Base.before_filter do\\n    ActionController::Base.view_paths.each(&:clear_cache)\\n  end\\nend\\n```\\n\\nThanks to <a href=\\\"https://rails.lighthouseapp.com/users/52307\\\">Eric</a> for this.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>We are working with a Rails 3 port of Fat Free CRM. We have so many plugins modifying classes that we have to set <code>config.cache_classes</code> to <code>true</code>.<br>\nBut all our view templates seemed to stay cached as well, and I had to restart the server each time I made a change to a template. I couldn't really explain why this was happening, and after a lot of searching I came across <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/5847-rails-301-configaction_viewcache_template_loading-is-missing\">this Rails LightHouse ticket</a>.</p>\n<p>We just needed to add this to the end of our <code>environments/development.rb</code> file to clear the view template cache after every request:</p>\n<pre><code class=\"language-ruby\">ActiveSupport.on_load(:after_initialize) do\n  ActionController::Base.before_filter do\n    ActionController::Base.view_paths.each(&amp;:clear_cache)\n  end\nend\n</code></pre>\n<p>Thanks to <a href=\"https://rails.lighthouseapp.com/users/52307\">Eric</a> for this.</p>\n",
            "comment_id": "40",
            "plaintext": "We are working with a Rails 3 port of Fat Free CRM. We have so many plugins modifying classes that we have to set config.cache_classes to true.\n\nBut all our view templates seemed to stay cached as well, and I had to restart the server each time I made a change to a template. I couldn't really explain why this was happening, and after a lot of searching I came across this Rails LightHouse ticket.\n\n\nWe just needed to add this to the end of our environments/development.rb file to clear the view template cache after every request:\n\n\nActiveSupport.on_load(:after_initialize) do\n  ActionController::Base.before_filter do\n    ActionController::Base.view_paths.each(&:clear_cache)\n  end\nend\n\n\n\nThanks to Eric for this.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-02-10T00:00:00.000Z",
            "updated_at": "2024-04-19T01:55:59.000Z",
            "published_at": "2011-02-10T03:40:52.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8aa",
            "uuid": "df53acaf-ec4f-427a-94f7-cf3393e60357",
            "title": "Rails 3 Rake tasks can take too long to load",
            "slug": "rails-3-rake-tasks-are-so-slow",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"When you run a rake task for a Rails 3 project, it has to load the entire environment since gems can include their own rake tasks. I started to get annoyed by this, because every capistrano deployment would load up rails on my environment just to notify hoptoad.\\n\\nIf you have a very simple rake task that is called very often, you might want to add some work-around code to check for it in the very beginning of your Rakefile. You might even want to bypass rake entirely, and put the code in a file in ./scripts.\\n\\nHere is an example for way faster hoptoad notifications (this cut our deploy time in half):\\n\\n```ruby\\n\\n# Speed up hoptoad:deploy by not loading rails environment\\n\\nif ARGV[0] == \\\"hoptoad:deploy\\\"\\nrequire 'active_support/core_ext/string'\\nrequire 'hoptoad_notifier'\\nrequire File.join(File.dirname(**FILE**), 'config', 'initializers', 'hoptoad')\\nrequire 'hoptoad_tasks'\\nHoptoadTasks.deploy(:rails_env => ENV['TO'],\\n:scm_revision => ENV['REVISION'],\\n:scm_repository => ENV['REPO'],\\n:local_username => ENV['USER'],\\n:api_key => ENV['API_KEY'])\\nexit\\nend\\n```\\n\\nThere are other ways to speed up rake, such as <a href=\\\"https://github.com/outoftime/rake_server\\\">Rake Server</a> (which forks a Rails server process each time you invoke a rake task).\\n\\nBut sometimes quick hacks just work best.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>When you run a rake task for a Rails 3 project, it has to load the entire environment since gems can include their own rake tasks. I started to get annoyed by this, because every capistrano deployment would load up rails on my environment just to notify hoptoad.</p>\n<p>If you have a very simple rake task that is called very often, you might want to add some work-around code to check for it in the very beginning of your Rakefile. You might even want to bypass rake entirely, and put the code in a file in ./scripts.</p>\n<p>Here is an example for way faster hoptoad notifications (this cut our deploy time in half):</p>\n<pre><code class=\"language-ruby\">\n# Speed up hoptoad:deploy by not loading rails environment\n\nif ARGV[0] == \"hoptoad:deploy\"\nrequire 'active_support/core_ext/string'\nrequire 'hoptoad_notifier'\nrequire File.join(File.dirname(**FILE**), 'config', 'initializers', 'hoptoad')\nrequire 'hoptoad_tasks'\nHoptoadTasks.deploy(:rails_env =&gt; ENV['TO'],\n:scm_revision =&gt; ENV['REVISION'],\n:scm_repository =&gt; ENV['REPO'],\n:local_username =&gt; ENV['USER'],\n:api_key =&gt; ENV['API_KEY'])\nexit\nend\n</code></pre>\n<p>There are other ways to speed up rake, such as <a href=\"https://github.com/outoftime/rake_server\">Rake Server</a> (which forks a Rails server process each time you invoke a rake task).</p>\n<p>But sometimes quick hacks just work best.</p>\n",
            "comment_id": "41",
            "plaintext": "When you run a rake task for a Rails 3 project, it has to load the entire environment since gems can include their own rake tasks. I started to get annoyed by this, because every capistrano deployment would load up rails on my environment just to notify hoptoad.\n\n\nIf you have a very simple rake task that is called very often, you might want to add some work-around code to check for it in the very beginning of your Rakefile. You might even want to bypass rake entirely, and put the code in a file in ./scripts.\n\n\nHere is an example for way faster hoptoad notifications (this cut our deploy time in half):\n\n\n\n# Speed up hoptoad:deploy by not loading rails environment\n\nif ARGV[0] == \"hoptoad:deploy\"\nrequire 'active_support/core_ext/string'\nrequire 'hoptoad_notifier'\nrequire File.join(File.dirname(**FILE**), 'config', 'initializers', 'hoptoad')\nrequire 'hoptoad_tasks'\nHoptoadTasks.deploy(:rails_env => ENV['TO'],\n:scm_revision => ENV['REVISION'],\n:scm_repository => ENV['REPO'],\n:local_username => ENV['USER'],\n:api_key => ENV['API_KEY'])\nexit\nend\n\n\n\nThere are other ways to speed up rake, such as Rake Server (which forks a Rails server process each time you invoke a rake task).\n\n\nBut sometimes quick hacks just work best.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-02-24T00:00:00.000Z",
            "updated_at": "2024-04-19T01:55:02.000Z",
            "published_at": "2011-02-24T05:02:15.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8ab",
            "uuid": "37cc0eb8-8ac9-4735-aea7-f95377ef8876",
            "title": "Capistrano task - show deployed revisions & diffs",
            "slug": "capistrano-task-show-deployed-revisions-diffs",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Capistrano is a great tool, and I couldn't imagine running a project without it.\\nI always wanted a quick way to know exactly what was running on each of our servers, and needed to know what would would change when I ran 'cap deploy'.\\n\\n\\\"cap deploy:pending\\\" and \\\"cap deploy:pending:diff\\\" already solve this problem a little bit, but I found them to be too verbose. Also, they don't work so well as part of an automated deploy process since they can require user interaction.\\n\\nIf you run this 'cap revisions' task, it will show the currently deployed revision on the server, and give you a diff of the commits between the server and the master branch of your git repo. When its chained after the 'deploy' task, it will show a list of the new commits that have been pushed to the server.\\n\\nHere it is:\\n\\n```ruby\\ndesc \\\"Show currently deployed revision on server.\\\"\\ntask :revisions, :roles => :app do\\ncurrent, previous, latest = current_revision[0,7], previous_revision[0,7], real_revision[0,7]\\nputs \\\"\\\\n\\\" << \\\"-\\\"\\\\*63\\nputs \\\"===== Master Revision: \\\\033[1;33m#{latest}\\\\033[0m\\\\n\\\\n\\\"\\nputs \\\"===== [ \\\\033[1;36m#{application.capitalize} - #{stage.capitalize}\\\\033[0m ]\\\"\\nputs \\\"=== Deployed Revision: \\\\033[1;32m#{current}\\\\033[0m\\\"\\nputs \\\"=== Previous Revision: \\\\033[1;32m#{previous}\\\\033[0m\\\\n\\\\n\\\"\\n\\n# If deployed and master are the same, show the difference between the last 2 deployments.\\n\\nbase_label, new_label, base_rev, new_rev = latest != current ? \\\\\\n [\\\"deployed\\\", \\\"master\\\", current, latest] : \\\\\\n [\\\"previous\\\", \\\"deployed\\\", previous, current]\\n\\n# Show difference between master and deployed revisions.\\n\\nif (diff = `git log #{base_rev}..#{new_rev} --oneline`) != \\\"\\\" # Colorize refs\\ndiff.gsub!(/^([a-f0-9]+) /, \\\"\\\\033[1;32m\\\\\\\\1\\\\033[0m - \\\")\\ndiff = \\\" \\\" << diff.gsub(\\\"\\\\n\\\", \\\"\\\\n \\\") << \\\"\\\\n\\\" # Indent commit messages nicely, max 80 chars per line, line has to end with space.\\ndiff = diff.split(\\\"\\\\n\\\").map{|l|l.scan(/.{1,120}/).join(\\\"\\\\n\\\"<<\\\" \\\"_14).gsub(/([^ ]_)\\\\n {14}/m,\\\"\\\\n\\\"<<\\\" \\\"\\\\*14<<\\\"\\\\\\\\1\\\")}.join(\\\"\\\\n\\\")\\nputs \\\"=== Difference between #{base_label} revision and #{new_label} revision:\\\\n\\\\n\\\"\\nputs diff\\nend\\nend\\n\\nafter \\\"deploy\\\", \\\"revisions\\\"\\n```\\n\\nI spent a while getting the output nicely colorized and indented. Everything is tested with ruby 1.9.2, but let me know if you have problems with 1.8.7.\\n\\nAlso, be careful <strong>not</strong> to chain this task <strong>before</strong> 'deploy', because the 'current_revision' method caches the path and messes up bundler. (lesson learnt the hard way..)\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Capistrano is a great tool, and I couldn't imagine running a project without it.<br>\nI always wanted a quick way to know exactly what was running on each of our servers, and needed to know what would would change when I ran 'cap deploy'.</p>\n<p>\"cap deploy:pending\" and \"cap deploy:pending:diff\" already solve this problem a little bit, but I found them to be too verbose. Also, they don't work so well as part of an automated deploy process since they can require user interaction.</p>\n<p>If you run this 'cap revisions' task, it will show the currently deployed revision on the server, and give you a diff of the commits between the server and the master branch of your git repo. When its chained after the 'deploy' task, it will show a list of the new commits that have been pushed to the server.</p>\n<p>Here it is:</p>\n<pre><code class=\"language-ruby\">desc \"Show currently deployed revision on server.\"\ntask :revisions, :roles =&gt; :app do\ncurrent, previous, latest = current_revision[0,7], previous_revision[0,7], real_revision[0,7]\nputs \"\\n\" &lt;&lt; \"-\"\\*63\nputs \"===== Master Revision: \\033[1;33m#{latest}\\033[0m\\n\\n\"\nputs \"===== [ \\033[1;36m#{application.capitalize} - #{stage.capitalize}\\033[0m ]\"\nputs \"=== Deployed Revision: \\033[1;32m#{current}\\033[0m\"\nputs \"=== Previous Revision: \\033[1;32m#{previous}\\033[0m\\n\\n\"\n\n# If deployed and master are the same, show the difference between the last 2 deployments.\n\nbase_label, new_label, base_rev, new_rev = latest != current ? \\\n [\"deployed\", \"master\", current, latest] : \\\n [\"previous\", \"deployed\", previous, current]\n\n# Show difference between master and deployed revisions.\n\nif (diff = `git log #{base_rev}..#{new_rev} --oneline`) != \"\" # Colorize refs\ndiff.gsub!(/^([a-f0-9]+) /, \"\\033[1;32m\\\\1\\033[0m - \")\ndiff = \" \" &lt;&lt; diff.gsub(\"\\n\", \"\\n \") &lt;&lt; \"\\n\" # Indent commit messages nicely, max 80 chars per line, line has to end with space.\ndiff = diff.split(\"\\n\").map{|l|l.scan(/.{1,120}/).join(\"\\n\"&lt;&lt;\" \"_14).gsub(/([^ ]_)\\n {14}/m,\"\\n\"&lt;&lt;\" \"\\*14&lt;&lt;\"\\\\1\")}.join(\"\\n\")\nputs \"=== Difference between #{base_label} revision and #{new_label} revision:\\n\\n\"\nputs diff\nend\nend\n\nafter \"deploy\", \"revisions\"\n</code></pre>\n<p>I spent a while getting the output nicely colorized and indented. Everything is tested with ruby 1.9.2, but let me know if you have problems with 1.8.7.</p>\n<p>Also, be careful <strong>not</strong> to chain this task <strong>before</strong> 'deploy', because the 'current_revision' method caches the path and messes up bundler. (lesson learnt the hard way..)</p>\n",
            "comment_id": "42",
            "plaintext": "Capistrano is a great tool, and I couldn't imagine running a project without it.\n\nI always wanted a quick way to know exactly what was running on each of our servers, and needed to know what would would change when I ran 'cap deploy'.\n\n\n\"cap deploy:pending\" and \"cap deploy:pending:diff\" already solve this problem a little bit, but I found them to be too verbose. Also, they don't work so well as part of an automated deploy process since they can require user interaction.\n\n\nIf you run this 'cap revisions' task, it will show the currently deployed revision on the server, and give you a diff of the commits between the server and the master branch of your git repo. When its chained after the 'deploy' task, it will show a list of the new commits that have been pushed to the server.\n\n\nHere it is:\n\n\ndesc \"Show currently deployed revision on server.\"\ntask :revisions, :roles => :app do\ncurrent, previous, latest = current_revision[0,7], previous_revision[0,7], real_revision[0,7]\nputs \"\\n\" << \"-\"\\*63\nputs \"===== Master Revision: \\033[1;33m#{latest}\\033[0m\\n\\n\"\nputs \"===== [ \\033[1;36m#{application.capitalize} - #{stage.capitalize}\\033[0m ]\"\nputs \"=== Deployed Revision: \\033[1;32m#{current}\\033[0m\"\nputs \"=== Previous Revision: \\033[1;32m#{previous}\\033[0m\\n\\n\"\n\n# If deployed and master are the same, show the difference between the last 2 deployments.\n\nbase_label, new_label, base_rev, new_rev = latest != current ? \\\n [\"deployed\", \"master\", current, latest] : \\\n [\"previous\", \"deployed\", previous, current]\n\n# Show difference between master and deployed revisions.\n\nif (diff = `git log #{base_rev}..#{new_rev} --oneline`) != \"\" # Colorize refs\ndiff.gsub!(/^([a-f0-9]+) /, \"\\033[1;32m\\\\1\\033[0m - \")\ndiff = \" \" << diff.gsub(\"\\n\", \"\\n \") << \"\\n\" # Indent commit messages nicely, max 80 chars per line, line has to end with space.\ndiff = diff.split(\"\\n\").map{|l|l.scan(/.{1,120}/).join(\"\\n\"<<\" \"_14).gsub(/([^ ]_)\\n {14}/m,\"\\n\"<<\" \"\\*14<<\"\\\\1\")}.join(\"\\n\")\nputs \"=== Difference between #{base_label} revision and #{new_label} revision:\\n\\n\"\nputs diff\nend\nend\n\nafter \"deploy\", \"revisions\"\n\n\n\nI spent a while getting the output nicely colorized and indented. Everything is tested with ruby 1.9.2, but let me know if you have problems with 1.8.7.\n\n\nAlso, be careful not to chain this task before 'deploy', because the 'current_revision' method caches the path and messes up bundler. (lesson learnt the hard way..)\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-03-02T00:00:00.000Z",
            "updated_at": "2024-04-19T01:54:40.000Z",
            "published_at": "2011-03-02T05:43:35.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8ac",
            "uuid": "64e2116f-425a-46c1-a181-c0508ff67b32",
            "title": "Weather Notifier",
            "slug": "weather-notifier",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"<p>This is just a little idea I had on the bus.</p>\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2011/03/IMG_0465.jpg\\\" />\\n\\n<p>Outside my apartment, I have a bucket for umbrellas.</p>\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2011/03/IMG_0469.jpg\\\" />\\n\\n<p>A program checks the local weather on <a href=\\\"https://www.weather.com\\\">weather.com</a>\\nfrom time to time. If there's any chance of rain, it switches on the lights installed in the bucket.</p>\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2011/03/IMG_0468.jpg\\\" />\\n\\n<p>So when I walk out the door, I know whether or not I should take an umbrella to work.</p>\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>This is just a little idea I had on the bus.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2011/03/IMG_0465.jpg\">\n<p>Outside my apartment, I have a bucket for umbrellas.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2011/03/IMG_0469.jpg\">\n<p>A program checks the local weather on <a href=\"https://www.weather.com\">weather.com</a>\nfrom time to time. If there's any chance of rain, it switches on the lights installed in the bucket.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2011/03/IMG_0468.jpg\">\n<p>So when I walk out the door, I know whether or not I should take an umbrella to work.</p>\n",
            "comment_id": "43",
            "plaintext": "This is just a little idea I had on the bus.\n\n\n\nOutside my apartment, I have a bucket for umbrellas.\n\n\n\nA program checks the local weather on weather.com\nfrom time to time. If there's any chance of rain, it switches on the lights installed in the bucket.\n\n\n\nSo when I walk out the door, I know whether or not I should take an umbrella to work.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-03-19T00:00:00.000Z",
            "updated_at": "2024-04-19T01:54:17.000Z",
            "published_at": "2011-03-19T15:37:32.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8ad",
            "uuid": "953a7ba2-03c7-4b01-8313-257f00eff2ba",
            "title": "How to calculate Easter Sunday",
            "slug": "how-to-calculate-easter-sunday",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"I wanted the LCD screen on my apartment door to display a message on certain days,\\nsuch as birthdays, Christmas, and Easter.\\nI didn't realize how hard it was to calculate which day Easter Sunday is...\\n\\n```ruby\\ndef easter(year)\\n  c=year/100\\n  n=year-19*(year/19)\\n  k=(c-17)/25\\n  i=c-c/4-(c-k)/3+19*n+15\\n  i-=30*(i/30)\\n  i-=(i/28)*(1 -(i/28)_(29/(i+1))_((21-n)/11))\\n  j=year+year/4+i+2-c+c/4\\n  j-=7*(j/7)\\n  l=i-j\\n  month=3+(l+40)/44\\n  day=l+28-31*(month/4)\\n  [day, month]\\nend\\n```\\n\\nThis happens to be the first Sunday after the Paschal full moon following the northern hemisphere's vernal equinox.\\n\\nChristmas, for comparison:\\n\\n```ruby\\ndef christmas(year)\\n  [25, 12]\\nend\\n```\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I wanted the LCD screen on my apartment door to display a message on certain days,<br>\nsuch as birthdays, Christmas, and Easter.<br>\nI didn't realize how hard it was to calculate which day Easter Sunday is...</p>\n<pre><code class=\"language-ruby\">def easter(year)\n  c=year/100\n  n=year-19*(year/19)\n  k=(c-17)/25\n  i=c-c/4-(c-k)/3+19*n+15\n  i-=30*(i/30)\n  i-=(i/28)*(1 -(i/28)_(29/(i+1))_((21-n)/11))\n  j=year+year/4+i+2-c+c/4\n  j-=7*(j/7)\n  l=i-j\n  month=3+(l+40)/44\n  day=l+28-31*(month/4)\n  [day, month]\nend\n</code></pre>\n<p>This happens to be the first Sunday after the Paschal full moon following the northern hemisphere's vernal equinox.</p>\n<p>Christmas, for comparison:</p>\n<pre><code class=\"language-ruby\">def christmas(year)\n  [25, 12]\nend\n</code></pre>\n",
            "comment_id": "44",
            "plaintext": "I wanted the LCD screen on my apartment door to display a message on certain days,\n\nsuch as birthdays, Christmas, and Easter.\n\nI didn't realize how hard it was to calculate which day Easter Sunday is...\n\n\ndef easter(year)\n  c=year/100\n  n=year-19*(year/19)\n  k=(c-17)/25\n  i=c-c/4-(c-k)/3+19*n+15\n  i-=30*(i/30)\n  i-=(i/28)*(1 -(i/28)_(29/(i+1))_((21-n)/11))\n  j=year+year/4+i+2-c+c/4\n  j-=7*(j/7)\n  l=i-j\n  month=3+(l+40)/44\n  day=l+28-31*(month/4)\n  [day, month]\nend\n\n\n\nThis happens to be the first Sunday after the Paschal full moon following the northern hemisphere's vernal equinox.\n\n\nChristmas, for comparison:\n\n\ndef christmas(year)\n  [25, 12]\nend\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-03-31T00:00:00.000Z",
            "updated_at": "2024-04-19T01:51:48.000Z",
            "published_at": "2011-03-31T17:41:27.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8ae",
            "uuid": "b0497871-d713-41c2-bdf4-337e889a629c",
            "title": "Avatar Harmony - Sync your profile pics",
            "slug": "avatar-harmony-sync-your-profile-pics",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"I've written a tiny web application called '<a href=\\\"https://avatarharmony.com\\\">Avatar Harmony</a>'.\\n\\nYou can sign in with twitter or facebook, add your Gravatar login details, and the app will automatically sync your profile pics across each of your accounts.\\n\\nIt can sync avatars in the following directions:\\n\\n<ul>\\n\\t<li>Facebook =&gt; Twitter</li>\\n\\t<li>Facebook =&gt; Gravatar</li>\\n\\t<li>Twitter =&gt; Gravatar</li>\\n\\t<li>Gravatar =&gt; Twitter</li>\\n</ul>\\n\\n<p>Unfortunately, the Facebook Graph API doesn't let us update profile pics at the moment, but I'll keep looking around for a solution.</p>\\n\\n<p>Try it out at <a href=\\\"https://avatarharmony.com\\\">https://avatarharmony.com</a>!</p>\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I've written a tiny web application called '<a href=\"https://avatarharmony.com\">Avatar Harmony</a>'.</p>\n<p>You can sign in with twitter or facebook, add your Gravatar login details, and the app will automatically sync your profile pics across each of your accounts.</p>\n<p>It can sync avatars in the following directions:</p>\n<ul>\n\t<li>Facebook =&gt; Twitter</li>\n\t<li>Facebook =&gt; Gravatar</li>\n\t<li>Twitter =&gt; Gravatar</li>\n\t<li>Gravatar =&gt; Twitter</li>\n</ul>\n<p>Unfortunately, the Facebook Graph API doesn't let us update profile pics at the moment, but I'll keep looking around for a solution.</p>\n<p>Try it out at <a href=\"https://avatarharmony.com\">https://avatarharmony.com</a>!</p>\n",
            "comment_id": "45",
            "plaintext": "I've written a tiny web application called 'Avatar Harmony'.\n\n\nYou can sign in with twitter or facebook, add your Gravatar login details, and the app will automatically sync your profile pics across each of your accounts.\n\n\nIt can sync avatars in the following directions:\n\n\n * Facebook => Twitter\n * Facebook => Gravatar\n * Twitter => Gravatar\n * Gravatar => Twitter\n\n\nUnfortunately, the Facebook Graph API doesn't let us update profile pics at the moment, but I'll keep looking around for a solution.\n\n\nTry it out at https://avatarharmony.com!\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-04-25T00:00:00.000Z",
            "updated_at": "2024-04-19T01:50:52.000Z",
            "published_at": "2011-04-25T17:32:50.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8af",
            "uuid": "fc4ef370-c39a-4d02-82ea-a6a9f36b56b5",
            "title": "Really handy RVM hook to symlink current gem directory",
            "slug": "really-handy-rvm-hook-to-symlink-current-gem-directory",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"I use gedit to write code. I keep a filebrowser tab open at the left side of my screen,\\nand sometimes I need to look at gem's source code.\\nRVM is awesome, and it keeps my 1.8.7 gems, 1.9.2 gems and all my gemsets separated,\\nbut this makes it tricky to find the gem you need to look at.\\n\\nEnter RVM hooks! If you want a symlink to the current gem directory to be updated each time you switch ruby versions,\\nsave something like the following code to <code>~/.rvm/hooks/after_use</code>\\n\\n```bash\\nln -nfs $rvm_ruby_gem_home/gems ~/src/gems/current_bundle\\n```\\n\\nNow you have access to the source code of gems from the file browser in your editor.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I use gedit to write code. I keep a filebrowser tab open at the left side of my screen,<br>\nand sometimes I need to look at gem's source code.<br>\nRVM is awesome, and it keeps my 1.8.7 gems, 1.9.2 gems and all my gemsets separated,<br>\nbut this makes it tricky to find the gem you need to look at.</p>\n<p>Enter RVM hooks! If you want a symlink to the current gem directory to be updated each time you switch ruby versions,<br>\nsave something like the following code to <code>~/.rvm/hooks/after_use</code></p>\n<pre><code class=\"language-bash\">ln -nfs $rvm_ruby_gem_home/gems ~/src/gems/current_bundle\n</code></pre>\n<p>Now you have access to the source code of gems from the file browser in your editor.</p>\n",
            "comment_id": "46",
            "plaintext": "I use gedit to write code. I keep a filebrowser tab open at the left side of my screen,\n\nand sometimes I need to look at gem's source code.\n\nRVM is awesome, and it keeps my 1.8.7 gems, 1.9.2 gems and all my gemsets separated,\n\nbut this makes it tricky to find the gem you need to look at.\n\n\nEnter RVM hooks! If you want a symlink to the current gem directory to be updated each time you switch ruby versions,\n\nsave something like the following code to ~/.rvm/hooks/after_use\n\n\nln -nfs $rvm_ruby_gem_home/gems ~/src/gems/current_bundle\n\n\n\nNow you have access to the source code of gems from the file browser in your editor.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-04-28T00:00:00.000Z",
            "updated_at": "2024-04-19T01:46:44.000Z",
            "published_at": "2011-04-28T05:23:44.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8b0",
            "uuid": "bea0d4ea-e7a3-4108-b0c5-16ee931d416b",
            "title": "Repurposed pressure gauge - Bathroom door indicator",
            "slug": "repurposed-pressure-gauge-as-bathroom-indicator",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nI turned an old brass pressure gauge into a vacant/engaged indicator for our bathroom. The needle is a hacked ammeter, and the metal slide lock on the other side of the door switches it on.\\n\\n<img class=\\\"lightbox\\\" src=\\\"__GHOST_URL__/content/images/posts/2011/05/gaugephoto.jpg\\\" alt=\\\"Gauge Photos\\\" />\\n\\n(<a href=\\\"https://hackaday.com/2010/11/24/building-a-bandwidth-meter/\\\">Inspired by this analog bandwidth meter</a>.)\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>I turned an old brass pressure gauge into a vacant/engaged indicator for our bathroom. The needle is a hacked ammeter, and the metal slide lock on the other side of the door switches it on.</p>\n<img class=\"lightbox\" src=\"__GHOST_URL__/content/images/posts/2011/05/gaugephoto.jpg\" alt=\"Gauge Photos\" />\n<p>(<a href=\"https://hackaday.com/2010/11/24/building-a-bandwidth-meter/\">Inspired by this analog bandwidth meter</a>.)</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "47",
            "plaintext": "I turned an old brass pressure gauge into a vacant/engaged indicator for our bathroom. The needle is a hacked ammeter, and the metal slide lock on the other side of the door switches it on.\n\n\n\n(Inspired by this analog bandwidth meter.)\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-04-30T00:00:00.000Z",
            "updated_at": "2011-04-30T00:00:00.000Z",
            "published_at": "2011-04-30T15:44:26.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8b1",
            "uuid": "53455395-c21c-432e-ab53-fa0c806bb612",
            "title": "Automatically change iPhone wallpaper every 30 minutes",
            "slug": "automatically-change-iphone-wallpaper-every-30-minutes",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"<b>NOTE: This is only for jailbroken iPhones.</b>\\n\\nI love finding awesome wallpapers on <a href=\\\"https://www.reddit.com\\\">reddit</a>. My Ubuntu desktop cycles through my wallpaper collection with a program called <a href=\\\"https://help.ubuntu.com/community/Cortina\\\">Cortina</a>, and I wanted my iPhone to do the same.\\n\\nSo I wrote a very simple script and a launchd plist that runs the script every 30 minutes. If you want to set this up for your jailbroken iPhone, all you need is SSH and a collection of images.\\n\\nSave your wallpapers to `/var/mobile/Media/Wallpapers` (or wherever you like), then ssh the following script to your iPhone and run it. (It will need to be executable: `chmod +x`).\\n\\n```bash\\n#!/bin/bash\\n\\n# This script sets up your iPhone to change the lock-screen wallpaper every 30 minutes.\\n\\nwallpaper_dir=\\\"/var/mobile/Media/Wallpapers\\\"\\n\\n# Install the wallpaper changing script\\n\\ncat > /usr/bin/ChangeWallpaper <<EOF\\n#!/bin/bash\\n\\n# Overwrite the LockBackground image with a random image from the wallpaper directory.\\n\\nfiles=($wallpaper_dir/\\\\*)\\ncp -f \\\\${files[RANDOM % \\\\${#files[@]}]} /private/var/mobile/Library/SpringBoard/LockBackground.jpg\\nEOF\\nchmod +x /usr/bin/ChangeWallpaper\\n\\n# Install the launchd task to run the script every 30 minutes\\n\\ncat > /Library/LaunchDaemons/com.ndb.changewallpaper.plist <<EOF\\n\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"https://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n<plist version=\\\"1.0\\\">\\n<dict>\\n<key>Label</key>\\n<string>com.ndb.wallpaperchanger</string>\\n<key>OnDemand</key>\\n<true/>\\n<key>RunAtLoad</key>\\n<false/>\\n<key>ProgramArguments</key>\\n<array>\\n<string>/usr/bin/ChangeWallpaper</string>\\n</array>\\n<key>UserName</key>\\n<string>mobile</string>\\n<key>StartCalendarInterval</key>\\n<array>\\n<dict>\\n<key>Minute</key>\\n<integer>0</integer>\\n</dict>\\n<dict>\\n<key>Minute</key>\\n<integer>30</integer>\\n</dict>\\n</array>\\n</dict>\\n</plist>\\nEOF\\n\\n# Load the scheduled task\\n\\nlaunchctl load /Library/LaunchDaemons/com.ndb.changewallpaper.plist\\n```\\n\\nEnjoy!\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><b>NOTE: This is only for jailbroken iPhones.</b></p>\n<p>I love finding awesome wallpapers on <a href=\"https://www.reddit.com\">reddit</a>. My Ubuntu desktop cycles through my wallpaper collection with a program called <a href=\"https://help.ubuntu.com/community/Cortina\">Cortina</a>, and I wanted my iPhone to do the same.</p>\n<p>So I wrote a very simple script and a launchd plist that runs the script every 30 minutes. If you want to set this up for your jailbroken iPhone, all you need is SSH and a collection of images.</p>\n<p>Save your wallpapers to <code>/var/mobile/Media/Wallpapers</code> (or wherever you like), then ssh the following script to your iPhone and run it. (It will need to be executable: <code>chmod +x</code>).</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\n# This script sets up your iPhone to change the lock-screen wallpaper every 30 minutes.\n\nwallpaper_dir=\"/var/mobile/Media/Wallpapers\"\n\n# Install the wallpaper changing script\n\ncat &gt; /usr/bin/ChangeWallpaper &lt;&lt;EOF\n#!/bin/bash\n\n# Overwrite the LockBackground image with a random image from the wallpaper directory.\n\nfiles=($wallpaper_dir/\\*)\ncp -f \\${files[RANDOM % \\${#files[@]}]} /private/var/mobile/Library/SpringBoard/LockBackground.jpg\nEOF\nchmod +x /usr/bin/ChangeWallpaper\n\n# Install the launchd task to run the script every 30 minutes\n\ncat &gt; /Library/LaunchDaemons/com.ndb.changewallpaper.plist &lt;&lt;EOF\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"https://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n&lt;key&gt;Label&lt;/key&gt;\n&lt;string&gt;com.ndb.wallpaperchanger&lt;/string&gt;\n&lt;key&gt;OnDemand&lt;/key&gt;\n&lt;true/&gt;\n&lt;key&gt;RunAtLoad&lt;/key&gt;\n&lt;false/&gt;\n&lt;key&gt;ProgramArguments&lt;/key&gt;\n&lt;array&gt;\n&lt;string&gt;/usr/bin/ChangeWallpaper&lt;/string&gt;\n&lt;/array&gt;\n&lt;key&gt;UserName&lt;/key&gt;\n&lt;string&gt;mobile&lt;/string&gt;\n&lt;key&gt;StartCalendarInterval&lt;/key&gt;\n&lt;array&gt;\n&lt;dict&gt;\n&lt;key&gt;Minute&lt;/key&gt;\n&lt;integer&gt;0&lt;/integer&gt;\n&lt;/dict&gt;\n&lt;dict&gt;\n&lt;key&gt;Minute&lt;/key&gt;\n&lt;integer&gt;30&lt;/integer&gt;\n&lt;/dict&gt;\n&lt;/array&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\nEOF\n\n# Load the scheduled task\n\nlaunchctl load /Library/LaunchDaemons/com.ndb.changewallpaper.plist\n</code></pre>\n<p>Enjoy!</p>\n",
            "comment_id": "48",
            "plaintext": "NOTE: This is only for jailbroken iPhones.\n\n\nI love finding awesome wallpapers on reddit. My Ubuntu desktop cycles through my wallpaper collection with a program called Cortina, and I wanted my iPhone to do the same.\n\n\nSo I wrote a very simple script and a launchd plist that runs the script every 30 minutes. If you want to set this up for your jailbroken iPhone, all you need is SSH and a collection of images.\n\n\nSave your wallpapers to /var/mobile/Media/Wallpapers (or wherever you like), then ssh the following script to your iPhone and run it. (It will need to be executable: chmod +x).\n\n\n#!/bin/bash\n\n# This script sets up your iPhone to change the lock-screen wallpaper every 30 minutes.\n\nwallpaper_dir=\"/var/mobile/Media/Wallpapers\"\n\n# Install the wallpaper changing script\n\ncat > /usr/bin/ChangeWallpaper <<EOF\n#!/bin/bash\n\n# Overwrite the LockBackground image with a random image from the wallpaper directory.\n\nfiles=($wallpaper_dir/\\*)\ncp -f \\${files[RANDOM % \\${#files[@]}]} /private/var/mobile/Library/SpringBoard/LockBackground.jpg\nEOF\nchmod +x /usr/bin/ChangeWallpaper\n\n# Install the launchd task to run the script every 30 minutes\n\ncat > /Library/LaunchDaemons/com.ndb.changewallpaper.plist <<EOF\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"https://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n<key>Label</key>\n<string>com.ndb.wallpaperchanger</string>\n<key>OnDemand</key>\n<true/>\n<key>RunAtLoad</key>\n<false/>\n<key>ProgramArguments</key>\n<array>\n<string>/usr/bin/ChangeWallpaper</string>\n</array>\n<key>UserName</key>\n<string>mobile</string>\n<key>StartCalendarInterval</key>\n<array>\n<dict>\n<key>Minute</key>\n<integer>0</integer>\n</dict>\n<dict>\n<key>Minute</key>\n<integer>30</integer>\n</dict>\n</array>\n</dict>\n</plist>\nEOF\n\n# Load the scheduled task\n\nlaunchctl load /Library/LaunchDaemons/com.ndb.changewallpaper.plist\n\n\n\nEnjoy!\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-07-20T00:00:00.000Z",
            "updated_at": "2024-04-19T01:46:09.000Z",
            "published_at": "2011-07-20T16:27:10.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8b2",
            "uuid": "821ceed1-02cb-4118-a5c8-f0c97af8cf98",
            "title": "Bash Color Index",
            "slug": "bash-color-index",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Sometimes it's nice to add color output to your bash scripts. Here's a small 'color index' reference script for your .bashrc, for when you want to add a bit of color to your scripts.\\n\\nSave the following script somewhere in your PATH (e.g. `/bin/color_index`), <br/>and make it executable. (`chmod +x /bin/color_index`)\\n\\n```bash\\n#!/bin/bash\\n\\n# Bash Colors Index\\n\\n# Shows an index of all available bash colors\\n\\n# ------------------------------------------------\\n\\necho -e \\\"\\\\n Usage: \\\\\\\\\\\\e[\\\\*;**(;**)m\\\"\\necho -e \\\" Default: \\\\\\\\\\\\e[0m\\\"\\nblank_line=\\\"\\\\e[0m\\\\n \\\\e[0;30;40m$(printf \\\"%41s\\\")\\\\e[0m\\\"\\necho -e \\\"$blank_line\\\" # Top border\\nfor style in 2 0 1 4 9; do\\necho -en \\\" \\\\e[0;30;40m \\\"\\n\\n# Display black fg on white bg\\n\\necho -en \\\"\\\\e[${style};30;47m${style};30\\\\e[0;30;40m \\\"\\nfor foreground in $(seq 31 37); do\\n      ctrl=\\\"\\\\e[${style};${foreground};40m\\\"\\n      echo -en \\\"${ctrl}\\\"\\necho -en \\\"${style};${foreground}\\\\e[0;30;40m \\\"\\ndone\\necho -e \\\"$blank_line\\\" # Separators\\ndone\\necho -en \\\" \\\\e[0;30;40m \\\"\\n\\n# Background colors\\n\\necho -en \\\"\\\\e[0;37;40m*;40\\\\e[0;30;40m \\\\e[0m\\\" # Display white fg on black bg\\nfor background in $(seq 41 47); do\\n    ctrl=\\\"\\\\e[0;30;${background}m\\\"\\necho -en \\\"${ctrl}\\\"\\necho -en \\\"*;${background}\\\\e[0;30;40m \\\"\\ndone\\necho -e \\\"$blank_line\\\" \\\"\\\\n\\\" # Bottom border\\n```\\n\\nRunning 'color_index' will display something like this:\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2011/08/color_index-resized-post.png\\\" alt=\\\"color_index()\\\" />\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Sometimes it's nice to add color output to your bash scripts. Here's a small 'color index' reference script for your .bashrc, for when you want to add a bit of color to your scripts.</p>\n<p>Save the following script somewhere in your PATH (e.g. <code>/bin/color_index</code>), <br>and make it executable. (<code>chmod +x /bin/color_index</code>)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\n# Bash Colors Index\n\n# Shows an index of all available bash colors\n\n# ------------------------------------------------\n\necho -e \"\\n Usage: \\\\\\e[\\*;**(;**)m\"\necho -e \" Default: \\\\\\e[0m\"\nblank_line=\"\\e[0m\\n \\e[0;30;40m$(printf \"%41s\")\\e[0m\"\necho -e \"$blank_line\" # Top border\nfor style in 2 0 1 4 9; do\necho -en \" \\e[0;30;40m \"\n\n# Display black fg on white bg\n\necho -en \"\\e[${style};30;47m${style};30\\e[0;30;40m \"\nfor foreground in $(seq 31 37); do\n      ctrl=\"\\e[${style};${foreground};40m\"\n      echo -en \"${ctrl}\"\necho -en \"${style};${foreground}\\e[0;30;40m \"\ndone\necho -e \"$blank_line\" # Separators\ndone\necho -en \" \\e[0;30;40m \"\n\n# Background colors\n\necho -en \"\\e[0;37;40m*;40\\e[0;30;40m \\e[0m\" # Display white fg on black bg\nfor background in $(seq 41 47); do\n    ctrl=\"\\e[0;30;${background}m\"\necho -en \"${ctrl}\"\necho -en \"*;${background}\\e[0;30;40m \"\ndone\necho -e \"$blank_line\" \"\\n\" # Bottom border\n</code></pre>\n<p>Running 'color_index' will display something like this:</p>\n<img src=\"__GHOST_URL__/content/images/posts/2011/08/color_index-resized-post.png\" alt=\"color_index()\">\n",
            "comment_id": "49",
            "plaintext": "Sometimes it's nice to add color output to your bash scripts. Here's a small 'color index' reference script for your .bashrc, for when you want to add a bit of color to your scripts.\n\n\nSave the following script somewhere in your PATH (e.g. /bin/color_index),\nand make it executable. (chmod +x /bin/color_index)\n\n\n#!/bin/bash\n\n# Bash Colors Index\n\n# Shows an index of all available bash colors\n\n# ------------------------------------------------\n\necho -e \"\\n Usage: \\\\\\e[\\*;**(;**)m\"\necho -e \" Default: \\\\\\e[0m\"\nblank_line=\"\\e[0m\\n \\e[0;30;40m$(printf \"%41s\")\\e[0m\"\necho -e \"$blank_line\" # Top border\nfor style in 2 0 1 4 9; do\necho -en \" \\e[0;30;40m \"\n\n# Display black fg on white bg\n\necho -en \"\\e[${style};30;47m${style};30\\e[0;30;40m \"\nfor foreground in $(seq 31 37); do\n      ctrl=\"\\e[${style};${foreground};40m\"\n      echo -en \"${ctrl}\"\necho -en \"${style};${foreground}\\e[0;30;40m \"\ndone\necho -e \"$blank_line\" # Separators\ndone\necho -en \" \\e[0;30;40m \"\n\n# Background colors\n\necho -en \"\\e[0;37;40m*;40\\e[0;30;40m \\e[0m\" # Display white fg on black bg\nfor background in $(seq 41 47); do\n    ctrl=\"\\e[0;30;${background}m\"\necho -en \"${ctrl}\"\necho -en \"*;${background}\\e[0;30;40m \"\ndone\necho -e \"$blank_line\" \"\\n\" # Bottom border\n\n\n\nRunning 'color_index' will display something like this:\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-08-16T00:00:00.000Z",
            "updated_at": "2024-04-19T01:44:47.000Z",
            "published_at": "2011-08-16T08:47:38.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8b3",
            "uuid": "4bcef1bf-9049-47ab-b7be-9ea8a77141d0",
            "title": "Running bash color codes through sed",
            "slug": "running-bash-color-codes-through-sed",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"I have a script that runs a search and replace on a git status. I recently found out how to do `git config color.status always`, so that git status gives color codes to my functions. However, this broke the substitution, and it took me a while to figure it out.\\n\\nAt the end of every line, there was an invisible 'reset' color code, and this meant that `sed \\\"s/string$/$replace\\\"` was no longer finding `string$`.\\n\\nHere is an example of how to use sed when your string contains color codes:\\n\\n```bash\\n# Need to strip the color character from the end of the line, otherwise\\n# EOL '$' doesn't work. This gave me a headache for long time.\\n# The echo ~> regex is time-consuming, so perform a simple search first.\\n\\nif [[$line == *$search*]]; then\\n  line=$(echo $line | sed -r \\\"s:$search(\\\\x1B\\\\[m)?$:$replace:g\\\")\\nfi\\n```\\n\\nYou might also find this page useful: <a href=\\\"https://www.commandlinefu.com/commands/view/3584/remove-color-codes-special-characters-with-sed\\\">https://www.commandlinefu.com/commands/view/3584/remove-color-codes-special-characters-with-sed</a>\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I have a script that runs a search and replace on a git status. I recently found out how to do <code>git config color.status always</code>, so that git status gives color codes to my functions. However, this broke the substitution, and it took me a while to figure it out.</p>\n<p>At the end of every line, there was an invisible 'reset' color code, and this meant that <code>sed \"s/string$/$replace\"</code> was no longer finding <code>string$</code>.</p>\n<p>Here is an example of how to use sed when your string contains color codes:</p>\n<pre><code class=\"language-bash\"># Need to strip the color character from the end of the line, otherwise\n# EOL '$' doesn't work. This gave me a headache for long time.\n# The echo ~&gt; regex is time-consuming, so perform a simple search first.\n\nif [[$line == *$search*]]; then\n  line=$(echo $line | sed -r \"s:$search(\\x1B\\[m)?$:$replace:g\")\nfi\n</code></pre>\n<p>You might also find this page useful: <a href=\"https://www.commandlinefu.com/commands/view/3584/remove-color-codes-special-characters-with-sed\">https://www.commandlinefu.com/commands/view/3584/remove-color-codes-special-characters-with-sed</a></p>\n",
            "comment_id": "50",
            "plaintext": "I have a script that runs a search and replace on a git status. I recently found out how to do git config color.status always, so that git status gives color codes to my functions. However, this broke the substitution, and it took me a while to figure it out.\n\n\nAt the end of every line, there was an invisible 'reset' color code, and this meant that sed \"s/string$/$replace\" was no longer finding string$.\n\n\nHere is an example of how to use sed when your string contains color codes:\n\n\n# Need to strip the color character from the end of the line, otherwise\n# EOL '$' doesn't work. This gave me a headache for long time.\n# The echo ~> regex is time-consuming, so perform a simple search first.\n\nif [[$line == *$search*]]; then\n  line=$(echo $line | sed -r \"s:$search(\\x1B\\[m)?$:$replace:g\")\nfi\n\n\n\nYou might also find this page useful: https://www.commandlinefu.com/commands/view/3584/remove-color-codes-special-characters-with-sed\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-08-18T00:00:00.000Z",
            "updated_at": "2024-04-19T01:43:50.000Z",
            "published_at": "2011-08-18T04:48:59.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8b4",
            "uuid": "b41fea28-27b6-4f52-a019-a3cb0d427489",
            "title": "Don't use 'bundle install {gem}'.",
            "slug": "dont-use-bundle-install-gem",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Maybe you want to update haml to the latest version. You tried to run <code>bundle install haml</code>, but now some really weird stuff is happening. Bundler decided to install all of your gems from scratch into a ./haml folder. Even when you try <code>bundle update haml</code>, the gems are still going into the ./haml folder! What's going on?\\n\\n<code>bundle install haml</code> is totally different from <code>bundle update haml</code>.\\n\\nWhat <code>bundle install haml</code> does:\\n\\n<ol>\\n\\t<li>Installs all of your gems into a 'haml' folder. (creates the folder if it doesn't exist)</li>\\n\\t<li>Saves the  'haml' path in .bundle/config, so that it becomes your default gem folder for every bundle command you run in the future.</li>\\n</ol>\\n\\nIf you made this mistake and want to reset everything back to normal, just run:\\n\\n```bash\\nrm -rf {gem} .bundle/config\\n```\\n\\nThen, to update your gem, you should run:\\n\\n```bash\\nbundle update {gem}\\n```\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Maybe you want to update haml to the latest version. You tried to run <code>bundle install haml</code>, but now some really weird stuff is happening. Bundler decided to install all of your gems from scratch into a ./haml folder. Even when you try <code>bundle update haml</code>, the gems are still going into the ./haml folder! What's going on?</p>\n<p><code>bundle install haml</code> is totally different from <code>bundle update haml</code>.</p>\n<p>What <code>bundle install haml</code> does:</p>\n<ol>\n\t<li>Installs all of your gems into a 'haml' folder. (creates the folder if it doesn't exist)</li>\n\t<li>Saves the&nbsp; 'haml' path in .bundle/config, so that it becomes your default gem folder for every bundle command you run in the future.</li>\n</ol>\n<p>If you made this mistake and want to reset everything back to normal, just run:</p>\n<pre><code class=\"language-bash\">rm -rf {gem} .bundle/config\n</code></pre>\n<p>Then, to update your gem, you should run:</p>\n<pre><code class=\"language-bash\">bundle update {gem}\n</code></pre>\n",
            "comment_id": "51",
            "plaintext": "Maybe you want to update haml to the latest version. You tried to run bundle install haml, but now some really weird stuff is happening. Bundler decided to install all of your gems from scratch into a ./haml folder. Even when you try bundle update haml, the gems are still going into the ./haml folder! What's going on?\n\n\nbundle install haml is totally different from bundle update haml.\n\n\nWhat bundle install haml does:\n\n\n 1. Installs all of your gems into a 'haml' folder. (creates the folder if it doesn't exist)\n 2. Saves the  'haml' path in .bundle/config, so that it becomes your default gem folder for every bundle command you run in the future.\n\n\nIf you made this mistake and want to reset everything back to normal, just run:\n\n\nrm -rf {gem} .bundle/config\n\n\n\nThen, to update your gem, you should run:\n\n\nbundle update {gem}\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-09-03T00:00:00.000Z",
            "updated_at": "2024-04-19T01:42:03.000Z",
            "published_at": "2011-09-03T04:39:22.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8b5",
            "uuid": "2b6b836f-a0f4-4b5d-b67e-34ace394495a",
            "title": "A better way to use xclip (clipboard from the command line)",
            "slug": "a-nicer-way-to-use-xclip",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Sometimes you just want to copy something from your terminal and paste it somewhere else.\\nYou might have heard of a Linux program called <code>xclip</code>, which provides a command line\\ninterface to X selections.\\nHowever, <code>xclip</code>'s default selection isn't the clipboard,\\nand typing <code>xclip -selection c -i ~/.ssh/id_rsa.pub<file></code> is just a bit tedious.\\n\\nSo here's a wrapper function that makes it less of a hassle\\nto integrate the clipboard with the command line.\\n\\n- It handles input via pipe or parameters.\\n- It automatically uses the contents of a file if you pass it a valid filename.\\n- It prints an excerpt of what has been copied, truncated to 80 characters.\\n\\n### Examples\\n\\n- Pipe anything to the clipboard\\n\\n```bash\\n$ tail -n 100 /var/log/apache2/error.log | cb\\n\\n# => Copied to clipboard: [Sun Oct 02 08:02:08 2011] [notice] Apache/2.2.17 (Ubuntu) configured -- resumin...\\n\\n```\\n\\n- Copy the contents of a file to the clipboard\\n\\n```bash\\n$ cbf ~/.ssh/id_rsa.pub\\n\\n# => Copied to clipboard: ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAnwaNIuOhZzUeR6/xEEudXt3zEh91dawhkkKx8p/+4Bw9...\\n\\n```\\n\\n- Type straight into the clipboard\\n\\n```bash\\n$ cb This is some unquoted text.\\n\\n# => Copied to clipboard: This is some unquoted text.\\n\\n```\\n\\nNo options, no <code>man</code> pages.\\n\\nIt also comes with a handy <code>cb_ssh</code> alias that copies your SSH public key to the clipboard,\\nfor when you are setting up your new [BitBucket account](https://bitbucket.org)\\nwith [unlimited, free private git repositories](https://blog.bitbucket.org/2011/10/03/bitbucket-now-rocks-git/)!\\nI'm not affiliated with Atlassian, I just think they're awesome.\\n\\nSo if you think this looks handy, you can add the following to your <code>~/.bashrc</code>:\\n\\n```bash\\n\\n# A shortcut function that simplifies usage of xclip.\\n\\n# - Accepts input from either stdin (pipe), or params.\\n\\n# ------------------------------------------------\\n\\ncb() {\\nlocal \\\\_scs_col=\\\"\\\\e[0;32m\\\"; local \\\\_wrn_col='\\\\e[1;31m'; local \\\\_trn_col='\\\\e[0;33m'\\n\\n# Check that xclip is installed.\\n\\nif ! type xclip > /dev/null 2>&1; then\\necho -e \\\"$\\\\_wrn_col\\\"\\\"You must have the 'xclip' program installed.\\\\e[0m\\\"\\n\\n# Check user is not root (root doesn't have access to user xorg server)\\n\\nelif [[\\\"$USER\\\" == \\\"root\\\"]]; then\\necho -e \\\"$_wrn_col\\\"\\\"Must be regular user (not root) to copy a file to the clipboard.\\\\e[0m\\\"\\n  else\\n    # If no tty, data should be available on stdin\\n    if ! [[ \\\"$( tty )\\\" == /dev/_ ]]; then\\ninput=\\\"$(< /dev/stdin)\\\"\\n    # Else, fetch input from params\\n    else\\n      input=\\\"$_\\\"\\nfi\\nif [ -z \\\"$input\\\" ]; then # If no input, print usage message.\\necho \\\"Copies a string to the clipboard.\\\"\\necho \\\"Usage: cb <string>\\\"\\necho \\\" echo <string> | cb\\\"\\nelse # Copy input to clipboard\\necho -n \\\"$input\\\" | xclip -selection c\\n      # Truncate text for status\\n      if [ ${#input} -gt 80 ]; then input=\\\"$(echo $input | cut -c1-80)$\\\\_trn_col...\\\\e[0m\\\"; fi # Print status.\\necho -e \\\"$\\\\_scs_col\\\"\\\"Copied to clipboard:\\\\e[0m $input\\\"\\nfi\\nfi\\n}\\n\\n# Aliases / functions leveraging the cb() function\\n\\n# ------------------------------------------------\\n\\n# Copy contents of a file\\n\\nfunction cbf() { cat \\\"$1\\\" | cb; }\\n\\n# Copy SSH public key\\n\\nalias cbssh=\\\"cbf ~/.ssh/id_rsa.pub\\\"\\n\\n# Copy current working directory\\n\\nalias cbwd=\\\"pwd | cb\\\"\\n\\n# Copy most recent command in bash history\\n\\nalias cbhs=\\\"cat $HISTFILE | tail -n 1 | cb\\\"\\n```\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Sometimes you just want to copy something from your terminal and paste it somewhere else.<br>\nYou might have heard of a Linux program called <code>xclip</code>, which provides a command line<br>\ninterface to X selections.<br>\nHowever, <code>xclip</code>'s default selection isn't the clipboard,<br>\nand typing <code>xclip -selection c -i ~/.ssh/id_rsa.pub<file></file></code> is just a bit tedious.</p>\n<p>So here's a wrapper function that makes it less of a hassle<br>\nto integrate the clipboard with the command line.</p>\n<ul>\n<li>It handles input via pipe or parameters.</li>\n<li>It automatically uses the contents of a file if you pass it a valid filename.</li>\n<li>It prints an excerpt of what has been copied, truncated to 80 characters.</li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<ul>\n<li>Pipe anything to the clipboard</li>\n</ul>\n<pre><code class=\"language-bash\">$ tail -n 100 /var/log/apache2/error.log | cb\n\n# =&gt; Copied to clipboard: [Sun Oct 02 08:02:08 2011] [notice] Apache/2.2.17 (Ubuntu) configured -- resumin...\n\n</code></pre>\n<ul>\n<li>Copy the contents of a file to the clipboard</li>\n</ul>\n<pre><code class=\"language-bash\">$ cbf ~/.ssh/id_rsa.pub\n\n# =&gt; Copied to clipboard: ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAnwaNIuOhZzUeR6/xEEudXt3zEh91dawhkkKx8p/+4Bw9...\n\n</code></pre>\n<ul>\n<li>Type straight into the clipboard</li>\n</ul>\n<pre><code class=\"language-bash\">$ cb This is some unquoted text.\n\n# =&gt; Copied to clipboard: This is some unquoted text.\n\n</code></pre>\n<p>No options, no <code>man</code> pages.</p>\n<p>It also comes with a handy <code>cb_ssh</code> alias that copies your SSH public key to the clipboard,<br>\nfor when you are setting up your new <a href=\"https://bitbucket.org\">BitBucket account</a><br>\nwith <a href=\"https://blog.bitbucket.org/2011/10/03/bitbucket-now-rocks-git/\">unlimited, free private git repositories</a>!<br>\nI'm not affiliated with Atlassian, I just think they're awesome.</p>\n<p>So if you think this looks handy, you can add the following to your <code>~/.bashrc</code>:</p>\n<pre><code class=\"language-bash\">\n# A shortcut function that simplifies usage of xclip.\n\n# - Accepts input from either stdin (pipe), or params.\n\n# ------------------------------------------------\n\ncb() {\nlocal \\_scs_col=\"\\e[0;32m\"; local \\_wrn_col='\\e[1;31m'; local \\_trn_col='\\e[0;33m'\n\n# Check that xclip is installed.\n\nif ! type xclip &gt; /dev/null 2&gt;&amp;1; then\necho -e \"$\\_wrn_col\"\"You must have the 'xclip' program installed.\\e[0m\"\n\n# Check user is not root (root doesn't have access to user xorg server)\n\nelif [[\"$USER\" == \"root\"]]; then\necho -e \"$_wrn_col\"\"Must be regular user (not root) to copy a file to the clipboard.\\e[0m\"\n  else\n    # If no tty, data should be available on stdin\n    if ! [[ \"$( tty )\" == /dev/_ ]]; then\ninput=\"$(&lt; /dev/stdin)\"\n    # Else, fetch input from params\n    else\n      input=\"$_\"\nfi\nif [ -z \"$input\" ]; then # If no input, print usage message.\necho \"Copies a string to the clipboard.\"\necho \"Usage: cb &lt;string&gt;\"\necho \" echo &lt;string&gt; | cb\"\nelse # Copy input to clipboard\necho -n \"$input\" | xclip -selection c\n      # Truncate text for status\n      if [ ${#input} -gt 80 ]; then input=\"$(echo $input | cut -c1-80)$\\_trn_col...\\e[0m\"; fi # Print status.\necho -e \"$\\_scs_col\"\"Copied to clipboard:\\e[0m $input\"\nfi\nfi\n}\n\n# Aliases / functions leveraging the cb() function\n\n# ------------------------------------------------\n\n# Copy contents of a file\n\nfunction cbf() { cat \"$1\" | cb; }\n\n# Copy SSH public key\n\nalias cbssh=\"cbf ~/.ssh/id_rsa.pub\"\n\n# Copy current working directory\n\nalias cbwd=\"pwd | cb\"\n\n# Copy most recent command in bash history\n\nalias cbhs=\"cat $HISTFILE | tail -n 1 | cb\"\n</code></pre>\n",
            "comment_id": "52",
            "plaintext": "Sometimes you just want to copy something from your terminal and paste it somewhere else.\n\nYou might have heard of a Linux program called xclip, which provides a command line\n\ninterface to X selections.\n\nHowever, xclip's default selection isn't the clipboard,\n\nand typing xclip -selection c -i ~/.ssh/id_rsa.pub is just a bit tedious.\n\n\nSo here's a wrapper function that makes it less of a hassle\n\nto integrate the clipboard with the command line.\n\n\n * It handles input via pipe or parameters.\n * It automatically uses the contents of a file if you pass it a valid filename.\n * It prints an excerpt of what has been copied, truncated to 80 characters.\n\n\n\nExamples\n\n\n * Pipe anything to the clipboard\n\n\n$ tail -n 100 /var/log/apache2/error.log | cb\n\n# => Copied to clipboard: [Sun Oct 02 08:02:08 2011] [notice] Apache/2.2.17 (Ubuntu) configured -- resumin...\n\n\n\n\n * Copy the contents of a file to the clipboard\n\n\n$ cbf ~/.ssh/id_rsa.pub\n\n# => Copied to clipboard: ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAnwaNIuOhZzUeR6/xEEudXt3zEh91dawhkkKx8p/+4Bw9...\n\n\n\n\n * Type straight into the clipboard\n\n\n$ cb This is some unquoted text.\n\n# => Copied to clipboard: This is some unquoted text.\n\n\n\n\nNo options, no man pages.\n\n\nIt also comes with a handy cb_ssh alias that copies your SSH public key to the clipboard,\n\nfor when you are setting up your new BitBucket account\n\nwith unlimited, free private git repositories!\n\nI'm not affiliated with Atlassian, I just think they're awesome.\n\n\nSo if you think this looks handy, you can add the following to your ~/.bashrc:\n\n\n\n# A shortcut function that simplifies usage of xclip.\n\n# - Accepts input from either stdin (pipe), or params.\n\n# ------------------------------------------------\n\ncb() {\nlocal \\_scs_col=\"\\e[0;32m\"; local \\_wrn_col='\\e[1;31m'; local \\_trn_col='\\e[0;33m'\n\n# Check that xclip is installed.\n\nif ! type xclip > /dev/null 2>&1; then\necho -e \"$\\_wrn_col\"\"You must have the 'xclip' program installed.\\e[0m\"\n\n# Check user is not root (root doesn't have access to user xorg server)\n\nelif [[\"$USER\" == \"root\"]]; then\necho -e \"$_wrn_col\"\"Must be regular user (not root) to copy a file to the clipboard.\\e[0m\"\n  else\n    # If no tty, data should be available on stdin\n    if ! [[ \"$( tty )\" == /dev/_ ]]; then\ninput=\"$(< /dev/stdin)\"\n    # Else, fetch input from params\n    else\n      input=\"$_\"\nfi\nif [ -z \"$input\" ]; then # If no input, print usage message.\necho \"Copies a string to the clipboard.\"\necho \"Usage: cb <string>\"\necho \" echo <string> | cb\"\nelse # Copy input to clipboard\necho -n \"$input\" | xclip -selection c\n      # Truncate text for status\n      if [ ${#input} -gt 80 ]; then input=\"$(echo $input | cut -c1-80)$\\_trn_col...\\e[0m\"; fi # Print status.\necho -e \"$\\_scs_col\"\"Copied to clipboard:\\e[0m $input\"\nfi\nfi\n}\n\n# Aliases / functions leveraging the cb() function\n\n# ------------------------------------------------\n\n# Copy contents of a file\n\nfunction cbf() { cat \"$1\" | cb; }\n\n# Copy SSH public key\n\nalias cbssh=\"cbf ~/.ssh/id_rsa.pub\"\n\n# Copy current working directory\n\nalias cbwd=\"pwd | cb\"\n\n# Copy most recent command in bash history\n\nalias cbhs=\"cat $HISTFILE | tail -n 1 | cb\"\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-10-04T00:00:00.000Z",
            "updated_at": "2024-04-19T01:41:26.000Z",
            "published_at": "2011-10-04T16:45:42.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8b6",
            "uuid": "a346da6f-fbc5-47e1-a35a-ff44e2c3371c",
            "title": "SCM Breeze",
            "slug": "git-shortcuts-like-youve-never-seen-before",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"**SCM Breeze** is a set of shell scripts (for `bash` and `zsh`) that make it easier to use git.\\nIt integrates with your shell to give you numbered file shortcuts,\\na repository index with tab completion, and a community driven collection of useful SCM functions.\\n\\nDisclaimer: **git** is currently the only supported SCM.\\nI've kept the project's name open because it won't be difficult to port it for other SCMs.\\n\\n## File Shortcuts\\n\\nSCM Breeze makes it really easy to work with changed files, and groups of changed files.\\nWhenever you view your SCM status, each modified path is stored in a numbered environment variable.\\nYou can configure the variable prefix, which is 'e' by default.\\n\\n### `git_status_shortcuts`:\\n\\n<div class=\\\"centered\\\">\\n<img src=\\\"__GHOST_URL__/content/images/posts/2011/10/status_with_shortcuts-resized-post.png\\\" width=\\\"590\\\" alt=\\\"Git Status With Shortcuts\\\" />\\n</div>\\n<br/><br/>\\n\\nThese numbers (or ranges of numbers) can be used with any SCM or system command.\\n\\nFor example, if `ga` was your alias for `git add`, instead of typing something like:\\n\\n```bash\\n$ ga assets/git_breeze/config\\\\* assets/git_breeze/install.sh\\n```\\n\\nYou can type this instead:\\n\\n```bash\\n$ ga $e2 $e3 $e11\\n```\\n\\nBut SCM Breeze aliases `ga` to the `git_add_shorcuts` function,\\nwhich is smart enough to expand integers and ranges, so all you need to type is:\\n\\n```bash\\n$ ga 2 3 11\\n```\\n\\nAnd if you want to add all unstaged changes (files 1 to 10):\\n\\n```bash\\n$ ga 1-10\\n```\\n\\n(Note that `ga` will also remove deleted files, unlike the standard `git add` command.\\nThis behaviour can be turned off if you don't like it.)\\n\\nYou can also diff, reset or checkout a file by typing:\\n\\n```bash\\n$ gd 3\\n$ grs 4\\n$ gco 5\\n```\\n\\nYou can use these shortcuts with system commands by passing your command through `exec_git_expand_args`\\n(default alias is 'ge'):\\n\\n```bash\\n$ echo $e4\\n\\n# => assets/git_breeze/git_breeze.sh\\n\\n$ ge echo 4\\n\\n# => assets/git_breeze/git_breeze.sh\\n\\n$ ge echo 1-3\\n\\n# expands to echo $e1 $e2 $e3\\n\\n# => \\\\_shared.sh assets/git_breeze/config.example.sh assets/git_breeze/config.sh\\n\\n```\\n\\n## Keyboard bindings (disabled by default)\\n\\nMy most common git commands are `git status`, `git add` and `git commit`, so I wanted these\\nto be as streamlined as possible. One way of speeding up commonly used commands is by binding them to\\nkeyboard shortcuts.\\n\\nKeyboard shortcuts are turned off by default,\\nbut here are the default key bindings if you enable them:\\n\\n- `CTRL`+`SPACE` => `git_status_shortcuts` - show git status with file shortcuts\\n- `CTRL`+`x` `c` => `git_add_and_commit` - add given files (if any), then commit staged changes\\n- `CTRL`+`x` `SPACE` => `git_commit_all` - commit everything\\n\\nThe commit shortcuts use the `git_commit_prompt` function, which gives a simple prompt like this:\\n\\n<div class=\\\"centered\\\">\\n<img src=\\\"__GHOST_URL__/content/images/posts/2011/10/git_commit_all-resized-post.png\\\" alt=\\\"Git Commit All\\\" />\\n</div>\\n<br/>\\n(When using bash, this commit prompt gives you access to your bash history via the arrow keys.)\\n<br/>\\n\\nAnd if you really want to speed up your workflow, you can type this:\\n\\n```bash\\n$ 2 3 <CTRL+x c>\\n```\\n\\nThis sends the `HOME` key, followed by `git_add_and_commit`:\\n\\n<div class=\\\"centered\\\">\\n<img src=\\\"__GHOST_URL__/content/images/posts/2011/10/git_add_and_commit_params-resized-post.png\\\" alt=\\\"Git Add And Commit\\\" />\\n</div>\\n<br/>\\n\\n<h2 id=\\\"repository-index\\\">Repository Index</h2>\\n\\nThe second feature is a repository index for all of your projects and submodules.\\nThis gives you super-fast switching between your project directories, with tab completion,\\nand it can even tab-complete down to project subdirectories.\\nThis means that you can keep your projects organized in subfolders,\\nbut switch between them as easily as if they were all in one folder.\\n\\nIt's similar to [autojump](https://github.com/joelthelion/autojump), but it doesn't need to 'learn' anything,\\nand it can do SCM-specific stuff like:\\n\\n- Running a command for all of your repos (useful if you ever need to update a lot of remote URLs)\\n- Auto-updating a repo when you switch to it and it hasn't been updated for at least 5 hours.\\n\\nThe default alias for `git_index` is 's', which could stand for 'source' or 'switch' :)\\n\\nYou will first need to configure your repository directory, and then build the index:\\n\\n```bash\\n$ s --rebuild\\n\\n# => == Scanning /home/ndbroadbent/src for git repos & submodules...\\n\\n# => ===== Indexed 64 repos in /home/ndbroadbent/src/.git_index\\n\\n```\\n\\nThen you'll be able to switch between your projects, or show the list of indexed repos:\\n\\n<div class=\\\"centered\\\">\\n<img src=\\\"__GHOST_URL__/content/images/posts/2011/10/source_list-resized-post.png\\\" alt=\\\"Git Status With Shortcuts\\\" />\\n</div>\\n<br/><br/>\\n\\nTo switch to a project directory, you don't need to type the full project name. For example,\\nto switch to the `errbit` project, you could type any of the following:\\n\\n```bash\\n$ s errbit\\n$ s err\\n$ s rbit\\n```\\n\\nOr if you wanted to go straight to a subdirectory within `errbit`:\\n\\n```bash\\n$ s err<TAB>\\n$ s errbit/<TAB>\\n\\n# => app/ autotest/ config/ db/ ...\\n\\n$ s errbit/conf<TAB>\\n$ s errbit/config/\\n\\n# => cd ~/src/rails/errbit/config\\n\\n```\\n\\n## Anything else?\\n\\nIf you have any awesome SCM scripts lurking in your `.bashrc` or `.zshrc`,\\nplease feel free to send me a pull request.\\nIt would be cool to make this project into an [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) for SCMs.\\n\\n# Installation\\n\\n```bash\\ngit clone git://github.com/ndbroadbent/scm_breeze.git ~/.scm_breeze\\n~/.scm_breeze/install.sh\\nsource ~/.bashrc # or source ~/.zshrc\\n```\\n\\n(The install script simply appends the following line to your `.bashrc` or `.zshrc`):\\n\\n`[ -s \\\"$HOME/.scm_breeze/scm_breeze.sh\\\" ] && . \\\"$HOME/.scm_breeze/scm_breeze.sh\\\"`\\n\\n# Configuration\\n\\nSCM Breeze is configured via automatically installed `~/.*.scmbrc` files.\\nTo change git configuration, edit `~/.git.scmbrc`.\\n\\n**Note:** After changing any settings, you will need to run `source ~/.bashrc` (or `source ~/.zshrc`)\\n\\n\\nI know we grow attached to the aliases we use every day, so I've made them completely customizable.\\nJust change any aliases in `~/.git.scmbrc`. You can also change or remove any keyboard shortcuts.\\n\\nEach feature is modular, so you are free to ignore the parts you don't want to use.\\nJust comment out the relevant line in `~/.scm_breeze/scm_breeze.sh`.\\n\\n# Updating\\n\\nRun `update_scm_breeze`. This will update SCM Breeze from Github,\\nand will create or patch your `~/.*.scmbrc` files if any new settings are added.\\n\\n# Contributing\\n\\nSCM Breeze lives on Github at [https://github.com/ndbroadbent/scm_breeze](https://github.com/ndbroadbent/scm_breeze)\\n\\nPlease feel free to fork and send pull requests, especially if you would like to build these features for Mercurial, SVN, etc.\\n\\n## Enjoy!\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><strong>SCM Breeze</strong> is a set of shell scripts (for <code>bash</code> and <code>zsh</code>) that make it easier to use git.<br>\nIt integrates with your shell to give you numbered file shortcuts,<br>\na repository index with tab completion, and a community driven collection of useful SCM functions.</p>\n<p>Disclaimer: <strong>git</strong> is currently the only supported SCM.<br>\nI've kept the project's name open because it won't be difficult to port it for other SCMs.</p>\n<h2 id=\"file-shortcuts\">File Shortcuts</h2>\n<p>SCM Breeze makes it really easy to work with changed files, and groups of changed files.<br>\nWhenever you view your SCM status, each modified path is stored in a numbered environment variable.<br>\nYou can configure the variable prefix, which is 'e' by default.</p>\n<h3 id=\"gitstatusshortcuts\"><code>git_status_shortcuts</code>:</h3>\n<div class=\"centered\">\n<img src=\"__GHOST_URL__/content/images/posts/2011/10/status_with_shortcuts-resized-post.png\" width=\"590\" alt=\"Git Status With Shortcuts\">\n</div>\n<br><br>\n<p>These numbers (or ranges of numbers) can be used with any SCM or system command.</p>\n<p>For example, if <code>ga</code> was your alias for <code>git add</code>, instead of typing something like:</p>\n<pre><code class=\"language-bash\">$ ga assets/git_breeze/config\\* assets/git_breeze/install.sh\n</code></pre>\n<p>You can type this instead:</p>\n<pre><code class=\"language-bash\">$ ga $e2 $e3 $e11\n</code></pre>\n<p>But SCM Breeze aliases <code>ga</code> to the <code>git_add_shorcuts</code> function,<br>\nwhich is smart enough to expand integers and ranges, so all you need to type is:</p>\n<pre><code class=\"language-bash\">$ ga 2 3 11\n</code></pre>\n<p>And if you want to add all unstaged changes (files 1 to 10):</p>\n<pre><code class=\"language-bash\">$ ga 1-10\n</code></pre>\n<p>(Note that <code>ga</code> will also remove deleted files, unlike the standard <code>git add</code> command.<br>\nThis behaviour can be turned off if you don't like it.)</p>\n<p>You can also diff, reset or checkout a file by typing:</p>\n<pre><code class=\"language-bash\">$ gd 3\n$ grs 4\n$ gco 5\n</code></pre>\n<p>You can use these shortcuts with system commands by passing your command through <code>exec_git_expand_args</code><br>\n(default alias is 'ge'):</p>\n<pre><code class=\"language-bash\">$ echo $e4\n\n# =&gt; assets/git_breeze/git_breeze.sh\n\n$ ge echo 4\n\n# =&gt; assets/git_breeze/git_breeze.sh\n\n$ ge echo 1-3\n\n# expands to echo $e1 $e2 $e3\n\n# =&gt; \\_shared.sh assets/git_breeze/config.example.sh assets/git_breeze/config.sh\n\n</code></pre>\n<h2 id=\"keyboard-bindings-disabled-by-default\">Keyboard bindings (disabled by default)</h2>\n<p>My most common git commands are <code>git status</code>, <code>git add</code> and <code>git commit</code>, so I wanted these<br>\nto be as streamlined as possible. One way of speeding up commonly used commands is by binding them to<br>\nkeyboard shortcuts.</p>\n<p>Keyboard shortcuts are turned off by default,<br>\nbut here are the default key bindings if you enable them:</p>\n<ul>\n<li><code>CTRL</code>+<code>SPACE</code> =&gt; <code>git_status_shortcuts</code> - show git status with file shortcuts</li>\n<li><code>CTRL</code>+<code>x</code> <code>c</code> =&gt; <code>git_add_and_commit</code> - add given files (if any), then commit staged changes</li>\n<li><code>CTRL</code>+<code>x</code> <code>SPACE</code> =&gt; <code>git_commit_all</code> - commit everything</li>\n</ul>\n<p>The commit shortcuts use the <code>git_commit_prompt</code> function, which gives a simple prompt like this:</p>\n<div class=\"centered\">\n<img src=\"__GHOST_URL__/content/images/posts/2011/10/git_commit_all-resized-post.png\" alt=\"Git Commit All\">\n</div>\n<br>\n(When using bash, this commit prompt gives you access to your bash history via the arrow keys.)\n<br>\n<p>And if you really want to speed up your workflow, you can type this:</p>\n<pre><code class=\"language-bash\">$ 2 3 &lt;CTRL+x c&gt;\n</code></pre>\n<p>This sends the <code>HOME</code> key, followed by <code>git_add_and_commit</code>:</p>\n<div class=\"centered\">\n<img src=\"__GHOST_URL__/content/images/posts/2011/10/git_add_and_commit_params-resized-post.png\" alt=\"Git Add And Commit\">\n</div>\n<br>\n<h2 id=\"repository-index\">Repository Index</h2>\n<p>The second feature is a repository index for all of your projects and submodules.<br>\nThis gives you super-fast switching between your project directories, with tab completion,<br>\nand it can even tab-complete down to project subdirectories.<br>\nThis means that you can keep your projects organized in subfolders,<br>\nbut switch between them as easily as if they were all in one folder.</p>\n<p>It's similar to <a href=\"https://github.com/joelthelion/autojump\">autojump</a>, but it doesn't need to 'learn' anything,<br>\nand it can do SCM-specific stuff like:</p>\n<ul>\n<li>Running a command for all of your repos (useful if you ever need to update a lot of remote URLs)</li>\n<li>Auto-updating a repo when you switch to it and it hasn't been updated for at least 5 hours.</li>\n</ul>\n<p>The default alias for <code>git_index</code> is 's', which could stand for 'source' or 'switch' :)</p>\n<p>You will first need to configure your repository directory, and then build the index:</p>\n<pre><code class=\"language-bash\">$ s --rebuild\n\n# =&gt; == Scanning /home/ndbroadbent/src for git repos &amp; submodules...\n\n# =&gt; ===== Indexed 64 repos in /home/ndbroadbent/src/.git_index\n\n</code></pre>\n<p>Then you'll be able to switch between your projects, or show the list of indexed repos:</p>\n<div class=\"centered\">\n<img src=\"__GHOST_URL__/content/images/posts/2011/10/source_list-resized-post.png\" alt=\"Git Status With Shortcuts\">\n</div>\n<br><br>\n<p>To switch to a project directory, you don't need to type the full project name. For example,<br>\nto switch to the <code>errbit</code> project, you could type any of the following:</p>\n<pre><code class=\"language-bash\">$ s errbit\n$ s err\n$ s rbit\n</code></pre>\n<p>Or if you wanted to go straight to a subdirectory within <code>errbit</code>:</p>\n<pre><code class=\"language-bash\">$ s err&lt;TAB&gt;\n$ s errbit/&lt;TAB&gt;\n\n# =&gt; app/ autotest/ config/ db/ ...\n\n$ s errbit/conf&lt;TAB&gt;\n$ s errbit/config/\n\n# =&gt; cd ~/src/rails/errbit/config\n\n</code></pre>\n<h2 id=\"anything-else\">Anything else?</h2>\n<p>If you have any awesome SCM scripts lurking in your <code>.bashrc</code> or <code>.zshrc</code>,<br>\nplease feel free to send me a pull request.<br>\nIt would be cool to make this project into an <a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a> for SCMs.</p>\n<h1 id=\"installation\">Installation</h1>\n<pre><code class=\"language-bash\">git clone git://github.com/ndbroadbent/scm_breeze.git ~/.scm_breeze\n~/.scm_breeze/install.sh\nsource ~/.bashrc # or source ~/.zshrc\n</code></pre>\n<p>(The install script simply appends the following line to your <code>.bashrc</code> or <code>.zshrc</code>):</p>\n<p><code>[ -s \"$HOME/.scm_breeze/scm_breeze.sh\" ] &amp;&amp; . \"$HOME/.scm_breeze/scm_breeze.sh\"</code></p>\n<h1 id=\"configuration\">Configuration</h1>\n<p>SCM Breeze is configured via automatically installed <code>~/.*.scmbrc</code> files.<br>\nTo change git configuration, edit <code>~/.git.scmbrc</code>.</p>\n<p><strong>Note:</strong> After changing any settings, you will need to run <code>source ~/.bashrc</code> (or <code>source ~/.zshrc</code>)</p>\n<p>I know we grow attached to the aliases we use every day, so I've made them completely customizable.<br>\nJust change any aliases in <code>~/.git.scmbrc</code>. You can also change or remove any keyboard shortcuts.</p>\n<p>Each feature is modular, so you are free to ignore the parts you don't want to use.<br>\nJust comment out the relevant line in <code>~/.scm_breeze/scm_breeze.sh</code>.</p>\n<h1 id=\"updating\">Updating</h1>\n<p>Run <code>update_scm_breeze</code>. This will update SCM Breeze from Github,<br>\nand will create or patch your <code>~/.*.scmbrc</code> files if any new settings are added.</p>\n<h1 id=\"contributing\">Contributing</h1>\n<p>SCM Breeze lives on Github at <a href=\"https://github.com/ndbroadbent/scm_breeze\">https://github.com/ndbroadbent/scm_breeze</a></p>\n<p>Please feel free to fork and send pull requests, especially if you would like to build these features for Mercurial, SVN, etc.</p>\n<h2 id=\"enjoy\">Enjoy!</h2>\n",
            "comment_id": "53",
            "plaintext": "SCM Breeze is a set of shell scripts (for bash and zsh) that make it easier to use git.\n\nIt integrates with your shell to give you numbered file shortcuts,\n\na repository index with tab completion, and a community driven collection of useful SCM functions.\n\n\nDisclaimer: git is currently the only supported SCM.\n\nI've kept the project's name open because it won't be difficult to port it for other SCMs.\n\n\n\nFile Shortcuts\n\n\nSCM Breeze makes it really easy to work with changed files, and groups of changed files.\n\nWhenever you view your SCM status, each modified path is stored in a numbered environment variable.\n\nYou can configure the variable prefix, which is 'e' by default.\n\n\n\ngit_status_shortcuts:\n\n\n\n\n\n\n\n\nThese numbers (or ranges of numbers) can be used with any SCM or system command.\n\n\nFor example, if ga was your alias for git add, instead of typing something like:\n\n\n$ ga assets/git_breeze/config\\* assets/git_breeze/install.sh\n\n\n\nYou can type this instead:\n\n\n$ ga $e2 $e3 $e11\n\n\n\nBut SCM Breeze aliases ga to the git_add_shorcuts function,\n\nwhich is smart enough to expand integers and ranges, so all you need to type is:\n\n\n$ ga 2 3 11\n\n\n\nAnd if you want to add all unstaged changes (files 1 to 10):\n\n\n$ ga 1-10\n\n\n\n(Note that ga will also remove deleted files, unlike the standard git add command.\n\nThis behaviour can be turned off if you don't like it.)\n\n\nYou can also diff, reset or checkout a file by typing:\n\n\n$ gd 3\n$ grs 4\n$ gco 5\n\n\n\nYou can use these shortcuts with system commands by passing your command through exec_git_expand_args\n\n(default alias is 'ge'):\n\n\n$ echo $e4\n\n# => assets/git_breeze/git_breeze.sh\n\n$ ge echo 4\n\n# => assets/git_breeze/git_breeze.sh\n\n$ ge echo 1-3\n\n# expands to echo $e1 $e2 $e3\n\n# => \\_shared.sh assets/git_breeze/config.example.sh assets/git_breeze/config.sh\n\n\n\n\n\nKeyboard bindings (disabled by default)\n\n\nMy most common git commands are git status, git add and git commit, so I wanted these\n\nto be as streamlined as possible. One way of speeding up commonly used commands is by binding them to\n\nkeyboard shortcuts.\n\n\nKeyboard shortcuts are turned off by default,\n\nbut here are the default key bindings if you enable them:\n\n\n * CTRL+SPACE => git_status_shortcuts - show git status with file shortcuts\n * CTRL+x c => git_add_and_commit - add given files (if any), then commit staged changes\n * CTRL+x SPACE => git_commit_all - commit everything\n\n\nThe commit shortcuts use the git_commit_prompt function, which gives a simple prompt like this:\n\n\n\n\n\n\n\n(When using bash, this commit prompt gives you access to your bash history via the arrow keys.)\n\n\n\n\nAnd if you really want to speed up your workflow, you can type this:\n\n\n$ 2 3 <CTRL+x c>\n\n\n\nThis sends the HOME key, followed by git_add_and_commit:\n\n\n\n\n\n\n\n\nRepository Index\n\n\nThe second feature is a repository index for all of your projects and submodules.\n\nThis gives you super-fast switching between your project directories, with tab completion,\n\nand it can even tab-complete down to project subdirectories.\n\nThis means that you can keep your projects organized in subfolders,\n\nbut switch between them as easily as if they were all in one folder.\n\n\nIt's similar to autojump, but it doesn't need to 'learn' anything,\n\nand it can do SCM-specific stuff like:\n\n\n * Running a command for all of your repos (useful if you ever need to update a lot of remote URLs)\n * Auto-updating a repo when you switch to it and it hasn't been updated for at least 5 hours.\n\n\nThe default alias for git_index is 's', which could stand for 'source' or 'switch' :)\n\n\nYou will first need to configure your repository directory, and then build the index:\n\n\n$ s --rebuild\n\n# => == Scanning /home/ndbroadbent/src for git repos & submodules...\n\n# => ===== Indexed 64 repos in /home/ndbroadbent/src/.git_index\n\n\n\n\nThen you'll be able to switch between your projects, or show the list of indexed repos:\n\n\n\n\n\n\n\n\nTo switch to a project directory, you don't need to type the full project name. For example,\n\nto switch to the errbit project, you could type any of the following:\n\n\n$ s errbit\n$ s err\n$ s rbit\n\n\n\nOr if you wanted to go straight to a subdirectory within errbit:\n\n\n$ s err<TAB>\n$ s errbit/<TAB>\n\n# => app/ autotest/ config/ db/ ...\n\n$ s errbit/conf<TAB>\n$ s errbit/config/\n\n# => cd ~/src/rails/errbit/config\n\n\n\n\n\nAnything else?\n\n\nIf you have any awesome SCM scripts lurking in your .bashrc or .zshrc,\n\nplease feel free to send me a pull request.\n\nIt would be cool to make this project into an oh-my-zsh for SCMs.\n\n\n\nInstallation\n\n\ngit clone git://github.com/ndbroadbent/scm_breeze.git ~/.scm_breeze\n~/.scm_breeze/install.sh\nsource ~/.bashrc # or source ~/.zshrc\n\n\n\n(The install script simply appends the following line to your .bashrc or .zshrc):\n\n\n[ -s \"$HOME/.scm_breeze/scm_breeze.sh\" ] && . \"$HOME/.scm_breeze/scm_breeze.sh\"\n\n\n\nConfiguration\n\n\nSCM Breeze is configured via automatically installed ~/.*.scmbrc files.\n\nTo change git configuration, edit ~/.git.scmbrc.\n\n\nNote: After changing any settings, you will need to run source ~/.bashrc (or source ~/.zshrc)\n\n\nI know we grow attached to the aliases we use every day, so I've made them completely customizable.\n\nJust change any aliases in ~/.git.scmbrc. You can also change or remove any keyboard shortcuts.\n\n\nEach feature is modular, so you are free to ignore the parts you don't want to use.\n\nJust comment out the relevant line in ~/.scm_breeze/scm_breeze.sh.\n\n\n\nUpdating\n\n\nRun update_scm_breeze. This will update SCM Breeze from Github,\n\nand will create or patch your ~/.*.scmbrc files if any new settings are added.\n\n\n\nContributing\n\n\nSCM Breeze lives on Github at https://github.com/ndbroadbent/scm_breeze\n\n\nPlease feel free to fork and send pull requests, especially if you would like to build these features for Mercurial, SVN, etc.\n\n\n\nEnjoy!\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-10-19T00:00:00.000Z",
            "updated_at": "2024-04-19T01:40:35.000Z",
            "published_at": "2011-10-19T01:14:01.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8b7",
            "uuid": "85565e16-1fce-42e8-b003-103655225dc4",
            "title": "10 Reasons why you should Jailbreak your iPhone",
            "slug": "10-reasons-why-hackers-should-jailbreak-their-iphones",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nThere was a post on the front page of [Hacker News](https://news.ycombinator.com/) recently, titled \\\"[Making Chrome better on iOS](https://raphaelcaixeta.com/blog/2012/07/09/making-chrome-better-on-ios/)\\\". Google's Chrome browser is now available on iOS, and the author of the article was talking about how app developers could be persuaded to add some code to their apps which would allow Chrome to open links.\\n\\nRestrictions like this (not being able to change your default browser) are one of the many reasons why I wouldn't buy another iPhone if it couldn't be jailbroken.\\nIt also seems strange that 'Hacker News' readers don't appear to be very excited about 'hacking' the incredible device in their pockets.\\n\\nWe don't need to ask developers to support Chrome when we can just change the default browser ourselves:\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2012/07/browser_changer.png\\\" alt=\\\"Changing Default Browser\\\" />\\n\\nYou can find the \\\"[Browser Changer](https://cydia.saurik.com/package/jp.tom-go.openopera)\\\" package on [Cydia](https://cydia.saurik.com/).\\n\\n**Here's 9 other reasons why a jailbroken iPhone is better than any other mobile device:**\\n\\n<hr/>\\n\\n### Grooveshark\\n\\nThe Grooveshark iPhone app was removed from the App Store, so you can only install it on a jailbroken iPhone through Cydia.\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2012/07/grooveshark.png\\\" alt=\\\"Grooveshark\\\" />\\n\\nThe 'Grooveshark Anywhere' plan is required if you want to download unlimited albums and songs to play offline, but it's well worth the $9 per month.\\nIt's definitely a replacement for iTunes, so it's no wonder that Apple feels threatened.\\n\\n<small>Note: I also tried Spotify for a week when it was released to New Zealand, but I found that Grooveshark has a much bigger music collection.</small>\\n\\n<hr/>\\n\\n### SSH\\n\\nHaving SSH access to your phone opens up a lot of possibilities. For example, I use [capistrano](https://github.com/capistrano/capistrano/wiki/) to deploy iPhone apps and Cydia packages while I'm developing them.\\nI can also SFTP into the iPhone's filesystem, and use Ubuntu's file browser to copy and paste files.\\n\\n<hr/>\\n\\n### VLC media player\\n\\nPlays anything you can transfer to your iPhone. Another great app rejected from the App Store.\\n\\n<hr/>\\n\\n### Mobile Terminal\\n\\nIt's pretty neat to have a terminal on your phone, even if I don't use it very often.\\nYou never know when you might need to restart or rollback a remote server:\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2012/07/terminal.png\\\" alt=\\\"Terminal\\\" />\\n\\n<hr/>\\n\\n### SBSettings\\n\\nThis is an incredibly useful shortcuts menu, displayed by swiping the status bar:\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2012/07/sbsettings.png\\\" alt=\\\"SBSettings\\\" />\\n\\nThe AutoLock control is really handy when using the Maps application. I use Maps as the GPS for my car, and I don't want the screen to turn off while I'm driving.\\n\\n<hr/>\\n\\n### MyWi - 3G tethering\\n\\nI bought the MyWi package while using a 3GS. It's pretty expensive at $19.99,\\nbut it was a lifesaver when I was living without DSL for a few weeks.\\nI'm still using it after getting a 4S, since iOS 5's 'personal hotspot' feature was a bit flaky.\\nMyWi is rock-solid, and can display a small icon instead of taking over the entire status bar like the iOS hotspot.\\n\\n<hr/>\\n\\n### 5 columns for icons\\n\\nThis is just my personal preference, but I like having 5 icons in my dock and home screen.\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2012/07/five-icons.png\\\" alt=\\\"Five Icons\\\" />\\n\\n<hr/>\\n\\n### Compiling and installing any open source iPhone apps\\n\\nNo $99 developer license required. One example is the [Last.FM](https://github.com/c99koder/lastfm-iphone) app, which is open source, but not available in NZ or HK iTunes stores.\\nHere's a decent list of some other [open source iPhone apps](https://maniacdev.com/2010/06/35-open-source-iphone-app-store-apps-updated-with-10-new-apps/).\\n\\n<hr/>\\n\\n### Script anything\\n\\nFinally, and perhaps most importantly, it's just awesome to be able to script the phone to do whatever I want.\\nFor example, I can make the iPhone [change the wallpaper every 30 minutes](__GHOST_URL__/2011/07/20/automatically-change-iphone-wallpaper-every-30-minutes/), [show my prepaid balance in the status bar](__GHOST_URL__/2010/12/26/ios-tweak-replace-operator-with-current-prepaid-balance/), or [scroll up and down a page when it tilts](https://github.com/ndbroadbent/quickscrollplus).\\n\\n## Conclusion\\n\\nJailbroken iPhones FTW.\\n\\nPlease leave a comment if you have any tips to share!\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>There was a post on the front page of <a href=\"https://news.ycombinator.com/\">Hacker News</a> recently, titled \"<a href=\"https://raphaelcaixeta.com/blog/2012/07/09/making-chrome-better-on-ios/\">Making Chrome better on iOS</a>\". Google's Chrome browser is now available on iOS, and the author of the article was talking about how app developers could be persuaded to add some code to their apps which would allow Chrome to open links.</p>\n<p>Restrictions like this (not being able to change your default browser) are one of the many reasons why I wouldn't buy another iPhone if it couldn't be jailbroken.<br>\nIt also seems strange that 'Hacker News' readers don't appear to be very excited about 'hacking' the incredible device in their pockets.</p>\n<p>We don't need to ask developers to support Chrome when we can just change the default browser ourselves:</p>\n<img src=\"__GHOST_URL__/content/images/posts/2012/07/browser_changer.png\" alt=\"Changing Default Browser\">\n<p>You can find the \"<a href=\"https://cydia.saurik.com/package/jp.tom-go.openopera\">Browser Changer</a>\" package on <a href=\"https://cydia.saurik.com/\">Cydia</a>.</p>\n<p><strong>Here's 9 other reasons why a jailbroken iPhone is better than any other mobile device:</strong></p>\n<hr>\n<h3 id=\"grooveshark\">Grooveshark</h3>\n<p>The Grooveshark iPhone app was removed from the App Store, so you can only install it on a jailbroken iPhone through Cydia.</p>\n<img src=\"__GHOST_URL__/content/images/posts/2012/07/grooveshark.png\" alt=\"Grooveshark\">\n<p>The 'Grooveshark Anywhere' plan is required if you want to download unlimited albums and songs to play offline, but it's well worth the $9 per month.<br>\nIt's definitely a replacement for iTunes, so it's no wonder that Apple feels threatened.</p>\n<p><small>Note: I also tried Spotify for a week when it was released to New Zealand, but I found that Grooveshark has a much bigger music collection.</small></p>\n<hr>\n<h3 id=\"ssh\">SSH</h3>\n<p>Having SSH access to your phone opens up a lot of possibilities. For example, I use <a href=\"https://github.com/capistrano/capistrano/wiki/\">capistrano</a> to deploy iPhone apps and Cydia packages while I'm developing them.<br>\nI can also SFTP into the iPhone's filesystem, and use Ubuntu's file browser to copy and paste files.</p>\n<hr>\n<h3 id=\"vlc-media-player\">VLC media player</h3>\n<p>Plays anything you can transfer to your iPhone. Another great app rejected from the App Store.</p>\n<hr>\n<h3 id=\"mobile-terminal\">Mobile Terminal</h3>\n<p>It's pretty neat to have a terminal on your phone, even if I don't use it very often.<br>\nYou never know when you might need to restart or rollback a remote server:</p>\n<img src=\"__GHOST_URL__/content/images/posts/2012/07/terminal.png\" alt=\"Terminal\">\n<hr>\n<h3 id=\"sbsettings\">SBSettings</h3>\n<p>This is an incredibly useful shortcuts menu, displayed by swiping the status bar:</p>\n<img src=\"__GHOST_URL__/content/images/posts/2012/07/sbsettings.png\" alt=\"SBSettings\">\n<p>The AutoLock control is really handy when using the Maps application. I use Maps as the GPS for my car, and I don't want the screen to turn off while I'm driving.</p>\n<hr>\n<h3 id=\"mywi3g-tethering\">MyWi - 3G tethering</h3>\n<p>I bought the MyWi package while using a 3GS. It's pretty expensive at $19.99,<br>\nbut it was a lifesaver when I was living without DSL for a few weeks.<br>\nI'm still using it after getting a 4S, since iOS 5's 'personal hotspot' feature was a bit flaky.<br>\nMyWi is rock-solid, and can display a small icon instead of taking over the entire status bar like the iOS hotspot.</p>\n<hr>\n<h3 id=\"5-columns-for-icons\">5 columns for icons</h3>\n<p>This is just my personal preference, but I like having 5 icons in my dock and home screen.</p>\n<img src=\"__GHOST_URL__/content/images/posts/2012/07/five-icons.png\" alt=\"Five Icons\">\n<hr>\n<h3 id=\"compiling-and-installing-any-open-source-iphone-apps\">Compiling and installing any open source iPhone apps</h3>\n<p>No $99 developer license required. One example is the <a href=\"https://github.com/c99koder/lastfm-iphone\">Last.FM</a> app, which is open source, but not available in NZ or HK iTunes stores.<br>\nHere's a decent list of some other <a href=\"https://maniacdev.com/2010/06/35-open-source-iphone-app-store-apps-updated-with-10-new-apps/\">open source iPhone apps</a>.</p>\n<hr>\n<h3 id=\"script-anything\">Script anything</h3>\n<p>Finally, and perhaps most importantly, it's just awesome to be able to script the phone to do whatever I want.<br>\nFor example, I can make the iPhone <a href=\"__GHOST_URL__/2011/07/20/automatically-change-iphone-wallpaper-every-30-minutes/\">change the wallpaper every 30 minutes</a>, <a href=\"__GHOST_URL__/2010/12/26/ios-tweak-replace-operator-with-current-prepaid-balance/\">show my prepaid balance in the status bar</a>, or <a href=\"https://github.com/ndbroadbent/quickscrollplus\">scroll up and down a page when it tilts</a>.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Jailbroken iPhones FTW.</p>\n<p>Please leave a comment if you have any tips to share!</p>\n",
            "comment_id": "54",
            "plaintext": "There was a post on the front page of Hacker News recently, titled \"Making Chrome better on iOS\". Google's Chrome browser is now available on iOS, and the author of the article was talking about how app developers could be persuaded to add some code to their apps which would allow Chrome to open links.\n\n\nRestrictions like this (not being able to change your default browser) are one of the many reasons why I wouldn't buy another iPhone if it couldn't be jailbroken.\n\nIt also seems strange that 'Hacker News' readers don't appear to be very excited about 'hacking' the incredible device in their pockets.\n\n\nWe don't need to ask developers to support Chrome when we can just change the default browser ourselves:\n\n\n\nYou can find the \"Browser Changer\" package on Cydia.\n\n\nHere's 9 other reasons why a jailbroken iPhone is better than any other mobile device:\n\n\n\n\nGrooveshark\n\n\nThe Grooveshark iPhone app was removed from the App Store, so you can only install it on a jailbroken iPhone through Cydia.\n\n\n\nThe 'Grooveshark Anywhere' plan is required if you want to download unlimited albums and songs to play offline, but it's well worth the $9 per month.\n\nIt's definitely a replacement for iTunes, so it's no wonder that Apple feels threatened.\n\n\nNote: I also tried Spotify for a week when it was released to New Zealand, but I found that Grooveshark has a much bigger music collection.\n\n\n\n\nSSH\n\n\nHaving SSH access to your phone opens up a lot of possibilities. For example, I use capistrano to deploy iPhone apps and Cydia packages while I'm developing them.\n\nI can also SFTP into the iPhone's filesystem, and use Ubuntu's file browser to copy and paste files.\n\n\n\n\nVLC media player\n\n\nPlays anything you can transfer to your iPhone. Another great app rejected from the App Store.\n\n\n\n\nMobile Terminal\n\n\nIt's pretty neat to have a terminal on your phone, even if I don't use it very often.\n\nYou never know when you might need to restart or rollback a remote server:\n\n\n\n\n\nSBSettings\n\n\nThis is an incredibly useful shortcuts menu, displayed by swiping the status bar:\n\n\n\nThe AutoLock control is really handy when using the Maps application. I use Maps as the GPS for my car, and I don't want the screen to turn off while I'm driving.\n\n\n\n\nMyWi - 3G tethering\n\n\nI bought the MyWi package while using a 3GS. It's pretty expensive at $19.99,\n\nbut it was a lifesaver when I was living without DSL for a few weeks.\n\nI'm still using it after getting a 4S, since iOS 5's 'personal hotspot' feature was a bit flaky.\n\nMyWi is rock-solid, and can display a small icon instead of taking over the entire status bar like the iOS hotspot.\n\n\n\n\n5 columns for icons\n\n\nThis is just my personal preference, but I like having 5 icons in my dock and home screen.\n\n\n\n\n\nCompiling and installing any open source iPhone apps\n\n\nNo $99 developer license required. One example is the Last.FM app, which is open source, but not available in NZ or HK iTunes stores.\n\nHere's a decent list of some other open source iPhone apps.\n\n\n\n\nScript anything\n\n\nFinally, and perhaps most importantly, it's just awesome to be able to script the phone to do whatever I want.\n\nFor example, I can make the iPhone change the wallpaper every 30 minutes, show my prepaid balance in the status bar, or scroll up and down a page when it tilts.\n\n\n\nConclusion\n\n\nJailbroken iPhones FTW.\n\n\nPlease leave a comment if you have any tips to share!\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-10-20T00:00:00.000Z",
            "updated_at": "2024-04-19T01:33:03.000Z",
            "published_at": "2011-10-20T18:55:18.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8b8",
            "uuid": "82f8b269-d43b-4824-a753-c60b65ca3ea7",
            "title": "Managing Project Design Assets For Git Repositories: A Simple Solution",
            "slug": "managing-project-design-assets-for-git-repositories",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"When you're creating logos or icons for a project that uses `git`,\\nhave you ever wondered where you should store those `.psd` or `.xcf` files?\\nDo you commit all of your raw design files, or does it put you off that any changes to those files\\nwill bloat your repository?\\n\\nThe following post describes a part of my [SCM Breeze](__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/)\\nproject. If you haven't seen it already, take a look at my [blog post that describes what it can do](__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/).\\n\\nHere were my goals when I set out to find a solution:\\n\\n- I wanted a design directory for each of my projects\\n- I didn't want the design directory to be checked in to the git repository\\n- The design directory needed to be synchronized across all of my machines\\n\\nI decided that I would need to store all of my design files in one place so that they could be easily\\nsynchronized, and I would create symlinks from each project to the root design directory.\\n\\nThe simplest way for me to synchronize files was via my Dropbox account.\\nHowever, if you work with a larger team, you could set up a shared design directory on one\\nof your servers and synchronize it with `rsync`.\\n\\nEither way, here's how you can effectively manage your design assets for git projects:\\n\\n## 1) Install SCM Breeze\\n\\nThis gives you the `design()` function, as well as a bunch of other features that you can [read about here](__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/).\\n\\nTo install, run:\\n\\n```bash\\ngit clone git://github.com/ndbroadbent/scm_breeze.git ~/.scm_breeze\\n~/.scm_breeze/install.sh\\nsource ~/.bashrc # or source ~/.zshrc\\n```\\n\\n## 2) Create and configure a root design directory\\n\\nI created my root design directory at `~/Dropbox/Design`.\\n\\nAfter you've created your root design directory, edit `~/.scmbrc` and set `root_design_dir`\\nto the directory you just created.\\nYou can also configure the design directory that's created in each of your projects\\n(default: `design_assets`), as well as the subdirectories you would like to use.\\nThe default base subdirectories are: Images, Backgrounds, Logos, Icons, Mockups, and Screenshots.\\n\\nAfter you have changed these settings, remember to run `source ~/.bashrc` or `source ~/.zshrc`.\\n\\n## 3) Initialize design directories for your projects\\n\\nTo set up the design directories and symlinks, go to a project's directory and run:\\n\\n```bash\\ndesign init\\n```\\n\\nIf your root directory is `~/Dropbox/Design`, directories will be created at\\n`~/Dropbox/Design/projects/my_project/Backgrounds`, `~/Dropbox/Design/projects/my_project/Icons`, etc.\\n\\nIt will then symlink the project from your root design directory into your project's design directory,\\nso you end up with:\\n\\n- `my_project/design_assets` -> `~/Dropbox/Design/projects/my_project`\\n\\nIt also adds this directory to `.git/info/exclude` so that git ignores it.\\n\\nHere's the awesome part: If you use the SCM Breeze git repository index,\\nyou can run the following batch command to set up these directories for all of your git repos at once:\\n\\n```bash\\ngit_index --batch-cmd design init\\n```\\n\\nIf you want to remove any empty design directories, run:\\n\\n```bash\\ndesign trim\\n```\\n\\nAnd if you want to remove all of a project's design directories, even if they contain files:\\n\\n```bash\\ndesign rm\\n```\\n\\n## 4) Link existing design directories into your projects\\n\\nIf you've set up your design directories on one machine, you'll want them\\nto be synchronized across all of your other development machines.\\n\\nJust run the following command on your other machines after following steps 1 and 2:\\n\\n```bash\\ndesign link\\n```\\n\\nThis uses your git index (from SCM Breeze) to figure out where to create the symlinks.\\nIf you don't use the git index, the same outcome could be achieved by running 'design init'\\nfor each of the projects.\\n\\n## Enjoy!\\n\\nPlease leave a comment on this blog post if you have any questions.\\nIf you find a bug, or it doesn't work quite right on your operating system,\\n[please raise an issue on Github](https://github.com/ndbroadbent/scm_breeze/issues).\\n\\n## Shameless Dropbox Referral\\n\\nIf you don't already use Dropbox, [click here to sign up!](https://db.tt/hN3mN1W) It's an awesome service!\\nAnd if you sign up via that referral link, you'll be giving me a little extra free space :)\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>When you're creating logos or icons for a project that uses <code>git</code>,<br>\nhave you ever wondered where you should store those <code>.psd</code> or <code>.xcf</code> files?<br>\nDo you commit all of your raw design files, or does it put you off that any changes to those files<br>\nwill bloat your repository?</p>\n<p>The following post describes a part of my <a href=\"__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/\">SCM Breeze</a><br>\nproject. If you haven't seen it already, take a look at my <a href=\"__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/\">blog post that describes what it can do</a>.</p>\n<p>Here were my goals when I set out to find a solution:</p>\n<ul>\n<li>I wanted a design directory for each of my projects</li>\n<li>I didn't want the design directory to be checked in to the git repository</li>\n<li>The design directory needed to be synchronized across all of my machines</li>\n</ul>\n<p>I decided that I would need to store all of my design files in one place so that they could be easily<br>\nsynchronized, and I would create symlinks from each project to the root design directory.</p>\n<p>The simplest way for me to synchronize files was via my Dropbox account.<br>\nHowever, if you work with a larger team, you could set up a shared design directory on one<br>\nof your servers and synchronize it with <code>rsync</code>.</p>\n<p>Either way, here's how you can effectively manage your design assets for git projects:</p>\n<h2 id=\"1-install-scm-breeze\">1) Install SCM Breeze</h2>\n<p>This gives you the <code>design()</code> function, as well as a bunch of other features that you can <a href=\"__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/\">read about here</a>.</p>\n<p>To install, run:</p>\n<pre><code class=\"language-bash\">git clone git://github.com/ndbroadbent/scm_breeze.git ~/.scm_breeze\n~/.scm_breeze/install.sh\nsource ~/.bashrc # or source ~/.zshrc\n</code></pre>\n<h2 id=\"2-create-and-configure-a-root-design-directory\">2) Create and configure a root design directory</h2>\n<p>I created my root design directory at <code>~/Dropbox/Design</code>.</p>\n<p>After you've created your root design directory, edit <code>~/.scmbrc</code> and set <code>root_design_dir</code><br>\nto the directory you just created.<br>\nYou can also configure the design directory that's created in each of your projects<br>\n(default: <code>design_assets</code>), as well as the subdirectories you would like to use.<br>\nThe default base subdirectories are: Images, Backgrounds, Logos, Icons, Mockups, and Screenshots.</p>\n<p>After you have changed these settings, remember to run <code>source ~/.bashrc</code> or <code>source ~/.zshrc</code>.</p>\n<h2 id=\"3-initialize-design-directories-for-your-projects\">3) Initialize design directories for your projects</h2>\n<p>To set up the design directories and symlinks, go to a project's directory and run:</p>\n<pre><code class=\"language-bash\">design init\n</code></pre>\n<p>If your root directory is <code>~/Dropbox/Design</code>, directories will be created at<br>\n<code>~/Dropbox/Design/projects/my_project/Backgrounds</code>, <code>~/Dropbox/Design/projects/my_project/Icons</code>, etc.</p>\n<p>It will then symlink the project from your root design directory into your project's design directory,<br>\nso you end up with:</p>\n<ul>\n<li><code>my_project/design_assets</code> -&gt; <code>~/Dropbox/Design/projects/my_project</code></li>\n</ul>\n<p>It also adds this directory to <code>.git/info/exclude</code> so that git ignores it.</p>\n<p>Here's the awesome part: If you use the SCM Breeze git repository index,<br>\nyou can run the following batch command to set up these directories for all of your git repos at once:</p>\n<pre><code class=\"language-bash\">git_index --batch-cmd design init\n</code></pre>\n<p>If you want to remove any empty design directories, run:</p>\n<pre><code class=\"language-bash\">design trim\n</code></pre>\n<p>And if you want to remove all of a project's design directories, even if they contain files:</p>\n<pre><code class=\"language-bash\">design rm\n</code></pre>\n<h2 id=\"4-link-existing-design-directories-into-your-projects\">4) Link existing design directories into your projects</h2>\n<p>If you've set up your design directories on one machine, you'll want them<br>\nto be synchronized across all of your other development machines.</p>\n<p>Just run the following command on your other machines after following steps 1 and 2:</p>\n<pre><code class=\"language-bash\">design link\n</code></pre>\n<p>This uses your git index (from SCM Breeze) to figure out where to create the symlinks.<br>\nIf you don't use the git index, the same outcome could be achieved by running 'design init'<br>\nfor each of the projects.</p>\n<h2 id=\"enjoy\">Enjoy!</h2>\n<p>Please leave a comment on this blog post if you have any questions.<br>\nIf you find a bug, or it doesn't work quite right on your operating system,<br>\n<a href=\"https://github.com/ndbroadbent/scm_breeze/issues\">please raise an issue on Github</a>.</p>\n<h2 id=\"shameless-dropbox-referral\">Shameless Dropbox Referral</h2>\n<p>If you don't already use Dropbox, <a href=\"https://db.tt/hN3mN1W\">click here to sign up!</a> It's an awesome service!<br>\nAnd if you sign up via that referral link, you'll be giving me a little extra free space :)</p>\n",
            "comment_id": "55",
            "plaintext": "When you're creating logos or icons for a project that uses git,\n\nhave you ever wondered where you should store those .psd or .xcf files?\n\nDo you commit all of your raw design files, or does it put you off that any changes to those files\n\nwill bloat your repository?\n\n\nThe following post describes a part of my SCM Breeze\n\nproject. If you haven't seen it already, take a look at my blog post that describes what it can do.\n\n\nHere were my goals when I set out to find a solution:\n\n\n * I wanted a design directory for each of my projects\n * I didn't want the design directory to be checked in to the git repository\n * The design directory needed to be synchronized across all of my machines\n\n\nI decided that I would need to store all of my design files in one place so that they could be easily\n\nsynchronized, and I would create symlinks from each project to the root design directory.\n\n\nThe simplest way for me to synchronize files was via my Dropbox account.\n\nHowever, if you work with a larger team, you could set up a shared design directory on one\n\nof your servers and synchronize it with rsync.\n\n\nEither way, here's how you can effectively manage your design assets for git projects:\n\n\n\n1) Install SCM Breeze\n\n\nThis gives you the design() function, as well as a bunch of other features that you can read about here.\n\n\nTo install, run:\n\n\ngit clone git://github.com/ndbroadbent/scm_breeze.git ~/.scm_breeze\n~/.scm_breeze/install.sh\nsource ~/.bashrc # or source ~/.zshrc\n\n\n\n\n2) Create and configure a root design directory\n\n\nI created my root design directory at ~/Dropbox/Design.\n\n\nAfter you've created your root design directory, edit ~/.scmbrc and set root_design_dir\n\nto the directory you just created.\n\nYou can also configure the design directory that's created in each of your projects\n\n(default: design_assets), as well as the subdirectories you would like to use.\n\nThe default base subdirectories are: Images, Backgrounds, Logos, Icons, Mockups, and Screenshots.\n\n\nAfter you have changed these settings, remember to run source ~/.bashrc or source ~/.zshrc.\n\n\n\n3) Initialize design directories for your projects\n\n\nTo set up the design directories and symlinks, go to a project's directory and run:\n\n\ndesign init\n\n\n\nIf your root directory is ~/Dropbox/Design, directories will be created at\n\n~/Dropbox/Design/projects/my_project/Backgrounds, ~/Dropbox/Design/projects/my_project/Icons, etc.\n\n\nIt will then symlink the project from your root design directory into your project's design directory,\n\nso you end up with:\n\n\n * my_project/design_assets -> ~/Dropbox/Design/projects/my_project\n\n\nIt also adds this directory to .git/info/exclude so that git ignores it.\n\n\nHere's the awesome part: If you use the SCM Breeze git repository index,\n\nyou can run the following batch command to set up these directories for all of your git repos at once:\n\n\ngit_index --batch-cmd design init\n\n\n\nIf you want to remove any empty design directories, run:\n\n\ndesign trim\n\n\n\nAnd if you want to remove all of a project's design directories, even if they contain files:\n\n\ndesign rm\n\n\n\n\n4) Link existing design directories into your projects\n\n\nIf you've set up your design directories on one machine, you'll want them\n\nto be synchronized across all of your other development machines.\n\n\nJust run the following command on your other machines after following steps 1 and 2:\n\n\ndesign link\n\n\n\nThis uses your git index (from SCM Breeze) to figure out where to create the symlinks.\n\nIf you don't use the git index, the same outcome could be achieved by running 'design init'\n\nfor each of the projects.\n\n\n\nEnjoy!\n\n\nPlease leave a comment on this blog post if you have any questions.\n\nIf you find a bug, or it doesn't work quite right on your operating system,\n\nplease raise an issue on Github.\n\n\n\nShameless Dropbox Referral\n\n\nIf you don't already use Dropbox, click here to sign up! It's an awesome service!\n\nAnd if you sign up via that referral link, you'll be giving me a little extra free space :)\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-10-21T00:00:00.000Z",
            "updated_at": "2024-04-19T01:32:13.000Z",
            "published_at": "2011-10-21T23:25:47.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8b9",
            "uuid": "9ec729ee-042d-4d81-b088-83e98844fa64",
            "title": "Testing Multiple Databases for a Rails app on Travis CI",
            "slug": "testing-multiple-databases-for-a-rails-app-on-travis-ci",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"I'm currently doing a lot of work on an open source Ruby on Rails project called [Fat Free CRM](https://fatfreecrm.com/).\\nThe code is hosted on [github](https://github.com/fatfreecrm/fat_free_crm), and we are using the amazing continuous integration\\nservice provided by [Travis CI](https://travis-ci.org/#!/fatfreecrm/fat_free_crm).\\n\\n[Find out more about Travis CI here.](https://about.travis-ci.org/)\\n\\nWe've been working on some powerful features for Fat Free CRM, such as dynamic custom fields,\\nand we wanted to make sure that they work across all of our supported databases.\\nSo here's how I set up our Travis CI build matrix to test multiple databases,\\nwith some help from the [Travis docs](https://about.travis-ci.org/docs/user/database-setup/):\\n\\n### .travis.yml\\n\\nWe add the databases to our build matrix by setting ENV variables. Add the following lines to your `.travis.yml`:\\n\\n```ruby\\nenv:\\n\\n- DB=mysql\\n- DB=postgres\\n- DB=sqlite\\n```\\n\\n### Database configuration\\n\\nWe package multiple example database configurations for each of our supported databases, like this:\\n\\n- `config/database.mysql.yml`\\n- `config/database.postgres.yml`\\n- `config/database.sqlite.yml`\\n\\nWe also have a rake task that is a prequisite for the `spec` task, and this sets up the example configuration files for Travis.\\n\\nIt copies the `database.yml` template specified by our `DB` variable, using postgres as the default.\\n\\n```ruby\\nFileUtils.cp \\\"config/database.#{ENV['DB'] || 'postgres'}.yml\\\", 'config/database.yml'\\n```\\n\\n### Gemfile.ci\\n\\nI created a new Gemfile for CI. It simply tells bundler to use the gem specified by our `DB` variable,\\nprevents any other database gems from being loaded, and then loads the 'real' Gemfile.\\n\\nHere's the contents of `Gemfile.ci`:\\n\\n```ruby\\ncase ENV['DB']\\nwhen \\\"mysql\\\"; gem \\\"mysql2\\\", \\\"0.3.10\\\"\\nwhen \\\"sqlite\\\"; gem \\\"sqlite3\\\"\\nwhen \\\"postgres\\\"; gem \\\"pg\\\", \\\">= 0.9.0\\\"\\nend\\n\\ndef gem(\\\\*args)\\n\\n# Override 'gem' method to block any other database gems in the 'real' Gemfile\\n\\nsuper unless %w(pg sqlite3 mysql2).include?(args.first)\\nend\\n\\n# Eval Gemfile\\n\\neval(IO.read(File.join(File.dirname(**FILE**), 'Gemfile')), binding)\\n```\\n\\nThat's all there is to it.\\n\\n---\\n\\nThis is a slightly unrelated topic, but I had a lot of trouble getting our new `Gemfile.ci` to work properly.\\nAfter a serious headache, I figured out that we hadn't updated `config/boot.rb`\\nto the latest version after our upgrade.\\nThis new `boot.rb` had a very subtle difference, and contained the following line:\\n\\n```ruby\\nENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', **FILE**)\\n```\\n\\ninstead of:\\n\\n```ruby\\nENV['BUNDLE_GEMFILE'] = gemfile\\n```\\n\\nNotice the `||=`, which meant that the `BUNDLE_GEMFILE` variable could actually have an effect when it was set by Travis.\\n\\nYou might have found this post if you are googling for `Could not find multi_json-1.0.3 in any of the sources`, which is\\nthe symptom that I was experiencing (due to an updated gem and an outdated `Gemfile.lock`).\\nIn that case, you may need to update your `config/boot.rb` to [the latest version from Rails](https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/app/templates/config/boot.rb).\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I'm currently doing a lot of work on an open source Ruby on Rails project called <a href=\"https://fatfreecrm.com/\">Fat Free CRM</a>.<br>\nThe code is hosted on <a href=\"https://github.com/fatfreecrm/fat_free_crm\">github</a>, and we are using the amazing continuous integration<br>\nservice provided by <a href=\"https://travis-ci.org/#!/fatfreecrm/fat_free_crm\">Travis CI</a>.</p>\n<p><a href=\"https://about.travis-ci.org/\">Find out more about Travis CI here.</a></p>\n<p>We've been working on some powerful features for Fat Free CRM, such as dynamic custom fields,<br>\nand we wanted to make sure that they work across all of our supported databases.<br>\nSo here's how I set up our Travis CI build matrix to test multiple databases,<br>\nwith some help from the <a href=\"https://about.travis-ci.org/docs/user/database-setup/\">Travis docs</a>:</p>\n<h3 id=\"travisyml\">.travis.yml</h3>\n<p>We add the databases to our build matrix by setting ENV variables. Add the following lines to your <code>.travis.yml</code>:</p>\n<pre><code class=\"language-ruby\">env:\n\n- DB=mysql\n- DB=postgres\n- DB=sqlite\n</code></pre>\n<h3 id=\"database-configuration\">Database configuration</h3>\n<p>We package multiple example database configurations for each of our supported databases, like this:</p>\n<ul>\n<li><code>config/database.mysql.yml</code></li>\n<li><code>config/database.postgres.yml</code></li>\n<li><code>config/database.sqlite.yml</code></li>\n</ul>\n<p>We also have a rake task that is a prequisite for the <code>spec</code> task, and this sets up the example configuration files for Travis.</p>\n<p>It copies the <code>database.yml</code> template specified by our <code>DB</code> variable, using postgres as the default.</p>\n<pre><code class=\"language-ruby\">FileUtils.cp \"config/database.#{ENV['DB'] || 'postgres'}.yml\", 'config/database.yml'\n</code></pre>\n<h3 id=\"gemfileci\">Gemfile.ci</h3>\n<p>I created a new Gemfile for CI. It simply tells bundler to use the gem specified by our <code>DB</code> variable,<br>\nprevents any other database gems from being loaded, and then loads the 'real' Gemfile.</p>\n<p>Here's the contents of <code>Gemfile.ci</code>:</p>\n<pre><code class=\"language-ruby\">case ENV['DB']\nwhen \"mysql\"; gem \"mysql2\", \"0.3.10\"\nwhen \"sqlite\"; gem \"sqlite3\"\nwhen \"postgres\"; gem \"pg\", \"&gt;= 0.9.0\"\nend\n\ndef gem(\\*args)\n\n# Override 'gem' method to block any other database gems in the 'real' Gemfile\n\nsuper unless %w(pg sqlite3 mysql2).include?(args.first)\nend\n\n# Eval Gemfile\n\neval(IO.read(File.join(File.dirname(**FILE**), 'Gemfile')), binding)\n</code></pre>\n<p>That's all there is to it.</p>\n<hr>\n<p>This is a slightly unrelated topic, but I had a lot of trouble getting our new <code>Gemfile.ci</code> to work properly.<br>\nAfter a serious headache, I figured out that we hadn't updated <code>config/boot.rb</code><br>\nto the latest version after our upgrade.<br>\nThis new <code>boot.rb</code> had a very subtle difference, and contained the following line:</p>\n<pre><code class=\"language-ruby\">ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', **FILE**)\n</code></pre>\n<p>instead of:</p>\n<pre><code class=\"language-ruby\">ENV['BUNDLE_GEMFILE'] = gemfile\n</code></pre>\n<p>Notice the <code>||=</code>, which meant that the <code>BUNDLE_GEMFILE</code> variable could actually have an effect when it was set by Travis.</p>\n<p>You might have found this post if you are googling for <code>Could not find multi_json-1.0.3 in any of the sources</code>, which is<br>\nthe symptom that I was experiencing (due to an updated gem and an outdated <code>Gemfile.lock</code>).<br>\nIn that case, you may need to update your <code>config/boot.rb</code> to <a href=\"https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/app/templates/config/boot.rb\">the latest version from Rails</a>.</p>\n",
            "comment_id": "56",
            "plaintext": "I'm currently doing a lot of work on an open source Ruby on Rails project called Fat Free CRM.\n\nThe code is hosted on github, and we are using the amazing continuous integration\n\nservice provided by Travis CI.\n\n\nFind out more about Travis CI here.\n\n\nWe've been working on some powerful features for Fat Free CRM, such as dynamic custom fields,\n\nand we wanted to make sure that they work across all of our supported databases.\n\nSo here's how I set up our Travis CI build matrix to test multiple databases,\n\nwith some help from the Travis docs:\n\n\n\n.travis.yml\n\n\nWe add the databases to our build matrix by setting ENV variables. Add the following lines to your .travis.yml:\n\n\nenv:\n\n- DB=mysql\n- DB=postgres\n- DB=sqlite\n\n\n\n\nDatabase configuration\n\n\nWe package multiple example database configurations for each of our supported databases, like this:\n\n\n * config/database.mysql.yml\n * config/database.postgres.yml\n * config/database.sqlite.yml\n\n\nWe also have a rake task that is a prequisite for the spec task, and this sets up the example configuration files for Travis.\n\n\nIt copies the database.yml template specified by our DB variable, using postgres as the default.\n\n\nFileUtils.cp \"config/database.#{ENV['DB'] || 'postgres'}.yml\", 'config/database.yml'\n\n\n\n\nGemfile.ci\n\n\nI created a new Gemfile for CI. It simply tells bundler to use the gem specified by our DB variable,\n\nprevents any other database gems from being loaded, and then loads the 'real' Gemfile.\n\n\nHere's the contents of Gemfile.ci:\n\n\ncase ENV['DB']\nwhen \"mysql\"; gem \"mysql2\", \"0.3.10\"\nwhen \"sqlite\"; gem \"sqlite3\"\nwhen \"postgres\"; gem \"pg\", \">= 0.9.0\"\nend\n\ndef gem(\\*args)\n\n# Override 'gem' method to block any other database gems in the 'real' Gemfile\n\nsuper unless %w(pg sqlite3 mysql2).include?(args.first)\nend\n\n# Eval Gemfile\n\neval(IO.read(File.join(File.dirname(**FILE**), 'Gemfile')), binding)\n\n\n\nThat's all there is to it.\n\n\n\nThis is a slightly unrelated topic, but I had a lot of trouble getting our new Gemfile.ci to work properly.\n\nAfter a serious headache, I figured out that we hadn't updated config/boot.rb\n\nto the latest version after our upgrade.\n\nThis new boot.rb had a very subtle difference, and contained the following line:\n\n\nENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', **FILE**)\n\n\n\ninstead of:\n\n\nENV['BUNDLE_GEMFILE'] = gemfile\n\n\n\nNotice the ||=, which meant that the BUNDLE_GEMFILE variable could actually have an effect when it was set by Travis.\n\n\nYou might have found this post if you are googling for Could not find multi_json-1.0.3 in any of the sources, which is\n\nthe symptom that I was experiencing (due to an updated gem and an outdated Gemfile.lock).\n\nIn that case, you may need to update your config/boot.rb to the latest version from Rails.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2011-12-13T00:00:00.000Z",
            "updated_at": "2024-04-19T01:31:38.000Z",
            "published_at": "2011-12-13T23:12:50.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8ba",
            "uuid": "e687a04e-0455-4bda-99c0-e279fc801168",
            "title": "Travis CI Status in Shell Prompt",
            "slug": "travis-ci-status-in-shell-prompt",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"### Update:\\n\\nI've updated the build status checking script, because updating all branches was taking too long (over 20 minutes.)\\nNow it performs frequent updates for the current branch, and only periodic updates for all branches.\\n\\n---\\n\\n[Travis CI](https://travis-ci.org/) is a distributed [continuous integration](https://en.wikipedia.org/wiki/Continuous_integration) service for the open source community, and it can be used with any of your public projects on [GitHub](https://github.com/). You've probably seen some 'build status' badges on GitHub repos.\\n\\nWouldn't it be cool if you could see that build status in your shell prompt whenever you are working on a project?\\n\\nHere's what my shell prompt looks like now:\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2012/01/travis_ci_prompt.png\\\" alt=\\\"Travis CI status in prompt\\\" />\\n\\nThis shows the build status for the current branch.\\n\\n---\\n\\nYou will need to cache the build status, since looking it up takes a few seconds.\\n\\nYou should use my fork of [mislav's](https://github.com/mislav) `travis-ci` script, which can check the build status of a project. Make sure `~/bin` is in your `PATH`, and if you are using RVM, make sure you are using your default ruby.\\n\\nRun the following to install it:\\n\\n```bash\\nmkdir -p ~/bin/\\ncurl -sL https://raw.github.com/gist/1708408/travis.rb > ~/bin/travis-ci \\\\\\n && chmod +x ~/bin/travis-ci\\n\\ngem install hub | tail -2\\nruby -e 'require \\\"json\\\"' 2>/dev/null || gem install json\\n```\\n\\nNext, we need to update the cached status.\\nThe following code is included as part of my [SCM Breeze project](__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/), but feel free to save the `update_travis_ci_status` script <a href=\\\"#update_travis_ci_status\\\">at the bottom of this post [1]</a> to `/usr/bin/update_travis_ci_status`.\\n\\nWe will also need a way to run this update task every few minutes, across all of our local git repos.\\nWe only want to frequently update the status for the currently checked out branch, and periodically update the status for all branches.\\n\\nThe [SCM Breeze project](__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/) also maintains an index of your git repositories, which gives you the ability to run batch commands via the `git_index` function.\\nSo the build status update can be easily set up as a cron task:\\n\\n```text\\n_/5 _ \\\\* \\\\* _ /bin/bash -c '. $HOME/.bashrc && git_index --rebuild && git_index --batch-cmd update_travis_ci_status'\\n_/45 \\\\* \\\\* \\\\* \\\\* /bin/bash -c '. $HOME/.bashrc && git_index --rebuild && export UPDATE_ALL_BRANCHES=true && git_index --batch-cmd update_travis_ci_status'\\n```\\n\\nAlternatively, you could save the following script to `/usr/bin/update_all_travis_ci_statuses`.\\n\\n```bash\\n#!/bin/bash\\n\\n# (Replace `$HOME/code` with the location of your projects)\\n\\nfor f in find \\\"$HOME/code\\\" -maxdepth 4 -name .travis.yml; do\\n  (builtin cd \\\"$(dirname $f)\\\" && update_travis_ci_status)\\ndone\\n```\\n\\n... and use the following cron task:\\n\\n```text\\n_/5 _ \\\\* \\\\* _ /bin/bash -c '. $HOME/.bashrc && /usr/bin/update_all_travis_ci_statuses'\\n_/45 \\\\* \\\\* \\\\* \\\\* /bin/bash -c '. $HOME/.bashrc && export UPDATE_ALL_BRANCHES=true && /usr/bin/update_all_travis_ci_statuses'\\n```\\n\\n(you need to source your `.bashrc` if your default ruby comes from RVM)\\n\\nFinally, you need a way to display the cached status in your prompt.\\n\\nHere are the functions I use to return a colored pass / fail / running symbol:\\n\\n```bash\\n\\n# Returns the Travis CI status for a github project\\n\\nparse_travis_status() {\\nlocal branch=\\\"$1\\\"\\n  if [ -z \\\"$branch\\\" ]; then branch=\\\"master\\\"; fi\\n\\nlocal stat_file=$(find_in_cwd_or_parent \\\".travis_status~\\\")\\n  if [ -e \\\"$stat_file\\\" ]; then\\ncase \\\"$(grep -m 1 \\\"^$branch \\\" \\\"$stat_file\\\")\\\" in\\n*passed) echo \\\"\\\\[\\\\e[01;32m\\\\]✔ \\\";; # green\\n*failed) echo \\\"\\\\[\\\\e[01;31m\\\\]✘ \\\";; # red\\n\\\\*running) echo \\\"\\\\[\\\\e[01;33m\\\\]⁇ \\\";; # yellow\\nesac\\nfi\\n}\\n\\n# Test whether file exists in current or parent directories\\n\\nfind_in_cwd_or_parent() {\\nlocal slashes=${PWD//[^\\\\/]/}; local directory=$PWD;\\nfor (( n=${#slashes}; n>0; --n )); do\\n    test -e $directory/$1 && echo \\\"$directory/$1\\\" && return 0\\n    directory=$directory/..\\ndone\\nreturn 1\\n}\\n```\\n\\n(it also works if you are in a project's sub-directory.)\\n\\nFinally, add `$(parse_travis_status \\\"$current_branch\\\")` somewhere in your `$PS1`. You should set the `$current_branch` variable to the current git branch, but it defaults to the `master` branch if you leave it blank.\\n\\nYou may like to have a look at the [prompt section of my dotfiles](https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/prompt.sh), to see how I do it.\\n\\nEnjoy! Please let me know if you have any questions, or need some help.\\n\\n---\\n\\n<a name=\\\"update_travis_ci_status\\\">[1]</a> `update_travis_ci_status` script:\\n\\n```bash\\n#!/bin/bash\\nif [ -e \\\".travis.yml\\\" ]; then\\nif type ruby > /dev/null 2>&1 && type travis-ci > /dev/null 2>&1; then\\nlocal stat_file=\\\".travis_status~\\\"\\nlocal tmp_stat_file=\\\"$stat_file\\\"\\\".tmp\\\"\\n\\n    # Either update all branches, or only current branch\\n    if [ \\\"$UPDATE_ALL_BRANCHES\\\" = \\\"true\\\" ]; then\\n      local all_branches=$(\\\\git branch -a)\\n      # All branches on origin remote that have local copies\\n      local branches=$(comm -12 <(echo \\\"$all_branches\\\" | \\\\\\n                                  sed \\\"s/ *remotes\\\\/origin\\\\///;tm;d;:m;/^HEAD/d;\\\" | sort) \\\\\\n                                <(echo \\\"$all_branches\\\" | \\\\\\n                                  sed \\\"/ *remotes\\\\//d;s/^[\\\\* ]*//\\\" | sort))\\n      # Create a new, blank temp file\\n      echo -n > \\\"$tmp_stat_file\\\"\\n    else\\n      # Only current branch\\n      local branches=\\\"$(\\\\git branch 2> /dev/null | sed \\\"s/^\\\\* \\\\([^ ]*\\\\)/\\\\1/;tm;d;:m\\\")\\\"\\n      # Copy current file to temp file\\n      touch \\\"$stat_file\\\"\\n      cp -f \\\"$stat_file\\\" \\\"$tmp_stat_file\\\"\\n    fi\\n\\n    for branch in $branches; do\\n      local travis_output=$(travis-ci \\\"$branch\\\" 2>&1)\\n      local status=\\\"\\\"\\n      case \\\"$travis_output\\\" in\\n      *built\\\\ OK*)    status=\\\"passed\\\";;\\n      *failed*)       status=\\\"failed\\\";;\\n      *in\\\\ progress*) status=\\\"running\\\";;\\n      esac\\n\\n      # If branch has a build status\\n      if [ -n \\\"$status\\\" ]; then\\n        if grep -q \\\"^$branch\\\" \\\"$tmp_stat_file\\\"; then\\n          # Replace branch's build status\\n          sed -e \\\"s/^$branch .*/$branch $status/\\\" -i \\\"$tmp_stat_file\\\"\\n        else\\n          # Append new line for branch\\n          echo \\\"$branch $status\\\" >> \\\"$tmp_stat_file\\\"\\n        fi\\n      fi\\n    done\\n\\n    # Replace current stat file with finished update\\n    mv -f \\\"$tmp_stat_file\\\" \\\"$stat_file\\\"\\n    # Ignore status file from git repo\\n    if ! ([ -e .git/info/exclude ] && grep -q \\\"$stat_file\\\" .git/info/exclude); then\\n      echo \\\"$stat_file\\\" >> .git/info/exclude\\n    fi\\n\\nfi\\nfi\\n```\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<h3 id=\"update\">Update:</h3>\n<p>I've updated the build status checking script, because updating all branches was taking too long (over 20 minutes.)<br>\nNow it performs frequent updates for the current branch, and only periodic updates for all branches.</p>\n<hr>\n<p><a href=\"https://travis-ci.org/\">Travis CI</a> is a distributed <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">continuous integration</a> service for the open source community, and it can be used with any of your public projects on <a href=\"https://github.com/\">GitHub</a>. You've probably seen some 'build status' badges on GitHub repos.</p>\n<p>Wouldn't it be cool if you could see that build status in your shell prompt whenever you are working on a project?</p>\n<p>Here's what my shell prompt looks like now:</p>\n<img src=\"__GHOST_URL__/content/images/posts/2012/01/travis_ci_prompt.png\" alt=\"Travis CI status in prompt\">\n<p>This shows the build status for the current branch.</p>\n<hr>\n<p>You will need to cache the build status, since looking it up takes a few seconds.</p>\n<p>You should use my fork of <a href=\"https://github.com/mislav\">mislav's</a> <code>travis-ci</code> script, which can check the build status of a project. Make sure <code>~/bin</code> is in your <code>PATH</code>, and if you are using RVM, make sure you are using your default ruby.</p>\n<p>Run the following to install it:</p>\n<pre><code class=\"language-bash\">mkdir -p ~/bin/\ncurl -sL https://raw.github.com/gist/1708408/travis.rb &gt; ~/bin/travis-ci \\\n &amp;&amp; chmod +x ~/bin/travis-ci\n\ngem install hub | tail -2\nruby -e 'require \"json\"' 2&gt;/dev/null || gem install json\n</code></pre>\n<p>Next, we need to update the cached status.<br>\nThe following code is included as part of my <a href=\"__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/\">SCM Breeze project</a>, but feel free to save the <code>update_travis_ci_status</code> script <a href=\"#update_travis_ci_status\">at the bottom of this post [1]</a> to <code>/usr/bin/update_travis_ci_status</code>.</p>\n<p>We will also need a way to run this update task every few minutes, across all of our local git repos.<br>\nWe only want to frequently update the status for the currently checked out branch, and periodically update the status for all branches.</p>\n<p>The <a href=\"__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/\">SCM Breeze project</a> also maintains an index of your git repositories, which gives you the ability to run batch commands via the <code>git_index</code> function.<br>\nSo the build status update can be easily set up as a cron task:</p>\n<pre><code class=\"language-text\">_/5 _ \\* \\* _ /bin/bash -c '. $HOME/.bashrc &amp;&amp; git_index --rebuild &amp;&amp; git_index --batch-cmd update_travis_ci_status'\n_/45 \\* \\* \\* \\* /bin/bash -c '. $HOME/.bashrc &amp;&amp; git_index --rebuild &amp;&amp; export UPDATE_ALL_BRANCHES=true &amp;&amp; git_index --batch-cmd update_travis_ci_status'\n</code></pre>\n<p>Alternatively, you could save the following script to <code>/usr/bin/update_all_travis_ci_statuses</code>.</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\n# (Replace `$HOME/code` with the location of your projects)\n\nfor f in find \"$HOME/code\" -maxdepth 4 -name .travis.yml; do\n  (builtin cd \"$(dirname $f)\" &amp;&amp; update_travis_ci_status)\ndone\n</code></pre>\n<p>... and use the following cron task:</p>\n<pre><code class=\"language-text\">_/5 _ \\* \\* _ /bin/bash -c '. $HOME/.bashrc &amp;&amp; /usr/bin/update_all_travis_ci_statuses'\n_/45 \\* \\* \\* \\* /bin/bash -c '. $HOME/.bashrc &amp;&amp; export UPDATE_ALL_BRANCHES=true &amp;&amp; /usr/bin/update_all_travis_ci_statuses'\n</code></pre>\n<p>(you need to source your <code>.bashrc</code> if your default ruby comes from RVM)</p>\n<p>Finally, you need a way to display the cached status in your prompt.</p>\n<p>Here are the functions I use to return a colored pass / fail / running symbol:</p>\n<pre><code class=\"language-bash\">\n# Returns the Travis CI status for a github project\n\nparse_travis_status() {\nlocal branch=\"$1\"\n  if [ -z \"$branch\" ]; then branch=\"master\"; fi\n\nlocal stat_file=$(find_in_cwd_or_parent \".travis_status~\")\n  if [ -e \"$stat_file\" ]; then\ncase \"$(grep -m 1 \"^$branch \" \"$stat_file\")\" in\n*passed) echo \"\\[\\e[01;32m\\]✔ \";; # green\n*failed) echo \"\\[\\e[01;31m\\]✘ \";; # red\n\\*running) echo \"\\[\\e[01;33m\\]⁇ \";; # yellow\nesac\nfi\n}\n\n# Test whether file exists in current or parent directories\n\nfind_in_cwd_or_parent() {\nlocal slashes=${PWD//[^\\/]/}; local directory=$PWD;\nfor (( n=${#slashes}; n&gt;0; --n )); do\n    test -e $directory/$1 &amp;&amp; echo \"$directory/$1\" &amp;&amp; return 0\n    directory=$directory/..\ndone\nreturn 1\n}\n</code></pre>\n<p>(it also works if you are in a project's sub-directory.)</p>\n<p>Finally, add <code>$(parse_travis_status \"$current_branch\")</code> somewhere in your <code>$PS1</code>. You should set the <code>$current_branch</code> variable to the current git branch, but it defaults to the <code>master</code> branch if you leave it blank.</p>\n<p>You may like to have a look at the <a href=\"https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/prompt.sh\">prompt section of my dotfiles</a>, to see how I do it.</p>\n<p>Enjoy! Please let me know if you have any questions, or need some help.</p>\n<hr>\n<p><a name=\"update_travis_ci_status\">[1]</a> <code>update_travis_ci_status</code> script:</p>\n<pre><code class=\"language-bash\">#!/bin/bash\nif [ -e \".travis.yml\" ]; then\nif type ruby &gt; /dev/null 2&gt;&amp;1 &amp;&amp; type travis-ci &gt; /dev/null 2&gt;&amp;1; then\nlocal stat_file=\".travis_status~\"\nlocal tmp_stat_file=\"$stat_file\"\".tmp\"\n\n    # Either update all branches, or only current branch\n    if [ \"$UPDATE_ALL_BRANCHES\" = \"true\" ]; then\n      local all_branches=$(\\git branch -a)\n      # All branches on origin remote that have local copies\n      local branches=$(comm -12 &lt;(echo \"$all_branches\" | \\\n                                  sed \"s/ *remotes\\/origin\\///;tm;d;:m;/^HEAD/d;\" | sort) \\\n                                &lt;(echo \"$all_branches\" | \\\n                                  sed \"/ *remotes\\//d;s/^[\\* ]*//\" | sort))\n      # Create a new, blank temp file\n      echo -n &gt; \"$tmp_stat_file\"\n    else\n      # Only current branch\n      local branches=\"$(\\git branch 2&gt; /dev/null | sed \"s/^\\* \\([^ ]*\\)/\\1/;tm;d;:m\")\"\n      # Copy current file to temp file\n      touch \"$stat_file\"\n      cp -f \"$stat_file\" \"$tmp_stat_file\"\n    fi\n\n    for branch in $branches; do\n      local travis_output=$(travis-ci \"$branch\" 2&gt;&amp;1)\n      local status=\"\"\n      case \"$travis_output\" in\n      *built\\ OK*)    status=\"passed\";;\n      *failed*)       status=\"failed\";;\n      *in\\ progress*) status=\"running\";;\n      esac\n\n      # If branch has a build status\n      if [ -n \"$status\" ]; then\n        if grep -q \"^$branch\" \"$tmp_stat_file\"; then\n          # Replace branch's build status\n          sed -e \"s/^$branch .*/$branch $status/\" -i \"$tmp_stat_file\"\n        else\n          # Append new line for branch\n          echo \"$branch $status\" &gt;&gt; \"$tmp_stat_file\"\n        fi\n      fi\n    done\n\n    # Replace current stat file with finished update\n    mv -f \"$tmp_stat_file\" \"$stat_file\"\n    # Ignore status file from git repo\n    if ! ([ -e .git/info/exclude ] &amp;&amp; grep -q \"$stat_file\" .git/info/exclude); then\n      echo \"$stat_file\" &gt;&gt; .git/info/exclude\n    fi\n\nfi\nfi\n</code></pre>\n",
            "comment_id": "57",
            "plaintext": "Update:\n\n\nI've updated the build status checking script, because updating all branches was taking too long (over 20 minutes.)\n\nNow it performs frequent updates for the current branch, and only periodic updates for all branches.\n\n\n\nTravis CI is a distributed continuous integration service for the open source community, and it can be used with any of your public projects on GitHub. You've probably seen some 'build status' badges on GitHub repos.\n\n\nWouldn't it be cool if you could see that build status in your shell prompt whenever you are working on a project?\n\n\nHere's what my shell prompt looks like now:\n\n\n\nThis shows the build status for the current branch.\n\n\n\nYou will need to cache the build status, since looking it up takes a few seconds.\n\n\nYou should use my fork of mislav's travis-ci script, which can check the build status of a project. Make sure ~/bin is in your PATH, and if you are using RVM, make sure you are using your default ruby.\n\n\nRun the following to install it:\n\n\nmkdir -p ~/bin/\ncurl -sL https://raw.github.com/gist/1708408/travis.rb > ~/bin/travis-ci \\\n && chmod +x ~/bin/travis-ci\n\ngem install hub | tail -2\nruby -e 'require \"json\"' 2>/dev/null || gem install json\n\n\n\nNext, we need to update the cached status.\n\nThe following code is included as part of my SCM Breeze project, but feel free to save the update_travis_ci_status script at the bottom of this post [1] to /usr/bin/update_travis_ci_status.\n\n\nWe will also need a way to run this update task every few minutes, across all of our local git repos.\n\nWe only want to frequently update the status for the currently checked out branch, and periodically update the status for all branches.\n\n\nThe SCM Breeze project also maintains an index of your git repositories, which gives you the ability to run batch commands via the git_index function.\n\nSo the build status update can be easily set up as a cron task:\n\n\n_/5 _ \\* \\* _ /bin/bash -c '. $HOME/.bashrc && git_index --rebuild && git_index --batch-cmd update_travis_ci_status'\n_/45 \\* \\* \\* \\* /bin/bash -c '. $HOME/.bashrc && git_index --rebuild && export UPDATE_ALL_BRANCHES=true && git_index --batch-cmd update_travis_ci_status'\n\n\n\nAlternatively, you could save the following script to /usr/bin/update_all_travis_ci_statuses.\n\n\n#!/bin/bash\n\n# (Replace `$HOME/code` with the location of your projects)\n\nfor f in find \"$HOME/code\" -maxdepth 4 -name .travis.yml; do\n  (builtin cd \"$(dirname $f)\" && update_travis_ci_status)\ndone\n\n\n\n... and use the following cron task:\n\n\n_/5 _ \\* \\* _ /bin/bash -c '. $HOME/.bashrc && /usr/bin/update_all_travis_ci_statuses'\n_/45 \\* \\* \\* \\* /bin/bash -c '. $HOME/.bashrc && export UPDATE_ALL_BRANCHES=true && /usr/bin/update_all_travis_ci_statuses'\n\n\n\n(you need to source your .bashrc if your default ruby comes from RVM)\n\n\nFinally, you need a way to display the cached status in your prompt.\n\n\nHere are the functions I use to return a colored pass / fail / running symbol:\n\n\n\n# Returns the Travis CI status for a github project\n\nparse_travis_status() {\nlocal branch=\"$1\"\n  if [ -z \"$branch\" ]; then branch=\"master\"; fi\n\nlocal stat_file=$(find_in_cwd_or_parent \".travis_status~\")\n  if [ -e \"$stat_file\" ]; then\ncase \"$(grep -m 1 \"^$branch \" \"$stat_file\")\" in\n*passed) echo \"\\[\\e[01;32m\\]✔ \";; # green\n*failed) echo \"\\[\\e[01;31m\\]✘ \";; # red\n\\*running) echo \"\\[\\e[01;33m\\]⁇ \";; # yellow\nesac\nfi\n}\n\n# Test whether file exists in current or parent directories\n\nfind_in_cwd_or_parent() {\nlocal slashes=${PWD//[^\\/]/}; local directory=$PWD;\nfor (( n=${#slashes}; n>0; --n )); do\n    test -e $directory/$1 && echo \"$directory/$1\" && return 0\n    directory=$directory/..\ndone\nreturn 1\n}\n\n\n\n(it also works if you are in a project's sub-directory.)\n\n\nFinally, add $(parse_travis_status \"$current_branch\") somewhere in your $PS1. You should set the $current_branch variable to the current git branch, but it defaults to the master branch if you leave it blank.\n\n\nYou may like to have a look at the prompt section of my dotfiles, to see how I do it.\n\n\nEnjoy! Please let me know if you have any questions, or need some help.\n\n\n\n[1] update_travis_ci_status script:\n\n\n#!/bin/bash\nif [ -e \".travis.yml\" ]; then\nif type ruby > /dev/null 2>&1 && type travis-ci > /dev/null 2>&1; then\nlocal stat_file=\".travis_status~\"\nlocal tmp_stat_file=\"$stat_file\"\".tmp\"\n\n    # Either update all branches, or only current branch\n    if [ \"$UPDATE_ALL_BRANCHES\" = \"true\" ]; then\n      local all_branches=$(\\git branch -a)\n      # All branches on origin remote that have local copies\n      local branches=$(comm -12 <(echo \"$all_branches\" | \\\n                                  sed \"s/ *remotes\\/origin\\///;tm;d;:m;/^HEAD/d;\" | sort) \\\n                                <(echo \"$all_branches\" | \\\n                                  sed \"/ *remotes\\//d;s/^[\\* ]*//\" | sort))\n      # Create a new, blank temp file\n      echo -n > \"$tmp_stat_file\"\n    else\n      # Only current branch\n      local branches=\"$(\\git branch 2> /dev/null | sed \"s/^\\* \\([^ ]*\\)/\\1/;tm;d;:m\")\"\n      # Copy current file to temp file\n      touch \"$stat_file\"\n      cp -f \"$stat_file\" \"$tmp_stat_file\"\n    fi\n\n    for branch in $branches; do\n      local travis_output=$(travis-ci \"$branch\" 2>&1)\n      local status=\"\"\n      case \"$travis_output\" in\n      *built\\ OK*)    status=\"passed\";;\n      *failed*)       status=\"failed\";;\n      *in\\ progress*) status=\"running\";;\n      esac\n\n      # If branch has a build status\n      if [ -n \"$status\" ]; then\n        if grep -q \"^$branch\" \"$tmp_stat_file\"; then\n          # Replace branch's build status\n          sed -e \"s/^$branch .*/$branch $status/\" -i \"$tmp_stat_file\"\n        else\n          # Append new line for branch\n          echo \"$branch $status\" >> \"$tmp_stat_file\"\n        fi\n      fi\n    done\n\n    # Replace current stat file with finished update\n    mv -f \"$tmp_stat_file\" \"$stat_file\"\n    # Ignore status file from git repo\n    if ! ([ -e .git/info/exclude ] && grep -q \"$stat_file\" .git/info/exclude); then\n      echo \"$stat_file\" >> .git/info/exclude\n    fi\n\nfi\nfi\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2012-01-14T00:00:00.000Z",
            "updated_at": "2024-04-19T01:31:17.000Z",
            "published_at": "2012-01-14T01:21:13.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8bb",
            "uuid": "cca6e934-3a84-4a19-8720-c7321bad016b",
            "title": "Scheduling one-off tasks with 'at'",
            "slug": "scheduling-one-off-tasks-with-at-",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"You might be familiar with the [cron](https://en.wikipedia.org/wiki/Cron) job scheduler,\\nwhich is great for repeating tasks.\\nBut when you want to schedule a command to only run once in the future,\\nthe [at](https://linux.die.net/man/1/at) command is what you are looking for.\\n\\nIn my case, I was updating a plugin for our\\n[Thoughtworks Mingle](https://www.thoughtworks-studios.com/mingle-agile-project-management) instance,\\nbut the update wasn't hugely important. Many of our staff rely on Mingle for their work,\\nand restarting it takes it offline for a few minutes.\\n\\nSo I used the `at` command to schedule the restart to happen at midnight, after everyone had gone home:\\n\\n```bash\\n$ echo \\\"/etc/init.d/mingle restart\\\" | at -m 00:00\\njob 6 at 2012-02-26 00:00\\n```\\n\\nUse `atq` or `at -l` to see the list of pending jobs:\\n\\n```bash\\n$ atq\\n6 2012-02-26 00:00 a root\\n```\\n\\nUse `at -c <job id>` to view the script that will be run:\\n\\n```bash\\n$ at -c 6\\n\\n#!/bin/sh\\n\\n# atrun uid=0 gid=0\\n\\n# mail root 1\\n\\numask 22\\nHOSTNAME=...\\n<lots of environment variables set here>\\n\\n/etc/init.d/mingle restart\\n```\\n\\nTo delete a scheduled task, run `at -d <job id>`:\\n\\n```bash\\n$ at -d 6\\n$ atq\\n(no output)\\n```\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>You might be familiar with the <a href=\"https://en.wikipedia.org/wiki/Cron\">cron</a> job scheduler,<br>\nwhich is great for repeating tasks.<br>\nBut when you want to schedule a command to only run once in the future,<br>\nthe <a href=\"https://linux.die.net/man/1/at\">at</a> command is what you are looking for.</p>\n<p>In my case, I was updating a plugin for our<br>\n<a href=\"https://www.thoughtworks-studios.com/mingle-agile-project-management\">Thoughtworks Mingle</a> instance,<br>\nbut the update wasn't hugely important. Many of our staff rely on Mingle for their work,<br>\nand restarting it takes it offline for a few minutes.</p>\n<p>So I used the <code>at</code> command to schedule the restart to happen at midnight, after everyone had gone home:</p>\n<pre><code class=\"language-bash\">$ echo \"/etc/init.d/mingle restart\" | at -m 00:00\njob 6 at 2012-02-26 00:00\n</code></pre>\n<p>Use <code>atq</code> or <code>at -l</code> to see the list of pending jobs:</p>\n<pre><code class=\"language-bash\">$ atq\n6 2012-02-26 00:00 a root\n</code></pre>\n<p>Use <code>at -c &lt;job id&gt;</code> to view the script that will be run:</p>\n<pre><code class=\"language-bash\">$ at -c 6\n\n#!/bin/sh\n\n# atrun uid=0 gid=0\n\n# mail root 1\n\numask 22\nHOSTNAME=...\n&lt;lots of environment variables set here&gt;\n\n/etc/init.d/mingle restart\n</code></pre>\n<p>To delete a scheduled task, run <code>at -d &lt;job id&gt;</code>:</p>\n<pre><code class=\"language-bash\">$ at -d 6\n$ atq\n(no output)\n</code></pre>\n",
            "comment_id": "58",
            "plaintext": "You might be familiar with the cron job scheduler,\n\nwhich is great for repeating tasks.\n\nBut when you want to schedule a command to only run once in the future,\n\nthe at command is what you are looking for.\n\n\nIn my case, I was updating a plugin for our\n\nThoughtworks Mingle instance,\n\nbut the update wasn't hugely important. Many of our staff rely on Mingle for their work,\n\nand restarting it takes it offline for a few minutes.\n\n\nSo I used the at command to schedule the restart to happen at midnight, after everyone had gone home:\n\n\n$ echo \"/etc/init.d/mingle restart\" | at -m 00:00\njob 6 at 2012-02-26 00:00\n\n\n\nUse atq or at -l to see the list of pending jobs:\n\n\n$ atq\n6 2012-02-26 00:00 a root\n\n\n\nUse at -c <job id> to view the script that will be run:\n\n\n$ at -c 6\n\n#!/bin/sh\n\n# atrun uid=0 gid=0\n\n# mail root 1\n\numask 22\nHOSTNAME=...\n<lots of environment variables set here>\n\n/etc/init.d/mingle restart\n\n\n\nTo delete a scheduled task, run at -d <job id>:\n\n\n$ at -d 6\n$ atq\n(no output)\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2012-02-25T00:00:00.000Z",
            "updated_at": "2024-04-19T01:28:54.000Z",
            "published_at": "2012-02-25T17:00:27.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8bc",
            "uuid": "747cdd93-9946-4b46-bc14-dc79f5ff37a4",
            "title": "Skype notifications using libnotify on Linux",
            "slug": "skype-notifications-using-libnotify-on-linux",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"Skype on Linux comes with it's own notification system. It's not that bad, but it's not consistent, either.\\nIf you want to configure Skype to use `libnotify` instead, run the following script in your terminal:\\n\\n(NOTE: You must have installed Skype, and logged in at least once.)\\n\\n```bash\\nbash < <(curl -s https://raw.github.com/gist/2181122/skype-libnotify.sh)\\n```\\n\\nThis downloads and executes the script from this gist: [https://gist.github.com/2181122](https://gist.github.com/2181122)\\n\\nIt fetches the skype configuration from [here](https://github.com/ndbroadbent/dotfiles/blob/master/skype/skype-UI.xml),\\nwhich is part of my [dotfiles](https://github.com/ndbroadbent/dotfiles) repo.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Skype on Linux comes with it's own notification system. It's not that bad, but it's not consistent, either.<br>\nIf you want to configure Skype to use <code>libnotify</code> instead, run the following script in your terminal:</p>\n<p>(NOTE: You must have installed Skype, and logged in at least once.)</p>\n<pre><code class=\"language-bash\">bash &lt; &lt;(curl -s https://raw.github.com/gist/2181122/skype-libnotify.sh)\n</code></pre>\n<p>This downloads and executes the script from this gist: <a href=\"https://gist.github.com/2181122\">https://gist.github.com/2181122</a></p>\n<p>It fetches the skype configuration from <a href=\"https://github.com/ndbroadbent/dotfiles/blob/master/skype/skype-UI.xml\">here</a>,<br>\nwhich is part of my <a href=\"https://github.com/ndbroadbent/dotfiles\">dotfiles</a> repo.</p>\n",
            "comment_id": "59",
            "plaintext": "Skype on Linux comes with it's own notification system. It's not that bad, but it's not consistent, either.\n\nIf you want to configure Skype to use libnotify instead, run the following script in your terminal:\n\n\n(NOTE: You must have installed Skype, and logged in at least once.)\n\n\nbash < <(curl -s https://raw.github.com/gist/2181122/skype-libnotify.sh)\n\n\n\nThis downloads and executes the script from this gist: https://gist.github.com/2181122\n\n\nIt fetches the skype configuration from here,\n\nwhich is part of my dotfiles repo.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2012-03-24T00:00:00.000Z",
            "updated_at": "2024-04-19T01:27:39.000Z",
            "published_at": "2012-03-24T18:55:18.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8bd",
            "uuid": "3b5752aa-44e4-4203-a758-49c08bc450e9",
            "title": "How to start a Google Group for a git project",
            "slug": "how-to-start-a-google-group-for-a-git-project",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"GitHub is a great way to manage code for an open source project, but it doesn't\\nprovide any way to send a message to all of\\nyour watchers. This can be necessary whenever you make certain changes to your application.\\nFor example, I recently merged a pull request in [Errbit](https://github.com/errbit/errbit) that requires users to\\nrun a Rake task next time they update the code. I had no way of notifying our users,\\nso I decided to create a Google Group mailing list for these kinds of notifications.\\n\\nCreating a Google Group is easy (just go to [https://groups.google.com](https://groups.google.com) and follow the prompts),\\nbut the slightly tricky part is sending invites to everyone who's interested in your project.\\nI decided to start by inviting all the contributors to the Errbit codebase\\n(there's 73 contributors at the time of writing this post.)\\n\\nYou can get a list of contributor emails by running `git log --format='%ae' | sort -u` from\\nyour git repo. However, Google Groups only lets you invite 10 emails at a time,\\nso here's a Bash/Zsh script that will print all of your contributor emails as CSV, in groups of 10:\\n\\n```bash\\nemails=( $(git log --format='%ae' | sort -u) )\\ntotal_groups=$(( ${#emails[@]} / 10 ))\\n\\nfor ((i=0; i <= $total_groups; i++)); do\\n  echo \\\"Group $((i + 1)):\\\"\\n  echo \\\"-------------------------------------------------------\\\"\\n  grouped_emails=( ${emails[@]:$(( $i * 10 )):10} )\\n  printf \\\"%s, \\\" \\\"${grouped_emails[@]}\\\" | cut -d \\\",\\\" -f 1-${#grouped_emails[@]}\\necho\\ndone\\n```\\n\\nAfter pasting this script into your terminal, you can copy and paste each batch of\\nemails into the **Enter email addresses of people to invite** textarea.\\nBut be careful to write and save your invite message in your text editor, because if you\\nwrite it on the page you won't be able to get it back after sending the first batch of invites.\\n\\nIt will still be quite a tedious process since you'll need to enter a captcha for each batch,\\nbut hopefully this script will save you some time.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>GitHub is a great way to manage code for an open source project, but it doesn't<br>\nprovide any way to send a message to all of<br>\nyour watchers. This can be necessary whenever you make certain changes to your application.<br>\nFor example, I recently merged a pull request in <a href=\"https://github.com/errbit/errbit\">Errbit</a> that requires users to<br>\nrun a Rake task next time they update the code. I had no way of notifying our users,<br>\nso I decided to create a Google Group mailing list for these kinds of notifications.</p>\n<p>Creating a Google Group is easy (just go to <a href=\"https://groups.google.com\">https://groups.google.com</a> and follow the prompts),<br>\nbut the slightly tricky part is sending invites to everyone who's interested in your project.<br>\nI decided to start by inviting all the contributors to the Errbit codebase<br>\n(there's 73 contributors at the time of writing this post.)</p>\n<p>You can get a list of contributor emails by running <code>git log --format='%ae' | sort -u</code> from<br>\nyour git repo. However, Google Groups only lets you invite 10 emails at a time,<br>\nso here's a Bash/Zsh script that will print all of your contributor emails as CSV, in groups of 10:</p>\n<pre><code class=\"language-bash\">emails=( $(git log --format='%ae' | sort -u) )\ntotal_groups=$(( ${#emails[@]} / 10 ))\n\nfor ((i=0; i &lt;= $total_groups; i++)); do\n  echo \"Group $((i + 1)):\"\n  echo \"-------------------------------------------------------\"\n  grouped_emails=( ${emails[@]:$(( $i * 10 )):10} )\n  printf \"%s, \" \"${grouped_emails[@]}\" | cut -d \",\" -f 1-${#grouped_emails[@]}\necho\ndone\n</code></pre>\n<p>After pasting this script into your terminal, you can copy and paste each batch of<br>\nemails into the <strong>Enter email addresses of people to invite</strong> textarea.<br>\nBut be careful to write and save your invite message in your text editor, because if you<br>\nwrite it on the page you won't be able to get it back after sending the first batch of invites.</p>\n<p>It will still be quite a tedious process since you'll need to enter a captcha for each batch,<br>\nbut hopefully this script will save you some time.</p>\n",
            "comment_id": "60",
            "plaintext": "GitHub is a great way to manage code for an open source project, but it doesn't\n\nprovide any way to send a message to all of\n\nyour watchers. This can be necessary whenever you make certain changes to your application.\n\nFor example, I recently merged a pull request in Errbit that requires users to\n\nrun a Rake task next time they update the code. I had no way of notifying our users,\n\nso I decided to create a Google Group mailing list for these kinds of notifications.\n\n\nCreating a Google Group is easy (just go to https://groups.google.com and follow the prompts),\n\nbut the slightly tricky part is sending invites to everyone who's interested in your project.\n\nI decided to start by inviting all the contributors to the Errbit codebase\n\n(there's 73 contributors at the time of writing this post.)\n\n\nYou can get a list of contributor emails by running git log --format='%ae' | sort -u from\n\nyour git repo. However, Google Groups only lets you invite 10 emails at a time,\n\nso here's a Bash/Zsh script that will print all of your contributor emails as CSV, in groups of 10:\n\n\nemails=( $(git log --format='%ae' | sort -u) )\ntotal_groups=$(( ${#emails[@]} / 10 ))\n\nfor ((i=0; i <= $total_groups; i++)); do\n  echo \"Group $((i + 1)):\"\n  echo \"-------------------------------------------------------\"\n  grouped_emails=( ${emails[@]:$(( $i * 10 )):10} )\n  printf \"%s, \" \"${grouped_emails[@]}\" | cut -d \",\" -f 1-${#grouped_emails[@]}\necho\ndone\n\n\n\nAfter pasting this script into your terminal, you can copy and paste each batch of\n\nemails into the Enter email addresses of people to invite textarea.\n\nBut be careful to write and save your invite message in your text editor, because if you\n\nwrite it on the page you won't be able to get it back after sending the first batch of invites.\n\n\nIt will still be quite a tedious process since you'll need to enter a captcha for each batch,\n\nbut hopefully this script will save you some time.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2012-09-19T00:00:00.000Z",
            "updated_at": "2024-04-19T01:26:36.000Z",
            "published_at": "2012-09-19T12:05:39.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8be",
            "uuid": "7f755a62-b3d2-4d87-b86a-86f25fb82f22",
            "title": "Automate your Rails development with cron: Keep projects updated, install gems, and maintain a repo index",
            "slug": "automate-your-development-machine-keep-projects-updated-install-gems-refresh-git-repo-index",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nA day in the life of a Rails developer will usually involve a few `git pull`s, `bundle install`s, and switching between different projects. I thought it would be great if my projects could be automatically kept up-to-date, so that I don't have to spend too much time updating code or installing new gems.\\n\\nI'm using the `whenever` gem to create cron tasks that:\\n\\n- Update all my git repos from their remotes\\n- Satisfy all of my Gemfile's dependencies\\n- Cache rake and capistrano commands for tab completion\\n- Fetch Travis CI build statuses to show in my terminal\\n- Maintain an index of my git repos so I can quickly switch between projects, while keeping them organized\\n\\nFor all of these tasks, I'm using the `git_index` function provided by my [SCM Breeze](https://github.com/ndbroadbent/scm_breeze) project. It creates an index of all your git projects by recursively scanning your code directory, and then lets you quickly jump to projects, or run batch commands for each of your repos. See my [SCM Breeze blog post for more info about the repository index](__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/#repository-index).\\n\\n### Updating Git Repos\\n\\nEvery 30 minutes I run a task that updates all of the local branches on all of my git repos. It does this as safely as possible:\\n\\n- Doesn't do anything if there are any changed files in the working directory\\n- Doesn't do anything unless remote and merge branches are explicitly configured for that branch\\n- Doesn't do anything if it cannot 'fast-forward' merge a branch (i.e. the current commit is not a parent of the latest commit in the remote repo)\\n\\nBasically, this means that it will leave you alone if you are working on a feature, or if you've committed something that you haven't pushed yet.\\n\\nOtherwise, it will bring your branches up-to-date and send a desktop notification:\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2012/10/git_update_notify.jpg\\\" alt=\\\"Git update notification\\\" />\\n\\n### Installing Gem dependencies\\n\\nI have a task that runs every hour to ensure that all of my gem dependencies are installed. If someone adds a new gem dependency to your project, it's great to have that automatically installed when the repo is automatically updated.\\n\\nI'm using the `git_index` function to run a script called [bundle_check_or_install](https://github.com/ndbroadbent/dotfiles/blob/master/bin/bundle_check_or_install) for each of my git repos. It also sends desktop notifications on update or failure, and doesn't do anything if the gems are already up-to-date.\\n\\nIf `bundle install` fails for any reason, it will touch a file at `'.skip_bundle_auto_install~` (and exclude that file from git by adding it to `.git/info/exclude`). Any future attempts to auto-update your gems will abort with the notification that \\\"Previous bundle install failed\\\". This notification can be disabled if `.skip_bundle_auto_install~` contains the string \\\"SILENT\\\". I do this when I stop caring about old projects, but don't want to delete or archive them.\\n\\n### Caching Rake and Capistrano commands for tab completion\\n\\n`rake -T` and `cap -T` can take a long time to run, so I run a task every hour to cache the available tasks for all of my projects, and I use these cached tasks to provide tab completion. The tasks in saved to files like `.cached_rake_tasks~` and `.cached_cap_tasks~`. [Here's how I set up the Bash tab completion](https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/ruby_on_rails.sh#L99).\\n\\n### Fetching Travis CI Build Status\\n\\nI've written about this before in my [Travis CI Status in Shell Prompt](__GHOST_URL__/2012/01/14/travis-ci-status-in-shell-prompt/) post. Every 30 minutes I run a task to fetch build statuses for all the repos that contain a `.travis.yml` file. The status is saved in a hidden file called `.travis_status~`, and displayed in my prompt like this:\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2012/01/travis_ci_prompt.png\\\" alt=\\\"Travis CI status in prompt\\\" />\\n\\n### Updating Git Repo Index\\n\\nAll of the previous tasks depend on the git repo index being up-to-date. It only takes a few seconds to scan through my code directories, so I run this task every minute.\\n\\nThis index lets me keep my code organized in different folders, while also letting me jump to different projects by name:\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2011/10/source_list-resized-post.png\\\" alt=\\\"Git Status With Shortcuts\\\" />\\n\\n<hr/>\\n\\nIf you want to set this up for yourself, you'll need to check out my [SCM Breeze](https://github.com/ndbroadbent/scm_breeze) project. The `schedule.rb` that defines these tasks [lives in my dotfiles repo](https://github.com/ndbroadbent/dotfiles/blob/master/schedule.rb), and you can find the scripts I use in the [/bin](https://github.com/ndbroadbent/dotfiles/blob/master/bin/) directory.\\n\\nPost a comment if you have any automation ideas to share!\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>A day in the life of a Rails developer will usually involve a few <code>git pull</code>s, <code>bundle install</code>s, and switching between different projects. I thought it would be great if my projects could be automatically kept up-to-date, so that I don't have to spend too much time updating code or installing new gems.</p>\n<p>I'm using the <code>whenever</code> gem to create cron tasks that:</p>\n<ul>\n<li>Update all my git repos from their remotes</li>\n<li>Satisfy all of my Gemfile's dependencies</li>\n<li>Cache rake and capistrano commands for tab completion</li>\n<li>Fetch Travis CI build statuses to show in my terminal</li>\n<li>Maintain an index of my git repos so I can quickly switch between projects, while keeping them organized</li>\n</ul>\n<p>For all of these tasks, I'm using the <code>git_index</code> function provided by my <a href=\"https://github.com/ndbroadbent/scm_breeze\">SCM Breeze</a> project. It creates an index of all your git projects by recursively scanning your code directory, and then lets you quickly jump to projects, or run batch commands for each of your repos. See my <a href=\"__GHOST_URL__/2011/10/19/git-shortcuts-like-youve-never-seen-before/#repository-index\">SCM Breeze blog post for more info about the repository index</a>.</p>\n<h3 id=\"updating-git-repos\">Updating Git Repos</h3>\n<p>Every 30 minutes I run a task that updates all of the local branches on all of my git repos. It does this as safely as possible:</p>\n<ul>\n<li>Doesn't do anything if there are any changed files in the working directory</li>\n<li>Doesn't do anything unless remote and merge branches are explicitly configured for that branch</li>\n<li>Doesn't do anything if it cannot 'fast-forward' merge a branch (i.e. the current commit is not a parent of the latest commit in the remote repo)</li>\n</ul>\n<p>Basically, this means that it will leave you alone if you are working on a feature, or if you've committed something that you haven't pushed yet.</p>\n<p>Otherwise, it will bring your branches up-to-date and send a desktop notification:</p>\n<img src=\"__GHOST_URL__/content/images/posts/2012/10/git_update_notify.jpg\" alt=\"Git update notification\">\n<h3 id=\"installing-gem-dependencies\">Installing Gem dependencies</h3>\n<p>I have a task that runs every hour to ensure that all of my gem dependencies are installed. If someone adds a new gem dependency to your project, it's great to have that automatically installed when the repo is automatically updated.</p>\n<p>I'm using the <code>git_index</code> function to run a script called <a href=\"https://github.com/ndbroadbent/dotfiles/blob/master/bin/bundle_check_or_install\">bundle_check_or_install</a> for each of my git repos. It also sends desktop notifications on update or failure, and doesn't do anything if the gems are already up-to-date.</p>\n<p>If <code>bundle install</code> fails for any reason, it will touch a file at <code>'.skip_bundle_auto_install~</code> (and exclude that file from git by adding it to <code>.git/info/exclude</code>). Any future attempts to auto-update your gems will abort with the notification that \"Previous bundle install failed\". This notification can be disabled if <code>.skip_bundle_auto_install~</code> contains the string \"SILENT\". I do this when I stop caring about old projects, but don't want to delete or archive them.</p>\n<h3 id=\"caching-rake-and-capistrano-commands-for-tab-completion\">Caching Rake and Capistrano commands for tab completion</h3>\n<p><code>rake -T</code> and <code>cap -T</code> can take a long time to run, so I run a task every hour to cache the available tasks for all of my projects, and I use these cached tasks to provide tab completion. The tasks in saved to files like <code>.cached_rake_tasks~</code> and <code>.cached_cap_tasks~</code>. <a href=\"https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/ruby_on_rails.sh#L99\">Here's how I set up the Bash tab completion</a>.</p>\n<h3 id=\"fetching-travis-ci-build-status\">Fetching Travis CI Build Status</h3>\n<p>I've written about this before in my <a href=\"__GHOST_URL__/2012/01/14/travis-ci-status-in-shell-prompt/\">Travis CI Status in Shell Prompt</a> post. Every 30 minutes I run a task to fetch build statuses for all the repos that contain a <code>.travis.yml</code> file. The status is saved in a hidden file called <code>.travis_status~</code>, and displayed in my prompt like this:</p>\n<img src=\"__GHOST_URL__/content/images/posts/2012/01/travis_ci_prompt.png\" alt=\"Travis CI status in prompt\">\n<h3 id=\"updating-git-repo-index\">Updating Git Repo Index</h3>\n<p>All of the previous tasks depend on the git repo index being up-to-date. It only takes a few seconds to scan through my code directories, so I run this task every minute.</p>\n<p>This index lets me keep my code organized in different folders, while also letting me jump to different projects by name:</p>\n<img src=\"__GHOST_URL__/content/images/posts/2011/10/source_list-resized-post.png\" alt=\"Git Status With Shortcuts\">\n<hr>\n<p>If you want to set this up for yourself, you'll need to check out my <a href=\"https://github.com/ndbroadbent/scm_breeze\">SCM Breeze</a> project. The <code>schedule.rb</code> that defines these tasks <a href=\"https://github.com/ndbroadbent/dotfiles/blob/master/schedule.rb\">lives in my dotfiles repo</a>, and you can find the scripts I use in the <a href=\"https://github.com/ndbroadbent/dotfiles/blob/master/bin/\">/bin</a> directory.</p>\n<p>Post a comment if you have any automation ideas to share!</p>\n",
            "comment_id": "61",
            "plaintext": "A day in the life of a Rails developer will usually involve a few git pulls, bundle installs, and switching between different projects. I thought it would be great if my projects could be automatically kept up-to-date, so that I don't have to spend too much time updating code or installing new gems.\n\n\nI'm using the whenever gem to create cron tasks that:\n\n\n * Update all my git repos from their remotes\n * Satisfy all of my Gemfile's dependencies\n * Cache rake and capistrano commands for tab completion\n * Fetch Travis CI build statuses to show in my terminal\n * Maintain an index of my git repos so I can quickly switch between projects, while keeping them organized\n\n\nFor all of these tasks, I'm using the git_index function provided by my SCM Breeze project. It creates an index of all your git projects by recursively scanning your code directory, and then lets you quickly jump to projects, or run batch commands for each of your repos. See my SCM Breeze blog post for more info about the repository index.\n\n\n\nUpdating Git Repos\n\n\nEvery 30 minutes I run a task that updates all of the local branches on all of my git repos. It does this as safely as possible:\n\n\n * Doesn't do anything if there are any changed files in the working directory\n * Doesn't do anything unless remote and merge branches are explicitly configured for that branch\n * Doesn't do anything if it cannot 'fast-forward' merge a branch (i.e. the current commit is not a parent of the latest commit in the remote repo)\n\n\nBasically, this means that it will leave you alone if you are working on a feature, or if you've committed something that you haven't pushed yet.\n\n\nOtherwise, it will bring your branches up-to-date and send a desktop notification:\n\n\n\n\nInstalling Gem dependencies\n\n\nI have a task that runs every hour to ensure that all of my gem dependencies are installed. If someone adds a new gem dependency to your project, it's great to have that automatically installed when the repo is automatically updated.\n\n\nI'm using the git_index function to run a script called bundle_check_or_install for each of my git repos. It also sends desktop notifications on update or failure, and doesn't do anything if the gems are already up-to-date.\n\n\nIf bundle install fails for any reason, it will touch a file at '.skip_bundle_auto_install~ (and exclude that file from git by adding it to .git/info/exclude). Any future attempts to auto-update your gems will abort with the notification that \"Previous bundle install failed\". This notification can be disabled if .skip_bundle_auto_install~ contains the string \"SILENT\". I do this when I stop caring about old projects, but don't want to delete or archive them.\n\n\n\nCaching Rake and Capistrano commands for tab completion\n\n\nrake -T and cap -T can take a long time to run, so I run a task every hour to cache the available tasks for all of my projects, and I use these cached tasks to provide tab completion. The tasks in saved to files like .cached_rake_tasks~ and .cached_cap_tasks~. Here's how I set up the Bash tab completion.\n\n\n\nFetching Travis CI Build Status\n\n\nI've written about this before in my Travis CI Status in Shell Prompt post. Every 30 minutes I run a task to fetch build statuses for all the repos that contain a .travis.yml file. The status is saved in a hidden file called .travis_status~, and displayed in my prompt like this:\n\n\n\n\nUpdating Git Repo Index\n\n\nAll of the previous tasks depend on the git repo index being up-to-date. It only takes a few seconds to scan through my code directories, so I run this task every minute.\n\n\nThis index lets me keep my code organized in different folders, while also letting me jump to different projects by name:\n\n\n\n\nIf you want to set this up for yourself, you'll need to check out my SCM Breeze project. The schedule.rb that defines these tasks lives in my dotfiles repo, and you can find the scripts I use in the /bin directory.\n\n\nPost a comment if you have any automation ideas to share!\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2012-10-11T00:00:00.000Z",
            "updated_at": "2024-04-19T01:21:56.000Z",
            "published_at": "2012-10-11T14:56:54.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8bf",
            "uuid": "f4306437-1852-4cb2-9dc4-b52c8dd0dc47",
            "title": "Saving space in the terminal with symbols",
            "slug": "saving-space-in-the-terminal-with-symbols",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nI'm saving a little space in my terminal by replacing my username and group (ndbroadbent) with a single symbol.\\nI'm doing this [in my prompt](https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/prompt.sh#L64-66),\\nas well as in the output of `ls` commands:\\n\\n<img src=\\\"__GHOST_URL__/content/images/posts/2012/10/ls_with_symbols-resized-post.png\\\" alt=\\\"ls and prompt with symbols\\\" />\\n\\n(My laptop's hostname is also represented by a symbol.)\\n\\nFor the ls output, it was a bit tricky to re-justify the username and group columns after substituting my username.\\nI decided to do it in ruby, and then played some ruby golf:\\n\\n```ruby\\no=STDIN.read;re=/^(([^ ]_ +){2})(([^ ]_ +){3})/;u,g,s=o.lines.map{|l|l[re,3]}.compact.map(&:split).transpose.map{|a|a.map(&:size).max+1};puts o.lines.map{|l|l.sub(re){|m|\\\"%s%-#{u}s %-#{g}s%#{s}s \\\"%[$1,*$3.split]}}\\n```\\n\\nThis little script parses the modified output of `ls -lhv`, calculates the max length of the user/group/size columns, and then pads those columns with the correct number of spaces.\\n\\nMy final `ls` command looks like this:\\n\\n```bash\\nls -lhv --group-directories-first | sed \\\\\\\"s/$USER/\\\\$(/bin/cat $HOME/.user_sym)/g\\\\\\\" | rejustify_ls_columns\\n```\\n\\n(where `rejustify_ls_columns` is a function wrapping the ruby script above.)\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I'm saving a little space in my terminal by replacing my username and group (ndbroadbent) with a single symbol.<br>\nI'm doing this <a href=\"https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/prompt.sh#L64-66\">in my prompt</a>,<br>\nas well as in the output of <code>ls</code> commands:</p>\n<img src=\"__GHOST_URL__/content/images/posts/2012/10/ls_with_symbols-resized-post.png\" alt=\"ls and prompt with symbols\">\n<p>(My laptop's hostname is also represented by a symbol.)</p>\n<p>For the ls output, it was a bit tricky to re-justify the username and group columns after substituting my username.<br>\nI decided to do it in ruby, and then played some ruby golf:</p>\n<pre><code class=\"language-ruby\">o=STDIN.read;re=/^(([^ ]_ +){2})(([^ ]_ +){3})/;u,g,s=o.lines.map{|l|l[re,3]}.compact.map(&amp;:split).transpose.map{|a|a.map(&amp;:size).max+1};puts o.lines.map{|l|l.sub(re){|m|\"%s%-#{u}s %-#{g}s%#{s}s \"%[$1,*$3.split]}}\n</code></pre>\n<p>This little script parses the modified output of <code>ls -lhv</code>, calculates the max length of the user/group/size columns, and then pads those columns with the correct number of spaces.</p>\n<p>My final <code>ls</code> command looks like this:</p>\n<pre><code class=\"language-bash\">ls -lhv --group-directories-first | sed \\\"s/$USER/\\$(/bin/cat $HOME/.user_sym)/g\\\" | rejustify_ls_columns\n</code></pre>\n<p>(where <code>rejustify_ls_columns</code> is a function wrapping the ruby script above.)</p>\n",
            "comment_id": "62",
            "plaintext": "I'm saving a little space in my terminal by replacing my username and group (ndbroadbent) with a single symbol.\n\nI'm doing this in my prompt,\n\nas well as in the output of ls commands:\n\n\n\n(My laptop's hostname is also represented by a symbol.)\n\n\nFor the ls output, it was a bit tricky to re-justify the username and group columns after substituting my username.\n\nI decided to do it in ruby, and then played some ruby golf:\n\n\no=STDIN.read;re=/^(([^ ]_ +){2})(([^ ]_ +){3})/;u,g,s=o.lines.map{|l|l[re,3]}.compact.map(&:split).transpose.map{|a|a.map(&:size).max+1};puts o.lines.map{|l|l.sub(re){|m|\"%s%-#{u}s %-#{g}s%#{s}s \"%[$1,*$3.split]}}\n\n\n\nThis little script parses the modified output of ls -lhv, calculates the max length of the user/group/size columns, and then pads those columns with the correct number of spaces.\n\n\nMy final ls command looks like this:\n\n\nls -lhv --group-directories-first | sed \\\"s/$USER/\\$(/bin/cat $HOME/.user_sym)/g\\\" | rejustify_ls_columns\n\n\n\n(where rejustify_ls_columns is a function wrapping the ruby script above.)\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2012-10-14T00:00:00.000Z",
            "updated_at": "2024-04-19T01:21:05.000Z",
            "published_at": "2012-10-14T22:28:47.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8c0",
            "uuid": "8c9f8a4e-ba83-4bac-9976-a47df23be882",
            "title": "Auto-reloading your .bashrc (or .zshrc)",
            "slug": "auto-reloading-your-bashrc",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nIf you often make changes to your `~/.bashrc`, you might be sick of typing `source ~/.bashrc` after every change.\\nIt can also be annoying when you switch to a different tab in your terminal, but your new aliases or functions aren't available until you type `source ~/.bashrc`.\\n\\nWhile I was working on [scm_breeze](https://github.com/ndbroadbent/scm_breeze) and my [dotfiles](https://github.com/ndbroadbent/dotfiles) repo, I grew tired of having to type this command, so I aliased it to `sbrc`. But I knew I could do better, so I created an auto-reload script that reloads my `~/.bashrc` if there are any changes to itself, or any of the files that it loads.\\n\\nWhen you run it at the beginning of your `.bashrc`, it wraps the `source` and `.` commands with a function that builds an index of all the sourced files. At the end of your `.bashrc`, you need to call the `finalize_auto_reload` function, which:\\n\\n- Removes the `source` and `.` overrides\\n- Sorts the sourced file index and removes duplicates\\n- Stores the mtime of the most recently modified source file in a variable\\n- Adds the `auto_reload_bashrc` function to your `PROMPT_COMMAND`.\\n\\nWhenever you start a new line in your terminal, the `auto_reload_bashrc` function reloads your `.bashrc` if any of the sourced files have changed. Changes are detected by looking up the most recent modification time from all of the sourced files, and comparing that time with the previous value.\\n\\nMy `.bashrc` sources 28 files from my [dotfiles](https://github.com/ndbroadbent/dotfiles), [scm_breeze](https://github.com/ndbroadbent/scm_breeze), and [RVM](https://rvm.io/). Running the `auto_reload_bashrc` function to check for changes only takes 11 ms.\\n\\nIf you make a lot of changes to your `.bashrc` or `.zsh`, you can check out my auto-reloading script here:\\n<a href=\\\"https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/auto_reload.sh\\\" target=\\\"_blank\\\">https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/auto_reload.sh</a>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>If you often make changes to your <code>~/.bashrc</code>, you might be sick of typing <code>source ~/.bashrc</code> after every change.<br>\nIt can also be annoying when you switch to a different tab in your terminal, but your new aliases or functions aren't available until you type <code>source ~/.bashrc</code>.</p>\n<p>While I was working on <a href=\"https://github.com/ndbroadbent/scm_breeze\">scm_breeze</a> and my <a href=\"https://github.com/ndbroadbent/dotfiles\">dotfiles</a> repo, I grew tired of having to type this command, so I aliased it to <code>sbrc</code>. But I knew I could do better, so I created an auto-reload script that reloads my <code>~/.bashrc</code> if there are any changes to itself, or any of the files that it loads.</p>\n<p>When you run it at the beginning of your <code>.bashrc</code>, it wraps the <code>source</code> and <code>.</code> commands with a function that builds an index of all the sourced files. At the end of your <code>.bashrc</code>, you need to call the <code>finalize_auto_reload</code> function, which:</p>\n<ul>\n<li>Removes the <code>source</code> and <code>.</code> overrides</li>\n<li>Sorts the sourced file index and removes duplicates</li>\n<li>Stores the mtime of the most recently modified source file in a variable</li>\n<li>Adds the <code>auto_reload_bashrc</code> function to your <code>PROMPT_COMMAND</code>.</li>\n</ul>\n<p>Whenever you start a new line in your terminal, the <code>auto_reload_bashrc</code> function reloads your <code>.bashrc</code> if any of the sourced files have changed. Changes are detected by looking up the most recent modification time from all of the sourced files, and comparing that time with the previous value.</p>\n<p>My <code>.bashrc</code> sources 28 files from my <a href=\"https://github.com/ndbroadbent/dotfiles\">dotfiles</a>, <a href=\"https://github.com/ndbroadbent/scm_breeze\">scm_breeze</a>, and <a href=\"https://rvm.io/\">RVM</a>. Running the <code>auto_reload_bashrc</code> function to check for changes only takes 11 ms.</p>\n<p>If you make a lot of changes to your <code>.bashrc</code> or <code>.zsh</code>, you can check out my auto-reloading script here:<br>\n<a href=\"https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/auto_reload.sh\" target=\"_blank\">https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/auto_reload.sh</a></p>\n<!--kg-card-end: markdown-->",
            "comment_id": "63",
            "plaintext": "If you often make changes to your ~/.bashrc, you might be sick of typing source ~/.bashrc after every change.\n\nIt can also be annoying when you switch to a different tab in your terminal, but your new aliases or functions aren't available until you type source ~/.bashrc.\n\n\nWhile I was working on scm_breeze and my dotfiles repo, I grew tired of having to type this command, so I aliased it to sbrc. But I knew I could do better, so I created an auto-reload script that reloads my ~/.bashrc if there are any changes to itself, or any of the files that it loads.\n\n\nWhen you run it at the beginning of your .bashrc, it wraps the source and . commands with a function that builds an index of all the sourced files. At the end of your .bashrc, you need to call the finalize_auto_reload function, which:\n\n\n * Removes the source and . overrides\n * Sorts the sourced file index and removes duplicates\n * Stores the mtime of the most recently modified source file in a variable\n * Adds the auto_reload_bashrc function to your PROMPT_COMMAND.\n\n\nWhenever you start a new line in your terminal, the auto_reload_bashrc function reloads your .bashrc if any of the sourced files have changed. Changes are detected by looking up the most recent modification time from all of the sourced files, and comparing that time with the previous value.\n\n\nMy .bashrc sources 28 files from my dotfiles, scm_breeze, and RVM. Running the auto_reload_bashrc function to check for changes only takes 11 ms.\n\n\nIf you make a lot of changes to your .bashrc or .zsh, you can check out my auto-reloading script here:\n\nhttps://github.com/ndbroadbent/dotfiles/blob/master/bashrc/auto_reload.sh\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2012-10-29T00:00:00.000Z",
            "updated_at": "2012-10-29T00:00:00.000Z",
            "published_at": "2012-10-29T20:31:21.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8c1",
            "uuid": "48a3405e-2ec1-4b52-8776-34e9122a142e",
            "title": "capistrano_colors has been merged into capistrano",
            "slug": "capistrano_colors-has-been-merged-into-capistrano",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\n`capistrano_colors` has been [merged](https://github.com/capistrano/capistrano/pull/283) into `capistrano`. If you update `capistrano` to version `2.13.5`, you will no longer need to include `capistrano_colors` in your `Gemfile`.<br/>Don't forget to also remove `require 'capistrano_colors'` from `config/deploy.rb`.\\n\\nIf you've been using `capistrano` without the `capistrano_colors` gem, well, you've been missing out! Your logs will now be nicely formatted and colored by default, like this:\\n\\n![Capistrano logs with colors and formatting](__GHOST_URL__/content/images/posts/2012/11/cap_colors-resized-post.png)\\n\\nHowever, if you happen to be a big fan of black & white logs, you can just add `disable_log_formatters` to `config/deploy.rb`. See the [Formatting Logs wiki page](https://github.com/capistrano/capistrano/wiki/Formatting-Logs) for more information about customizing the colors and styles.\\n\\nThanks to [@stjernstrom](https://github.com/stjernstrom) for creating the `capistrano_colors` gem, and to [@carsomyr](https://github.com/carsomyr) for merging my pull request!\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p><code>capistrano_colors</code> has been <a href=\"https://github.com/capistrano/capistrano/pull/283\">merged</a> into <code>capistrano</code>. If you update <code>capistrano</code> to version <code>2.13.5</code>, you will no longer need to include <code>capistrano_colors</code> in your <code>Gemfile</code>.<br/>Don't forget to also remove <code>require 'capistrano_colors'</code> from <code>config/deploy.rb</code>.</p>\n<p>If you've been using <code>capistrano</code> without the <code>capistrano_colors</code> gem, well, you've been missing out! Your logs will now be nicely formatted and colored by default, like this:</p>\n<p><img src=\"__GHOST_URL__/content/images/posts/2012/11/cap_colors-resized-post.png\" alt=\"Capistrano logs with colors and formatting\" loading=\"lazy\"></p>\n<p>However, if you happen to be a big fan of black &amp; white logs, you can just add <code>disable_log_formatters</code> to <code>config/deploy.rb</code>. See the <a href=\"https://github.com/capistrano/capistrano/wiki/Formatting-Logs\">Formatting Logs wiki page</a> for more information about customizing the colors and styles.</p>\n<p>Thanks to <a href=\"https://github.com/stjernstrom\">@stjernstrom</a> for creating the <code>capistrano_colors</code> gem, and to <a href=\"https://github.com/carsomyr\">@carsomyr</a> for merging my pull request!</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "64",
            "plaintext": "capistrano_colors has been merged into capistrano. If you update capistrano to version 2.13.5, you will no longer need to include capistrano_colors in your Gemfile.\nDon't forget to also remove require 'capistrano_colors' from config/deploy.rb.\n\n\nIf you've been using capistrano without the capistrano_colors gem, well, you've been missing out! Your logs will now be nicely formatted and colored by default, like this:\n\n\n\n\n\nHowever, if you happen to be a big fan of black & white logs, you can just add disable_log_formatters to config/deploy.rb. See the Formatting Logs wiki page for more information about customizing the colors and styles.\n\n\nThanks to @stjernstrom for creating the capistrano_colors gem, and to @carsomyr for merging my pull request!\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2012-11-08T00:00:00.000Z",
            "updated_at": "2012-11-08T00:00:00.000Z",
            "published_at": "2012-11-08T12:55:17.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8c2",
            "uuid": "baf57e07-17d2-4013-b04d-2a73adb1f5ff",
            "title": "Automatically run 'bundle install' when Bundler can't find a gem",
            "slug": "automatically-run-bundle-install-if-bundler-raises-gemnotfound",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Every Rails developer has probably seen the following error:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"html\",\"version\":1,\"html\":\"<div class=\\\"highlight\\\"><pre><code class=\\\"bash\\\"><span class=\\\"sb\\\">Could not find &lt;gem&gt; in any of the sources</span>\\n<span style=\\\"color: #390;\\\">Run `bundle install` to install missing gems.</span>\\n</code></pre>\\n</div>\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"This happens if you or someone else adds a gem to your \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Gemfile\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", or if a gem version is updated in \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Gemfile.lock\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\",\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"and you forget to run \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"bundle install\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" before running a Rails command.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Here's a simple function that handles this automatically, called \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"bundle_install_wrapper()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\". It first tries to execute the command you pass to it.\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"However, if Bundler exits with status code \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"7\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" (\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"GemNotFound\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"), then it will run \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"bundle install\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\". Finally, it retries the original command.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"bundle_install_wrapper() {\\n  # Run command\\n  eval \\\"$@\\\"\\n  if [ $? = 7 ]; then\\n    # If command crashes, try a bundle install\\n    echo -e \\\"\\\\033[1;31m'$@' failed with exit code 7.\\\"\\n    echo \\\"This probably means that your system is missing gems defined in your Gemfile.\\\"\\n    echo -e \\\"Executing 'bundle install'...\\\\033[0m\\\"\\n    \\n    bundle install # If bundle install was successful, try running command again.\\n    if [ $? = 0 ]; then\\n      echo \\\"'bundle install' was successful. Retrying '$@'...\\\"\\n      eval \\\"$@\\\"\\n    fi\\n  fi\\n}\",\"language\":\"bash\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Usage\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h2\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Drop the function in your \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"~/.bashrc\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", and add aliases for rails commands:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"alias rs=\\\"bundle_install_wrapper rails server\\\"\\nalias rc=\\\"bundle_install_wrapper rails console\\\"\\n\\n# etc.\",\"language\":\"ruby\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"If you want aliases that support any Rails application, you can use something like this:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"# Run Rails commands on any version\\n\\nrails_cmd(){\\n\\n# Rails 3\\n\\nif [ -e ./script/rails ]; then bundle_install_wrapper rails3_with_editor $@\\n\\n# Rails <= 2\\n\\nelif [ -e ./script/$1 ]; then bundle_install_wrapper ./script/$@\\n\\n# Rails 4\\n\\nelif [ -e ./config.ru ] && grep -q Rails config.ru; then bundle_install_wrapper rails $@\\nelse echo \\\"== I don't think this is a Rails application!\\\"\\nfi\\n}\\nalias rs=\\\"rails_cmd server\\\"\\nalias rsd=\\\"rails_cmd server -u\\\"\\nalias rc=\\\"rails_cmd console\\\"\\nalias rg=\\\"rails_cmd generate\\\"\",\"language\":\"ruby\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"See the \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Ruby on Rails section in my .bashrc\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":null,\"target\":null,\"title\":null,\"url\":\"https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/ruby_on_rails.sh\"},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" if you're interested in more aliases,\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"and please leave a comment if you have any tips to share.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Every Rails developer has probably seen the following error:</p>\n<!--kg-card-begin: html-->\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"sb\">Could not find &lt;gem&gt; in any of the sources</span>\n<span style=\"color: #390;\">Run `bundle install` to install missing gems.</span>\n</code></pre>\n</div>\n<!--kg-card-end: html-->\n<p>This happens if you or someone else adds a gem to your <code>Gemfile</code>, or if a gem version is updated in <code>Gemfile.lock</code>,<br>and you forget to run <code>bundle install</code> before running a Rails command.</p><p>Here's a simple function that handles this automatically, called <code>bundle_install_wrapper()</code>. It first tries to execute the command you pass to it.<br>However, if Bundler exits with status code <code>7</code> (<code>GemNotFound</code>), then it will run <code>bundle install</code>. Finally, it retries the original command.</p><pre><code class=\"language-bash\">bundle_install_wrapper() {\n  # Run command\n  eval \"$@\"\n  if [ $? = 7 ]; then\n    # If command crashes, try a bundle install\n    echo -e \"\\033[1;31m'$@' failed with exit code 7.\"\n    echo \"This probably means that your system is missing gems defined in your Gemfile.\"\n    echo -e \"Executing 'bundle install'...\\033[0m\"\n    \n    bundle install # If bundle install was successful, try running command again.\n    if [ $? = 0 ]; then\n      echo \"'bundle install' was successful. Retrying '$@'...\"\n      eval \"$@\"\n    fi\n  fi\n}</code></pre><h2 id=\"usage\">Usage</h2><p>Drop the function in your <code>~/.bashrc</code>, and add aliases for rails commands:</p><pre><code class=\"language-ruby\">alias rs=\"bundle_install_wrapper rails server\"\nalias rc=\"bundle_install_wrapper rails console\"\n\n# etc.</code></pre><p>If you want aliases that support any Rails application, you can use something like this:</p><pre><code class=\"language-ruby\"># Run Rails commands on any version\n\nrails_cmd(){\n\n# Rails 3\n\nif [ -e ./script/rails ]; then bundle_install_wrapper rails3_with_editor $@\n\n# Rails &lt;= 2\n\nelif [ -e ./script/$1 ]; then bundle_install_wrapper ./script/$@\n\n# Rails 4\n\nelif [ -e ./config.ru ] &amp;&amp; grep -q Rails config.ru; then bundle_install_wrapper rails $@\nelse echo \"== I don't think this is a Rails application!\"\nfi\n}\nalias rs=\"rails_cmd server\"\nalias rsd=\"rails_cmd server -u\"\nalias rc=\"rails_cmd console\"\nalias rg=\"rails_cmd generate\"</code></pre><p>See the <a href=\"https://github.com/ndbroadbent/dotfiles/blob/master/bashrc/ruby_on_rails.sh\">Ruby on Rails section in my .bashrc</a> if you're interested in more aliases,<br>and please leave a comment if you have any tips to share.</p>",
            "comment_id": "65",
            "plaintext": "Every Rails developer has probably seen the following error:\n\n\n\nCould not find <gem> in any of the sources\nRun `bundle install` to install missing gems.\n\n\n\n\n\nThis happens if you or someone else adds a gem to your Gemfile, or if a gem version is updated in Gemfile.lock,\nand you forget to run bundle install before running a Rails command.\n\nHere's a simple function that handles this automatically, called bundle_install_wrapper(). It first tries to execute the command you pass to it.\nHowever, if Bundler exits with status code 7 (GemNotFound), then it will run bundle install. Finally, it retries the original command.\n\nbundle_install_wrapper() {\n  # Run command\n  eval \"$@\"\n  if [ $? = 7 ]; then\n    # If command crashes, try a bundle install\n    echo -e \"\\033[1;31m'$@' failed with exit code 7.\"\n    echo \"This probably means that your system is missing gems defined in your Gemfile.\"\n    echo -e \"Executing 'bundle install'...\\033[0m\"\n    \n    bundle install # If bundle install was successful, try running command again.\n    if [ $? = 0 ]; then\n      echo \"'bundle install' was successful. Retrying '$@'...\"\n      eval \"$@\"\n    fi\n  fi\n}\n\n\nUsage\n\nDrop the function in your ~/.bashrc, and add aliases for rails commands:\n\nalias rs=\"bundle_install_wrapper rails server\"\nalias rc=\"bundle_install_wrapper rails console\"\n\n# etc.\n\nIf you want aliases that support any Rails application, you can use something like this:\n\n# Run Rails commands on any version\n\nrails_cmd(){\n\n# Rails 3\n\nif [ -e ./script/rails ]; then bundle_install_wrapper rails3_with_editor $@\n\n# Rails <= 2\n\nelif [ -e ./script/$1 ]; then bundle_install_wrapper ./script/$@\n\n# Rails 4\n\nelif [ -e ./config.ru ] && grep -q Rails config.ru; then bundle_install_wrapper rails $@\nelse echo \"== I don't think this is a Rails application!\"\nfi\n}\nalias rs=\"rails_cmd server\"\nalias rsd=\"rails_cmd server -u\"\nalias rc=\"rails_cmd console\"\nalias rg=\"rails_cmd generate\"\n\nSee the Ruby on Rails section in my .bashrc if you're interested in more aliases,\nand please leave a comment if you have any tips to share.",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2012-12-18T00:00:00.000Z",
            "updated_at": "2024-04-19T00:52:46.000Z",
            "published_at": "2012-12-18T19:56:01.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8c3",
            "uuid": "b76bb218-9700-4ac7-9ab2-c83a8facddda",
            "title": "Open files generated by 'rails generate' in your editor",
            "slug": "open-files-generated-by-rails-generate-in-your-editor",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"<small>\\nNote: This post is for people who use the terminal to run Rails generators. It probably won't interest you if your editor has a plugin to run them.\\n</small>\\n\\nAfter running a Rails generator, you'll often need to edit the generated files in your text editor.\\n\\nRails 4 may soon have the ability to open generated files in your text editor if you pass the `--editor` option on the command line.\\nYou can [follow my pull request for more details](https://github.com/rails/rails/pull/8553).\\n\\nIf you use the `--editor` option (or its `-e` alias), the generator will open all generated or copied files in your text editor.\\nThe default editor is your `GUI_EDITOR` or `EDITOR` environment variable, but you can set the editor manually with `--editor=manual-code-editor`.\\n\\nRails 3 isn't accepting any new features, so here's how you can use the `--editor` option for your Rails 3 apps:\\n\\n## Single Rails 3 app\\n\\nTo install the `--editor` option in a single Rails 3 app, run the following command from your app directory:\\n\\n```bash\\ncurl https://gist.github.com/raw/4342095/rails -o script/rails\\n```\\n\\nThis will update `script/rails`, and you can commit the change.\\n\\n## Globally for all Rails 3 apps\\n\\nIf you are developing a lot of different apps, it might be too much hassle to update all of them. Instead, you can download the custom `rails` script to your `/bin` directory, and add some shortcut functions to your `.bashrc`.\\n\\n### Download script:\\n\\n```bash\\nsudo curl https://gist.github.com/raw/4342095/rails3_with_editor -o /bin/rails3_with_editor\\nsudo chmod +x /bin/rails3_with_editor\\n```\\n\\n### Add shortcut functions:\\n\\nAdd the following to your `~/.bashrc`:\\n\\n```bash\\nrge() { rails3_with_editor generate \\\"$@\\\" --editor; }\\nrgm() { rails3_with_editor generate migration \\\"$@\\\" --editor; }\\n```\\n\\nNow you can run `rgm` to generate a migration from any Rails 3 app.\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<small>\nNote: This post is for people who use the terminal to run Rails generators. It probably won't interest you if your editor has a plugin to run them.\n</small>\n<p>After running a Rails generator, you'll often need to edit the generated files in your text editor.</p>\n<p>Rails 4 may soon have the ability to open generated files in your text editor if you pass the <code>--editor</code> option on the command line.<br>\nYou can <a href=\"https://github.com/rails/rails/pull/8553\">follow my pull request for more details</a>.</p>\n<p>If you use the <code>--editor</code> option (or its <code>-e</code> alias), the generator will open all generated or copied files in your text editor.<br>\nThe default editor is your <code>GUI_EDITOR</code> or <code>EDITOR</code> environment variable, but you can set the editor manually with <code>--editor=manual-code-editor</code>.</p>\n<p>Rails 3 isn't accepting any new features, so here's how you can use the <code>--editor</code> option for your Rails 3 apps:</p>\n<h2 id=\"single-rails-3-app\">Single Rails 3 app</h2>\n<p>To install the <code>--editor</code> option in a single Rails 3 app, run the following command from your app directory:</p>\n<pre><code class=\"language-bash\">curl https://gist.github.com/raw/4342095/rails -o script/rails\n</code></pre>\n<p>This will update <code>script/rails</code>, and you can commit the change.</p>\n<h2 id=\"globally-for-all-rails-3-apps\">Globally for all Rails 3 apps</h2>\n<p>If you are developing a lot of different apps, it might be too much hassle to update all of them. Instead, you can download the custom <code>rails</code> script to your <code>/bin</code> directory, and add some shortcut functions to your <code>.bashrc</code>.</p>\n<h3 id=\"download-script\">Download script:</h3>\n<pre><code class=\"language-bash\">sudo curl https://gist.github.com/raw/4342095/rails3_with_editor -o /bin/rails3_with_editor\nsudo chmod +x /bin/rails3_with_editor\n</code></pre>\n<h3 id=\"add-shortcut-functions\">Add shortcut functions:</h3>\n<p>Add the following to your <code>~/.bashrc</code>:</p>\n<pre><code class=\"language-bash\">rge() { rails3_with_editor generate \"$@\" --editor; }\nrgm() { rails3_with_editor generate migration \"$@\" --editor; }\n</code></pre>\n<p>Now you can run <code>rgm</code> to generate a migration from any Rails 3 app.</p>\n",
            "comment_id": "66",
            "plaintext": "\nNote: This post is for people who use the terminal to run Rails generators. It probably won't interest you if your editor has a plugin to run them.\n\n\n\nAfter running a Rails generator, you'll often need to edit the generated files in your text editor.\n\n\nRails 4 may soon have the ability to open generated files in your text editor if you pass the --editor option on the command line.\n\nYou can follow my pull request for more details.\n\n\nIf you use the --editor option (or its -e alias), the generator will open all generated or copied files in your text editor.\n\nThe default editor is your GUI_EDITOR or EDITOR environment variable, but you can set the editor manually with --editor=manual-code-editor.\n\n\nRails 3 isn't accepting any new features, so here's how you can use the --editor option for your Rails 3 apps:\n\n\n\nSingle Rails 3 app\n\n\nTo install the --editor option in a single Rails 3 app, run the following command from your app directory:\n\n\ncurl https://gist.github.com/raw/4342095/rails -o script/rails\n\n\n\nThis will update script/rails, and you can commit the change.\n\n\n\nGlobally for all Rails 3 apps\n\n\nIf you are developing a lot of different apps, it might be too much hassle to update all of them. Instead, you can download the custom rails script to your /bin directory, and add some shortcut functions to your .bashrc.\n\n\n\nDownload script:\n\n\nsudo curl https://gist.github.com/raw/4342095/rails3_with_editor -o /bin/rails3_with_editor\nsudo chmod +x /bin/rails3_with_editor\n\n\n\n\nAdd shortcut functions:\n\n\nAdd the following to your ~/.bashrc:\n\n\nrge() { rails3_with_editor generate \"$@\" --editor; }\nrgm() { rails3_with_editor generate migration \"$@\" --editor; }\n\n\n\nNow you can run rgm to generate a migration from any Rails 3 app.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2012-12-20T00:00:00.000Z",
            "updated_at": "2024-04-19T01:19:14.000Z",
            "published_at": "2012-12-20T13:02:20.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8c4",
            "uuid": "61b853bf-3110-4b5b-87ab-a30e1d164733",
            "title": "Ubuntu Keyboard Shortcut: Open a selected file in Sublime Text 2",
            "slug": "keyboard-shortcut-to-open-selected-file-in-sublime-text-2",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nWhenever I'm looking at backtraces, logs, or failing tests in the terminal, I often need to open one of those files in my text editor. It was previously a semi-arduous process that involved highlighting, copying, pasting and the return key. Now, all I need to do is double-click or highlight a line, and then press a keyboard shortcut to open that file & line in my text editor (currently [Sublime Text 2](https://www.sublimetext.com/2).) I've also added a thing to my `$PROMPT_SCRIPT` that stores my terminal's most recent directory in `~/.cwd~`, so that the script can handle relative paths. (Most of the time I'm just in the root folder of a given project.)\\n\\nOne extra feature for Ruby developers is support for backtrace lines like this:\\n\\n```ruby\\napp/models/post.rb:225:in `sharing_is_caring'\\n```\\n\\nIf you double-click that file, you'll end up with the following selection: `app/models/post.rb:225:in`. The script will automatically strip the trailing `:in`, so you can just double-click instead of manually highlighting.\\n\\n### Requirements\\n\\n- Ubuntu\\n- xclip (install with `sudo apt-get install xclip`)\\n- A text editor, such as [Sublime Text 2](https://www.sublimetext.com/2).\\n\\n### Installation\\n\\n- Download the [open_selected_in_editor](https://github.com/ndbroadbent/dotfiles/blob/master/bin/open_selected_in_editor) script to somewhere like `~/bin`.\\n\\n```bash\\nmkdir -p ~/bin\\nwget https://raw.github.com/ndbroadbent/dotfiles/master/bin/open_selected_in_editor -O ~/bin/open_selected_in_editor\\nchmod +x ~/bin/open_selected_in_editor\\n```\\n\\n- Modify the script to use your preferred text editor\\n\\n### Set up current working directory support\\n\\nAdd the following line to your `~/.bashrc`:\\n\\n```bash\\nPROMPT_COMMAND+=\\\"pwd > ~/.cwd~;\\\"\\n```\\n\\nThis means that every time you press return in the terminal, the script can use your current directory to determine an absolute path for a highlighted file. It's not completely foolproof, but good enough for me.\\n\\n### Set up a keyboard shortcut in Ubuntu 12.04\\n\\n- Go to **System Settings** -> **Keyboard** -> **Shortcuts** -> **Custom Shortcuts**\\n- Click the **+** to add a new shortcut with:\\n  - Name: **Open selected in editor**\\n  - Command: **~/bin/open_selected_in_editor**\\n- Set the keyboard shortcut. I like _Ctrl+Shift+X_.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2013/03/keyboard_shortcuts.jpg\\\" alt=\\\"Ubuntu Keyboard Shortcuts\\\" />\\n\\nAll done! Now you can highlight a filename in the terminal, press your keyboard shortcut, and open it in your editor without the need to copy & paste filenames. Please let me know if you need any help, but I'm sorry I don't know how to do this in OS X or Windows.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Whenever I'm looking at backtraces, logs, or failing tests in the terminal, I often need to open one of those files in my text editor. It was previously a semi-arduous process that involved highlighting, copying, pasting and the return key. Now, all I need to do is double-click or highlight a line, and then press a keyboard shortcut to open that file &amp; line in my text editor (currently <a href=\"https://www.sublimetext.com/2\">Sublime Text 2</a>.) I've also added a thing to my <code>$PROMPT_SCRIPT</code> that stores my terminal's most recent directory in <code>~/.cwd~</code>, so that the script can handle relative paths. (Most of the time I'm just in the root folder of a given project.)</p>\n<p>One extra feature for Ruby developers is support for backtrace lines like this:</p>\n<pre><code class=\"language-ruby\">app/models/post.rb:225:in `sharing_is_caring'\n</code></pre>\n<p>If you double-click that file, you'll end up with the following selection: <code>app/models/post.rb:225:in</code>. The script will automatically strip the trailing <code>:in</code>, so you can just double-click instead of manually highlighting.</p>\n<h3 id=\"requirements\">Requirements</h3>\n<ul>\n<li>Ubuntu</li>\n<li>xclip (install with <code>sudo apt-get install xclip</code>)</li>\n<li>A text editor, such as <a href=\"https://www.sublimetext.com/2\">Sublime Text 2</a>.</li>\n</ul>\n<h3 id=\"installation\">Installation</h3>\n<ul>\n<li>Download the <a href=\"https://github.com/ndbroadbent/dotfiles/blob/master/bin/open_selected_in_editor\">open_selected_in_editor</a> script to somewhere like <code>~/bin</code>.</li>\n</ul>\n<pre><code class=\"language-bash\">mkdir -p ~/bin\nwget https://raw.github.com/ndbroadbent/dotfiles/master/bin/open_selected_in_editor -O ~/bin/open_selected_in_editor\nchmod +x ~/bin/open_selected_in_editor\n</code></pre>\n<ul>\n<li>Modify the script to use your preferred text editor</li>\n</ul>\n<h3 id=\"set-up-current-working-directory-support\">Set up current working directory support</h3>\n<p>Add the following line to your <code>~/.bashrc</code>:</p>\n<pre><code class=\"language-bash\">PROMPT_COMMAND+=\"pwd &gt; ~/.cwd~;\"\n</code></pre>\n<p>This means that every time you press return in the terminal, the script can use your current directory to determine an absolute path for a highlighted file. It's not completely foolproof, but good enough for me.</p>\n<h3 id=\"set-up-a-keyboard-shortcut-in-ubuntu-1204\">Set up a keyboard shortcut in Ubuntu 12.04</h3>\n<ul>\n<li>Go to <strong>System Settings</strong> -&gt; <strong>Keyboard</strong> -&gt; <strong>Shortcuts</strong> -&gt; <strong>Custom Shortcuts</strong></li>\n<li>Click the <strong>+</strong> to add a new shortcut with:\n<ul>\n<li>Name: <strong>Open selected in editor</strong></li>\n<li>Command: <strong>~/bin/open_selected_in_editor</strong></li>\n</ul>\n</li>\n<li>Set the keyboard shortcut. I like <em>Ctrl+Shift+X</em>.</li>\n</ul>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2013/03/keyboard_shortcuts.jpg\" alt=\"Ubuntu Keyboard Shortcuts\">\n<p>All done! Now you can highlight a filename in the terminal, press your keyboard shortcut, and open it in your editor without the need to copy &amp; paste filenames. Please let me know if you need any help, but I'm sorry I don't know how to do this in OS X or Windows.</p>\n",
            "comment_id": "67",
            "plaintext": "Whenever I'm looking at backtraces, logs, or failing tests in the terminal, I often need to open one of those files in my text editor. It was previously a semi-arduous process that involved highlighting, copying, pasting and the return key. Now, all I need to do is double-click or highlight a line, and then press a keyboard shortcut to open that file & line in my text editor (currently Sublime Text 2.) I've also added a thing to my $PROMPT_SCRIPT that stores my terminal's most recent directory in ~/.cwd~, so that the script can handle relative paths. (Most of the time I'm just in the root folder of a given project.)\n\n\nOne extra feature for Ruby developers is support for backtrace lines like this:\n\n\napp/models/post.rb:225:in `sharing_is_caring'\n\n\n\nIf you double-click that file, you'll end up with the following selection: app/models/post.rb:225:in. The script will automatically strip the trailing :in, so you can just double-click instead of manually highlighting.\n\n\n\nRequirements\n\n\n * Ubuntu\n * xclip (install with sudo apt-get install xclip)\n * A text editor, such as Sublime Text 2.\n\n\n\nInstallation\n\n\n * Download the open_selected_in_editor script to somewhere like ~/bin.\n\n\nmkdir -p ~/bin\nwget https://raw.github.com/ndbroadbent/dotfiles/master/bin/open_selected_in_editor -O ~/bin/open_selected_in_editor\nchmod +x ~/bin/open_selected_in_editor\n\n\n\n * Modify the script to use your preferred text editor\n\n\n\nSet up current working directory support\n\n\nAdd the following line to your ~/.bashrc:\n\n\nPROMPT_COMMAND+=\"pwd > ~/.cwd~;\"\n\n\n\nThis means that every time you press return in the terminal, the script can use your current directory to determine an absolute path for a highlighted file. It's not completely foolproof, but good enough for me.\n\n\n\nSet up a keyboard shortcut in Ubuntu 12.04\n\n\n * Go to System Settings -> Keyboard -> Shortcuts -> Custom Shortcuts\n * Click the + to add a new shortcut with:\n   \n   * Name: Open selected in editor\n   * Command: ~/bin/open_selected_in_editor\n   \n * Set the keyboard shortcut. I like Ctrl+Shift+X.\n\n\n\nAll done! Now you can highlight a filename in the terminal, press your keyboard shortcut, and open it in your editor without the need to copy & paste filenames. Please let me know if you need any help, but I'm sorry I don't know how to do this in OS X or Windows.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2013-03-29T00:00:00.000Z",
            "updated_at": "2024-04-19T01:17:04.000Z",
            "published_at": "2013-03-29T23:44:58.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8c5",
            "uuid": "3f9b16fb-db1b-4f33-8910-b80add6b3b67",
            "title": "Raspberry Pi Microwave",
            "slug": "raspberry-pi-powered-microwave",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nA few months ago, I was inspired by [this post](https://www.reddit.com/r/CrazyIdeas/comments/1djrnx/food_items_should_have_qr_codes_that_instruct_the/) on Reddit, titled: <strong>Food items should have QR codes that instruct the microwave exactly what to do. Like high for 2 minutes, let stand 1 minute, medium 1 minutes.</strong>.\\n\\nI thought this was a pretty cool idea, and that it would be a fun project for a Raspberry Pi. I agreed with the people who thought using UPC barcodes would be better, since products already have them, so I went with a barcode scanner + online product database.\\n\\nHere's a summary of the features that I've added to my microwave:\\n\\n- Re-designed touchpad\\n- Nicer sounds\\n- Clock is automatically updated from the internet\\n- Can be controlled with voice commands\\n- Can use a barcode scanner to look up cooking instructions from an online database\\n- There weren't any online microwave cooking databases around, so I made one: [https://microwavecookingdb.com](https://microwavecookingdb.com)\\n- The microwave has a web page so you can control it from your phone (why not), and set up cooking instructions for products\\n- Tweets after it's finished cooking something (See [https://twitter.com/rbmicrowave](https://twitter.com/rbmicrowave))\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Demo Video\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h1\"},{\"type\":\"embed\",\"version\":1,\"url\":\"https://www.youtube.com/watch?v=e2YtARzJTys\",\"embedType\":\"video\",\"html\":\"<iframe width=\\\"200\\\" height=\\\"113\\\" src=\\\"https://www.youtube.com/embed/e2YtARzJTys?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\\" referrerpolicy=\\\"strict-origin-when-cross-origin\\\" allowfullscreen title=\\\"Raspberry Pi Microwave - Feature Demo\\\"></iframe>\",\"metadata\":{\"title\":\"Raspberry Pi Microwave - Feature Demo\",\"author_name\":\"Made By Nathan\",\"author_url\":\"https://www.youtube.com/@madebynathandotcom\",\"type\":\"video\",\"height\":113,\"width\":200,\"version\":\"1.0\",\"provider_name\":\"YouTube\",\"provider_url\":\"https://www.youtube.com/\",\"thumbnail_height\":360,\"thumbnail_width\":480,\"thumbnail_url\":\"https://i.ytimg.com/vi/e2YtARzJTys/hqdefault.jpg\",\"html\":\"<iframe width=\\\"200\\\" height=\\\"113\\\" src=\\\"https://www.youtube.com/embed/e2YtARzJTys?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\\" referrerpolicy=\\\"strict-origin-when-cross-origin\\\" allowfullscreen title=\\\"Raspberry Pi Microwave - Feature Demo\\\"></iframe>\"},\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Using a Raspberry Pi to cook a Raspberry Pie\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h1\"},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Here's the recipe I followed.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":null,\"target\":null,\"title\":null,\"url\":\"https://frugalfastfun.blogspot.co.nz/2009/08/surprise-pies-using-microwave.html\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"gallery\",\"version\":1,\"images\":[{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/a_slice_of_pi.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"a_slice_of_pi.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/cooking_pie_filling.jpg\",\"width\":1258,\"height\":707,\"fileName\":\"cooking_pie_filling.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/ingredients.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"ingredients.jpg\"},{\"row\":1,\"src\":\"__GHOST_URL__/content/images/2024/04/mixing.jpg\",\"width\":768,\"height\":1024,\"fileName\":\"mixing.jpg\"},{\"row\":1,\"src\":\"__GHOST_URL__/content/images/2024/04/raspberry_pi_raspberry_pie.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"raspberry_pi_raspberry_pie.jpg\"}],\"caption\":\"\"},{\"children\":[],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Hardware\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h1\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I used a microwave with a touchpad, and discovered that the touchpad was a button matrix. I took photos of the touchpad and traced the wires, so that I could tell which pins corresponded to which buttons.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"gallery\",\"version\":1,\"images\":[{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/original_touchpad.jpg\",\"width\":401,\"height\":1000,\"fileName\":\"original_touchpad.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/touchpad_no_traces.jpg\",\"width\":800,\"height\":1067,\"fileName\":\"touchpad_no_traces.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/touchpad_traces.jpg\",\"width\":800,\"height\":1067,\"fileName\":\"touchpad_traces.jpg\"}],\"caption\":\"\"},{\"children\":[],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I initially wanted to put everything in a case outside the microwave, but I decided that it would be more challenging and fun to try and fit everything inside. Here's all the PCB revisions, before I settled on a design that would fit neatly on top of the microwave's original PCB.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"gallery\",\"version\":1,\"images\":[{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/pcb_1.jpg\",\"width\":1052,\"height\":525,\"fileName\":\"pcb_1.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/pcb_2.jpg\",\"width\":820,\"height\":620,\"fileName\":\"pcb_2.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/pcb_3.jpg\",\"width\":507,\"height\":715,\"fileName\":\"pcb_3.jpg\"}],\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I used shift registers and optocouplers to control the touchpad pins. To listen for touchpad presses, an output shift register scans one line at a time on the first touchpad layer, and an input shift register listens for connections to the second layer.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I unsoldered the touchpad connector from the original circuit board, and replaced it with a row of pin headers. I then used the original touchpad connector on my PCB, so that my circuit acts as a kind of proxy for button presses.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Here's the final product after transferring toner, etching, drilling, and soldering. (I had to use the ribbon cables to save space.)\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"gallery\",\"version\":1,\"images\":[{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/ready_to_etch.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"ready_to_etch.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/soldered.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"soldered.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/pcb_bottom.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"pcb_bottom.jpg\"}],\"caption\":\"\"},{\"children\":[],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"And here's how it fits on top of the microwave controller:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"gallery\",\"version\":1,\"images\":[{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/plugged_in1.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"plugged_in1.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/plugged_in2.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"plugged_in2.jpg\"}],\"caption\":\"\"},{\"children\":[],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"When I peeled off the old touchpad overlay, it became wrinkled and ugly, so I thought I may as well have a go at redesigning the interface. My goal was to get rid of the features I don't really use, and make the basic functions more convenient. The top two rows of buttons are now dedicated to \\\"one touch\\\" cooking times, for either \\\"high\\\" or \\\"medium\\\" power. You can also set the time and power manually.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"html\",\"version\":1,\"html\":\"<a class=\\\"image\\\" href=\\\"__GHOST_URL__/content/images/posts/2013/07/touchpad.jpg\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\\n  <img style=\\\"margin: auto;\\\" width=\\\"145\\\" src=\\\"__GHOST_URL__/content/images/posts/2013/07/touchpad-resized-post.jpg\\\" alt=\\\"Touchpad\\\" />\\n</a>\\n\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"You might have noticed that I started the project with the intention of using an \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Arduino Nano\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":null,\"target\":null,\"title\":null,\"url\":\"https://arduino.cc/en/Main/ArduinoBoardNano\"},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" plugged into a Raspberry Pi USB port. This was because I was a) familiar with the Arduino, b) not familiar with the Raspberry Pi GPIO, and c) thought it would make testing and debugging a bit easier, since I could just plug the Arduino into my laptop.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"However, it turns out that my Raspberry Pi had some issues with the arduino's FTDI chip if the Raspberry Pi was turned on while the Arduino was plugged in. It wouldn't recognize the Arduino until I unplugged it, and then plugged it back in again.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"So I decided to make an Arduino Nano => Raspberry Pi GPIO adapter, and port my Arduino code to the Raspberry Pi GPIO using the \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"WiringPi\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":null,\"target\":null,\"title\":null,\"url\":\"https://wiringpi.com/\"},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" library.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"gallery\",\"version\":1,\"images\":[{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/arduino_raspberry_adapter.jpg\",\"width\":565,\"height\":638,\"fileName\":\"arduino_raspberry_adapter.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/raspberry_adapter_top.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"raspberry_adapter_top.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/raspberry_adapter_bottom.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"raspberry_adapter_bottom.jpg\"},{\"row\":1,\"src\":\"__GHOST_URL__/content/images/2024/04/raspberry_adapter_connected.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"raspberry_adapter_connected.jpg\"}],\"caption\":\"\"},{\"children\":[],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Raspberry Pi is powered by a USB hub, which is also plugged into the Raspberry Pi's USB port. To power the hub, I wired up a power adapter to the microwave's power source. There's also a USB powered speaker, USB microphone, wifi adapter, and barcode scanner.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"gallery\",\"version\":1,\"images\":[{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/power_adapter.jpg\",\"width\":768,\"height\":1024,\"fileName\":\"power_adapter.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/usb_hub.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"usb_hub.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/microphone_wifi.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"microphone_wifi.jpg\"}],\"caption\":\"\"},{\"children\":[],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"markdown\",\"version\":1,\"markdown\":\"# Microwave Software\\n\\nAll the software running on the Raspberry Pi is hosted at: [https://github.com/ndbroadbent/raspberry_picrowave](https://github.com/ndbroadbent/raspberry_picrowave).\\n\\nThere are 4 main components:\\n\\n## Microwave Daemon\\n\\nThis runs the code that listens for touchpad button presses, and controls the microwave. It also accepts TCP connections so that other programs can send commands or request information about the microwave's status.\\n\\n## Barcode Instructions\\n\\nThis program listens to the barcode scanner, and requests product information from the Microwave Cooking Database. It also runs the cooking programs.\\n\\n## Voice Control\\n\\nI used [PocketSphinx](https://cmusphinx.sourceforge.net/) for voice recognition, which worked very well with my small [corpus](https://github.com/ndbroadbent/raspberry_picrowave/blob/master/voice_control/corpus.txt). I embedded Ruby in the [pocketsphinx_contiunous](https://github.com/ndbroadbent/raspberry_picrowave/blob/master/voice_control/pocketsphinx_microwave.c) C program, so that it would be easier to [script voice commands](https://github.com/ndbroadbent/raspberry_picrowave/blob/master/voice_control/voice_control.rb) and send commands to the microwave daemon. It turns out that the acoustics of my kitchen seem to mess up the recognition, so it won't be used very often.\\n\\n## Sinatra App\\n\\nThere's a simple [sinatra web application](https://github.com/ndbroadbent/raspberry_picrowave/blob/master/sinatra_app/microwave_webapp.rb) that lets you control the microwave from your phone or computer. This may not be a big selling point. It uses a [JavaScript EventSource](https://github.com/ndbroadbent/raspberry_picrowave/blob/master/sinatra_app/public/application.js) to push updates to the browser, so you could have hundreds of users connected to your microwave at once.\\n\\nIf any barcodes are scanned that can't be found on the Microwave Cooking Database, this webpage will display the unknown barcodes and provide a link to add the new product.\\n\\n## Microwave Cooking Database\\n\\nI couldn't find any existing websites with a database of microwave cooking instructions, so I made one.\\n\\n<a class=\\\"image\\\" href=\\\"__GHOST_URL__/content/images/posts/2013/07/mwcdb.png\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\\n  <img src=\\\"__GHOST_URL__/content/images/posts/2013/07/mwcdb-resized-post.png\\\" alt=\\\"Microwave Cooking Database\\\" />\\n</a>\\n\\n> UPDATE: It used to be live at https://www.microwavecookingdb.com/, but the domain has now expired. Sorry!\\n\\nIf cooking instructions are posted for a 1000W microwave, you can request the instructions for a 700W microwave, and the cooking times will be automatically adjusted.\\n\\nSo if you're also planning on making an internet connected microwave with a barcode scanner, please feel free to sign up and add some products.\\n\\n<!--\\n# Patents?\\n\\nNope, this is just a fun project. [Microwaves with barcode scanners already exist](https://www.amazon.com/Beyond-WBYMW1-850-Watt-Microwave-Scanning/dp/B0000C8W7Z/ref=cm_cr_pr_product_top), and [most](https://www.google.com/patents/US4323773) of these [features](https://www.google.com/patents/US6124583) are [already](https://www.google.com/patents/US6444965) [patented](https://www.google.com/patents/EP1117275A2?cl=en). -->\\n\\n# Thanks for reading!\\n\\nI'd be interested to hear if you build something similar!\\n\\n<!-- , or make use of [https://www.microwavecookingdb.com](https://www.microwavecookingdb.com). -->\\n\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>A few months ago, I was inspired by <a href=\"https://www.reddit.com/r/CrazyIdeas/comments/1djrnx/food_items_should_have_qr_codes_that_instruct_the/\">this post</a> on Reddit, titled: <strong>Food items should have QR codes that instruct the microwave exactly what to do. Like high for 2 minutes, let stand 1 minute, medium 1 minutes.</strong>.</p>\n<p>I thought this was a pretty cool idea, and that it would be a fun project for a Raspberry Pi. I agreed with the people who thought using UPC barcodes would be better, since products already have them, so I went with a barcode scanner + online product database.</p>\n<p>Here's a summary of the features that I've added to my microwave:</p>\n<ul>\n<li>Re-designed touchpad</li>\n<li>Nicer sounds</li>\n<li>Clock is automatically updated from the internet</li>\n<li>Can be controlled with voice commands</li>\n<li>Can use a barcode scanner to look up cooking instructions from an online database</li>\n<li>There weren't any online microwave cooking databases around, so I made one: <a href=\"https://microwavecookingdb.com\">https://microwavecookingdb.com</a></li>\n<li>The microwave has a web page so you can control it from your phone (why not), and set up cooking instructions for products</li>\n<li>Tweets after it's finished cooking something (See <a href=\"https://twitter.com/rbmicrowave\">https://twitter.com/rbmicrowave</a>)</li>\n</ul>\n<h1 id=\"demo-video\">Demo Video</h1><figure class=\"kg-card kg-embed-card\"><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/e2YtARzJTys?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\" title=\"Raspberry Pi Microwave - Feature Demo\"></iframe></figure><h1 id=\"using-a-raspberry-pi-to-cook-a-raspberry-pie\">Using a Raspberry Pi to cook a Raspberry Pie</h1><p><a href=\"https://frugalfastfun.blogspot.co.nz/2009/08/surprise-pies-using-microwave.html\">Here's the recipe I followed.</a></p><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/a_slice_of_pi.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/a_slice_of_pi.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/a_slice_of_pi.jpg 1000w, __GHOST_URL__/content/images/2024/04/a_slice_of_pi.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/cooking_pie_filling.jpg\" width=\"1258\" height=\"707\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/cooking_pie_filling.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/cooking_pie_filling.jpg 1000w, __GHOST_URL__/content/images/2024/04/cooking_pie_filling.jpg 1258w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/ingredients.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/ingredients.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/ingredients.jpg 1000w, __GHOST_URL__/content/images/2024/04/ingredients.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/mixing.jpg\" width=\"768\" height=\"1024\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/mixing.jpg 600w, __GHOST_URL__/content/images/2024/04/mixing.jpg 768w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/raspberry_pi_raspberry_pie.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/raspberry_pi_raspberry_pie.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/raspberry_pi_raspberry_pie.jpg 1000w, __GHOST_URL__/content/images/2024/04/raspberry_pi_raspberry_pie.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div></div></div></figure><p></p><h1 id=\"hardware\">Hardware</h1><p>I used a microwave with a touchpad, and discovered that the touchpad was a button matrix. I took photos of the touchpad and traced the wires, so that I could tell which pins corresponded to which buttons.</p><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/original_touchpad.jpg\" width=\"401\" height=\"1000\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/touchpad_no_traces.jpg\" width=\"800\" height=\"1067\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/touchpad_no_traces.jpg 600w, __GHOST_URL__/content/images/2024/04/touchpad_no_traces.jpg 800w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/touchpad_traces.jpg\" width=\"800\" height=\"1067\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/touchpad_traces.jpg 600w, __GHOST_URL__/content/images/2024/04/touchpad_traces.jpg 800w\" sizes=\"(min-width: 720px) 720px\"></div></div></div></figure><p></p><p>I initially wanted to put everything in a case outside the microwave, but I decided that it would be more challenging and fun to try and fit everything inside. Here's all the PCB revisions, before I settled on a design that would fit neatly on top of the microwave's original PCB.</p><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/pcb_1.jpg\" width=\"1052\" height=\"525\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/pcb_1.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/pcb_1.jpg 1000w, __GHOST_URL__/content/images/2024/04/pcb_1.jpg 1052w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/pcb_2.jpg\" width=\"820\" height=\"620\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/pcb_2.jpg 600w, __GHOST_URL__/content/images/2024/04/pcb_2.jpg 820w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/pcb_3.jpg\" width=\"507\" height=\"715\" loading=\"lazy\" alt=\"\"></div></div></div></figure><p>I used shift registers and optocouplers to control the touchpad pins. To listen for touchpad presses, an output shift register scans one line at a time on the first touchpad layer, and an input shift register listens for connections to the second layer.</p><p>I unsoldered the touchpad connector from the original circuit board, and replaced it with a row of pin headers. I then used the original touchpad connector on my PCB, so that my circuit acts as a kind of proxy for button presses.</p><p>Here's the final product after transferring toner, etching, drilling, and soldering. (I had to use the ribbon cables to save space.)</p><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/ready_to_etch.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/ready_to_etch.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/ready_to_etch.jpg 1000w, __GHOST_URL__/content/images/2024/04/ready_to_etch.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/soldered.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/soldered.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/soldered.jpg 1000w, __GHOST_URL__/content/images/2024/04/soldered.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/pcb_bottom.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/pcb_bottom.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/pcb_bottom.jpg 1000w, __GHOST_URL__/content/images/2024/04/pcb_bottom.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div></div></div></figure><p></p><p>And here's how it fits on top of the microwave controller:</p><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/plugged_in1.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/plugged_in1.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/plugged_in1.jpg 1000w, __GHOST_URL__/content/images/2024/04/plugged_in1.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/plugged_in2.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/plugged_in2.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/plugged_in2.jpg 1000w, __GHOST_URL__/content/images/2024/04/plugged_in2.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div></div></div></figure><p></p><p>When I peeled off the old touchpad overlay, it became wrinkled and ugly, so I thought I may as well have a go at redesigning the interface. My goal was to get rid of the features I don't really use, and make the basic functions more convenient. The top two rows of buttons are now dedicated to \"one touch\" cooking times, for either \"high\" or \"medium\" power. You can also set the time and power manually.</p>\n<!--kg-card-begin: html-->\n<a class=\"image\" href=\"__GHOST_URL__/content/images/posts/2013/07/touchpad.jpg\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img style=\"margin: auto;\" width=\"145\" src=\"__GHOST_URL__/content/images/posts/2013/07/touchpad-resized-post.jpg\" alt=\"Touchpad\" />\n</a>\n\n<!--kg-card-end: html-->\n<p>You might have noticed that I started the project with the intention of using an <a href=\"https://arduino.cc/en/Main/ArduinoBoardNano\">Arduino Nano</a> plugged into a Raspberry Pi USB port. This was because I was a) familiar with the Arduino, b) not familiar with the Raspberry Pi GPIO, and c) thought it would make testing and debugging a bit easier, since I could just plug the Arduino into my laptop.</p><p>However, it turns out that my Raspberry Pi had some issues with the arduino's FTDI chip if the Raspberry Pi was turned on while the Arduino was plugged in. It wouldn't recognize the Arduino until I unplugged it, and then plugged it back in again.</p><p>So I decided to make an Arduino Nano =&gt; Raspberry Pi GPIO adapter, and port my Arduino code to the Raspberry Pi GPIO using the <a href=\"https://wiringpi.com/\">WiringPi</a> library.</p><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/arduino_raspberry_adapter.jpg\" width=\"565\" height=\"638\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/raspberry_adapter_top.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/raspberry_adapter_top.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/raspberry_adapter_top.jpg 1000w, __GHOST_URL__/content/images/2024/04/raspberry_adapter_top.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/raspberry_adapter_bottom.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/raspberry_adapter_bottom.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/raspberry_adapter_bottom.jpg 1000w, __GHOST_URL__/content/images/2024/04/raspberry_adapter_bottom.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/raspberry_adapter_connected.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/raspberry_adapter_connected.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/raspberry_adapter_connected.jpg 1000w, __GHOST_URL__/content/images/2024/04/raspberry_adapter_connected.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div></div></div></figure><p></p><p>The Raspberry Pi is powered by a USB hub, which is also plugged into the Raspberry Pi's USB port. To power the hub, I wired up a power adapter to the microwave's power source. There's also a USB powered speaker, USB microphone, wifi adapter, and barcode scanner.</p><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/power_adapter.jpg\" width=\"768\" height=\"1024\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/power_adapter.jpg 600w, __GHOST_URL__/content/images/2024/04/power_adapter.jpg 768w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/usb_hub.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/usb_hub.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/usb_hub.jpg 1000w, __GHOST_URL__/content/images/2024/04/usb_hub.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/microphone_wifi.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/microphone_wifi.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/microphone_wifi.jpg 1000w, __GHOST_URL__/content/images/2024/04/microphone_wifi.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div></div></div></figure><p></p><h1 id=\"microwave-software\">Microwave Software</h1>\n<p>All the software running on the Raspberry Pi is hosted at: <a href=\"https://github.com/ndbroadbent/raspberry_picrowave\">https://github.com/ndbroadbent/raspberry_picrowave</a>.</p>\n<p>There are 4 main components:</p>\n<h2 id=\"microwave-daemon\">Microwave Daemon</h2>\n<p>This runs the code that listens for touchpad button presses, and controls the microwave. It also accepts TCP connections so that other programs can send commands or request information about the microwave's status.</p>\n<h2 id=\"barcode-instructions\">Barcode Instructions</h2>\n<p>This program listens to the barcode scanner, and requests product information from the Microwave Cooking Database. It also runs the cooking programs.</p>\n<h2 id=\"voice-control\">Voice Control</h2>\n<p>I used <a href=\"https://cmusphinx.sourceforge.net/\">PocketSphinx</a> for voice recognition, which worked very well with my small <a href=\"https://github.com/ndbroadbent/raspberry_picrowave/blob/master/voice_control/corpus.txt\">corpus</a>. I embedded Ruby in the <a href=\"https://github.com/ndbroadbent/raspberry_picrowave/blob/master/voice_control/pocketsphinx_microwave.c\">pocketsphinx_contiunous</a> C program, so that it would be easier to <a href=\"https://github.com/ndbroadbent/raspberry_picrowave/blob/master/voice_control/voice_control.rb\">script voice commands</a> and send commands to the microwave daemon. It turns out that the acoustics of my kitchen seem to mess up the recognition, so it won't be used very often.</p>\n<h2 id=\"sinatra-app\">Sinatra App</h2>\n<p>There's a simple <a href=\"https://github.com/ndbroadbent/raspberry_picrowave/blob/master/sinatra_app/microwave_webapp.rb\">sinatra web application</a> that lets you control the microwave from your phone or computer. This may not be a big selling point. It uses a <a href=\"https://github.com/ndbroadbent/raspberry_picrowave/blob/master/sinatra_app/public/application.js\">JavaScript EventSource</a> to push updates to the browser, so you could have hundreds of users connected to your microwave at once.</p>\n<p>If any barcodes are scanned that can't be found on the Microwave Cooking Database, this webpage will display the unknown barcodes and provide a link to add the new product.</p>\n<h2 id=\"microwave-cooking-database\">Microwave Cooking Database</h2>\n<p>I couldn't find any existing websites with a database of microwave cooking instructions, so I made one.</p>\n<a class=\"image\" href=\"__GHOST_URL__/content/images/posts/2013/07/mwcdb.png\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img src=\"__GHOST_URL__/content/images/posts/2013/07/mwcdb-resized-post.png\" alt=\"Microwave Cooking Database\">\n</a>\n<blockquote>\n<p>UPDATE: It used to be live at <a href=\"https://www.microwavecookingdb.com/\">https://www.microwavecookingdb.com/</a>, but the domain has now expired. Sorry!</p>\n</blockquote>\n<p>If cooking instructions are posted for a 1000W microwave, you can request the instructions for a 700W microwave, and the cooking times will be automatically adjusted.</p>\n<p>So if you're also planning on making an internet connected microwave with a barcode scanner, please feel free to sign up and add some products.</p>\n<!--\n# Patents?\n\nNope, this is just a fun project. [Microwaves with barcode scanners already exist](https://www.amazon.com/Beyond-WBYMW1-850-Watt-Microwave-Scanning/dp/B0000C8W7Z/ref=cm_cr_pr_product_top), and [most](https://www.google.com/patents/US4323773) of these [features](https://www.google.com/patents/US6124583) are [already](https://www.google.com/patents/US6444965) [patented](https://www.google.com/patents/EP1117275A2?cl=en). -->\n<h1 id=\"thanks-for-reading\">Thanks for reading!</h1>\n<p>I'd be interested to hear if you build something similar!</p>\n<!-- , or make use of [https://www.microwavecookingdb.com](https://www.microwavecookingdb.com). -->\n",
            "comment_id": "68",
            "plaintext": "A few months ago, I was inspired by this post on Reddit, titled: Food items should have QR codes that instruct the microwave exactly what to do. Like high for 2 minutes, let stand 1 minute, medium 1 minutes..\n\n\nI thought this was a pretty cool idea, and that it would be a fun project for a Raspberry Pi. I agreed with the people who thought using UPC barcodes would be better, since products already have them, so I went with a barcode scanner + online product database.\n\n\nHere's a summary of the features that I've added to my microwave:\n\n\n * Re-designed touchpad\n * Nicer sounds\n * Clock is automatically updated from the internet\n * Can be controlled with voice commands\n * Can use a barcode scanner to look up cooking instructions from an online database\n * There weren't any online microwave cooking databases around, so I made one: https://microwavecookingdb.com\n * The microwave has a web page so you can control it from your phone (why not), and set up cooking instructions for products\n * Tweets after it's finished cooking something (See https://twitter.com/rbmicrowave)\n\n\n\nDemo Video\n\n\nUsing a Raspberry Pi to cook a Raspberry Pie\n\nHere's the recipe I followed.\n\n\n\n\nHardware\n\nI used a microwave with a touchpad, and discovered that the touchpad was a button matrix. I took photos of the touchpad and traced the wires, so that I could tell which pins corresponded to which buttons.\n\n\n\nI initially wanted to put everything in a case outside the microwave, but I decided that it would be more challenging and fun to try and fit everything inside. Here's all the PCB revisions, before I settled on a design that would fit neatly on top of the microwave's original PCB.\n\nI used shift registers and optocouplers to control the touchpad pins. To listen for touchpad presses, an output shift register scans one line at a time on the first touchpad layer, and an input shift register listens for connections to the second layer.\n\nI unsoldered the touchpad connector from the original circuit board, and replaced it with a row of pin headers. I then used the original touchpad connector on my PCB, so that my circuit acts as a kind of proxy for button presses.\n\nHere's the final product after transferring toner, etching, drilling, and soldering. (I had to use the ribbon cables to save space.)\n\n\n\nAnd here's how it fits on top of the microwave controller:\n\n\n\nWhen I peeled off the old touchpad overlay, it became wrinkled and ugly, so I thought I may as well have a go at redesigning the interface. My goal was to get rid of the features I don't really use, and make the basic functions more convenient. The top two rows of buttons are now dedicated to \"one touch\" cooking times, for either \"high\" or \"medium\" power. You can also set the time and power manually.\n\n\n\n\n\n\n\n\nYou might have noticed that I started the project with the intention of using an Arduino Nano plugged into a Raspberry Pi USB port. This was because I was a) familiar with the Arduino, b) not familiar with the Raspberry Pi GPIO, and c) thought it would make testing and debugging a bit easier, since I could just plug the Arduino into my laptop.\n\nHowever, it turns out that my Raspberry Pi had some issues with the arduino's FTDI chip if the Raspberry Pi was turned on while the Arduino was plugged in. It wouldn't recognize the Arduino until I unplugged it, and then plugged it back in again.\n\nSo I decided to make an Arduino Nano => Raspberry Pi GPIO adapter, and port my Arduino code to the Raspberry Pi GPIO using the WiringPi library.\n\n\n\nThe Raspberry Pi is powered by a USB hub, which is also plugged into the Raspberry Pi's USB port. To power the hub, I wired up a power adapter to the microwave's power source. There's also a USB powered speaker, USB microphone, wifi adapter, and barcode scanner.\n\n\n\n\nMicrowave Software\n\n\nAll the software running on the Raspberry Pi is hosted at: https://github.com/ndbroadbent/raspberry_picrowave.\n\n\nThere are 4 main components:\n\n\n\nMicrowave Daemon\n\n\nThis runs the code that listens for touchpad button presses, and controls the microwave. It also accepts TCP connections so that other programs can send commands or request information about the microwave's status.\n\n\n\nBarcode Instructions\n\n\nThis program listens to the barcode scanner, and requests product information from the Microwave Cooking Database. It also runs the cooking programs.\n\n\n\nVoice Control\n\n\nI used PocketSphinx for voice recognition, which worked very well with my small corpus. I embedded Ruby in the pocketsphinx_contiunous C program, so that it would be easier to script voice commands and send commands to the microwave daemon. It turns out that the acoustics of my kitchen seem to mess up the recognition, so it won't be used very often.\n\n\n\nSinatra App\n\n\nThere's a simple sinatra web application that lets you control the microwave from your phone or computer. This may not be a big selling point. It uses a JavaScript EventSource to push updates to the browser, so you could have hundreds of users connected to your microwave at once.\n\n\nIf any barcodes are scanned that can't be found on the Microwave Cooking Database, this webpage will display the unknown barcodes and provide a link to add the new product.\n\n\n\nMicrowave Cooking Database\n\n\nI couldn't find any existing websites with a database of microwave cooking instructions, so I made one.\n\n\n\n\n\n\n\n\nUPDATE: It used to be live at https://www.microwavecookingdb.com/, but the domain has now expired. Sorry!\n\n\n\nIf cooking instructions are posted for a 1000W microwave, you can request the instructions for a 700W microwave, and the cooking times will be automatically adjusted.\n\n\nSo if you're also planning on making an internet connected microwave with a barcode scanner, please feel free to sign up and add some products.\n\n\n\n\nThanks for reading!\n\n\nI'd be interested to hear if you build something similar!\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2013-07-10T00:00:00.000Z",
            "updated_at": "2024-04-19T03:31:24.000Z",
            "published_at": "2013-07-10T23:51:47.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8c6",
            "uuid": "347c8760-f1d5-4c68-9622-f622bd242a2d",
            "title": "What I Learned While Making a Game With React Native",
            "slug": "what-i-learned-while-making-a-game-with-react-native",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\n<style>\\n  .blogpost h1 { font-size: 28px; margin-bottom: 20px; margin-top: 40px; }\\n</style>\\n\\nI used React Native to build a cross-platform game for iOS, Android, Windows, and the web. [SudoBlock](https://sudoblock.com/) is a cross between Sudoku, jigsaw puzzles, and Tetris.\\n\\nYou can find SudoBlock on the [web](https://sudoblock.com/), [App Store](https://itunes.apple.com/us/app/sudoblock/id1207401341?ls=1&mt=8), [Google Play](https://play.google.com/store/apps/details?id=com.ndbroadbent.sudoblock), and the [Microsoft Store](https://www.microsoft.com/store/apps/9np72dfcvkbw).\\n\\n<a href=\\\"__GHOST_URL__/content/images/posts/2018/02/sudoblock.jpg\\\" target=\\\"_blank\\\">\\n<img src=\\\"__GHOST_URL__/content/images/posts/2018/02/sudoblock.jpg\\\" style=\\\"max-width: 200px; margin: 30px 0;\\\" />\\n</a>\\n\\nReact Native only supports iOS and Android, but I used [react-native-web](https://github.com/necolas/react-native-web) for the browser, and [react-native-windows](https://github.com/Microsoft/react-native-windows) for Windows desktop and phone. The [UWP](https://docs.microsoft.com/en-us/windows/uwp/get-started/whats-a-uwp) app can also run on Xbox One and HoloLens. I also experimented with [react-native-macos](https://github.com/ptmt/react-native-macos) and [react-native-appletv](https://github.com/douglowder/react-native-appletv), but they're not being maintained.\\n\\n<br/>\\n\\nHere's some of the things I learned while building SudoBlock:\\n\\n# You should probably use a game engine\\n\\nI've heard good things about [Godot](https://godotengine.org/) and [Unity](https://unity3d.com/).\\nThese game engines support iOS, Android, Windows, and Linux. Unity supports\\n[many other platforms](https://unity3d.com/unity/features/multiplatform).\\n\\nMaking a simple game was a great way to learn React Native, but it's not the best tool for the job.\\nHowever, people have started working on some game libraries for React Native, such as [react-game-kit](https://github.com/FormidableLabs/react-game-kit) and [react-native-game-engine](https://github.com/bberak/react-native-game-engine).\\n\\nIt's not the easiest way to make a game, but it's also not impossible.\\nThe built-in [Animated](https://facebook.github.io/react-native/docs/animated.html) library is great,\\nand I also used [react-native-animatable](https://github.com/oblador/react-native-animatable).\\nI used a library to [play sounds](https://github.com/zmxv/react-native-sound).\\nI wrote native code to integrate with iOS Game Center and Google Play Game Services.\\nI used libraries to integrate with [InApp Billing on Android](https://github.com/idehub/react-native-billing),\\nand [in-app purchases on iOS](https://github.com/chirag04/react-native-in-app-utils).\\nI also wrote native code for ads and in-app purchases on Windows.\\nThere's a RN library for [particle effects](https://github.com/greghe/react-native-particle-system)\\n(although you'd have to add support for Android),\\nand [react-game-kit](https://github.com/FormidableLabs/react-game-kit) provides a way to manage sprites and animations.\\n\\nI want to make some more simple 2D games, and I'm going to stick with React Native for now. I can fork SudoBlock and reuse a lot of the code that I've already written.\\n\\nIf your goal is to quickly build a cross-platform mobile game, then I'd recommend learning Godot or Unity.\\n\\n# Don't worry about supporting Windows\\n\\nThis is a no-brainer. No one uses Windows Phone and Microsoft have abandoned it.\\nI wanted to explore and learn new things, so I decided to do it anyway. I enjoyed the process\\nof installing Windows, working with Visual Studio, and writing some C#.\\nI also figured out how to write cross-platform npm scripts using [scripty](https://github.com/testdouble/scripty).\\n\\n[react-native-windows](https://github.com/Microsoft/react-native-windows) gives you a UWP app that can\\nrun on Windows Phone, tablets, desktop, Xbox One, HoloLens, and other Windows platforms. But:\\n\\n- Nobody uses Windows Phone.\\n- Mobile games don't usually make sense on an Xbox.\\n- If your game runs in a browser, then you probably don't need a desktop app.\\n\\n# React Native might be better than Electron for desktop applications\\n\\nWhen I was running SudoBlock as a Windows desktop application, I realized that\\nReact Native could be a better choice than [Electron](https://electronjs.org/).\\nElectron apps are notorious for being huge and using a lot of memory (e.g. Slack and Spotify.)\\nThey have to package and load an entire WebKit browser.\\nReact Native apps are much smaller and use far less memory, because they only need a JavaScript engine.\\nYou can also use responsive design, so that a single codebase works on desktop, mobile, and the web. The only problem is that [react-native-macos](https://github.com/ptmt/react-native-macos)\\nis unmaintained and out of date, so it would be great if a company sponsored development.\\n\\n# You'll probably write some native code\\n\\nSome people are attracted to React Native because they've heard that you can write a mobile\\napp with only JavaScript. In practice, this is only true for extremely simple applications.\\nMost of your code will be written in JavaScript, but you'll probably have to write some native code.\\nAt the very least, you must be prepared to fix some bugs in third-party libraries.\\n\\nI started contributing to [react-native-admob](https://github.com/sbugert/react-native-admob), and [sent a pull request to allow multiple test devices](https://github.com/sbugert/react-native-admob/pull/90). That was my introduction to native code in React Native, and I had to work with JavaScript, Objective-C, and Java.\\n\\nI also did a lot of work on [react-native-blur](https://github.com/react-native-community/react-native-blur). When I first tried to use it, it was completely broken on Android, and there were lots of problems on iOS.\\nIt took a lot of work to get everything running. I could have just skipped the blur and used a darkened overlay, but I enjoyed the work and learned a lot.\\n\\nI also had to write native code to integrate with iOS Game Center and Google Play Game Services,\\nand for ads and in-app purchases on Windows. I also wrote a small library to manage vibrations and haptic feedback across iOS, Android, Windows, and the web (using the [Vibration API](https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API).)\\n\\n# There will be bugs\\n\\nReact Native is pretty stable, but there's a lot of unmaintained libraries,\\nand most libraries don't have any tests. React Native is a bit like jQuery, in that it smooths over a lot of quirks and inconsistencies and provides a consistent API. But there's some tricky edge cases,\\nand I often had to read the React Native source code to figure out why something was happening.\\n\\nSome examples:\\n\\n- There was a bug with the [native animation driver for Android](https://github.com/facebook/react-native/issues/13530).\\n- There were crashes in the\\n  [react-native-sound](https://github.com/zmxv/react-native-sound) library.\\n- The [Android GC seemed to be clearing some memory that shouldn't have been cleared](https://stackoverflow.com/questions/43470160/in-a-react-native-javascript-app-why-would-the-android-gc-behavior-change-if-i).\\n\\nAndroid was particularly unstable. Not just React Native, but Android itself.\\nI didn't have too many problems with iOS.\\n\\n# React Native vs. iOS / Swift\\n\\nI wrote an iOS app with Swift a few years ago, and I've actually had a much better experience with React Native.\\nWhen I was working with UIKit, I remember constantly fighting with things like layout, contraints, and font rendering. I uncovered some actual bugs, and found long threads on the Apple forums that were being ignored.\\nIt was really nice to let React Native handle all of the rendering. I had no rendering issues on iOS or Android,\\nand just a few problems that I fixed on Windows.\\n\\nSwift was also very unstable at the time, and Xcode upgrades took a lot of effort.\\nMy Obj-C code still compiles a year later on the latest version of Xcode. If I was using Swift,\\nI think it would take at least a day to upgrade to Swift 4.1 and update all of the third-party libraries.\\nI believe Swift is [more stable now](https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md), and I love the language, so I might start using it again on future projects.\\n\\nI had a lot of headaches with React Native, but it wasn't as bad as Swift v1 and UIKit.\\n\\n# Marketing is really hard\\n\\n- I tested Facebook ads with $50. I reached about ~7,000 people and got ~50 clicks. One person\\n  ended up buying the game for $2.99, so I made $2. You can't spend $50 to make $2.\\n\\n- I posted on Reddit a few times:\\n\\n  - [I posted on /r/iosgaming, which went ok](https://www.reddit.com/r/iosgaming/comments/6edh0l/free_299_to_remove_ads_sudoblock_i_made_a_new_and/)\\n  - [I also tried a different tactic, which worked pretty well](https://www.reddit.com/r/ios/comments/6ecos4/after_seeing_all_your_posts_about_bug_fixes_and/)\\n\\n- A German website\\n  [published an article about SudoBlock](https://www.mobiflip.de/sudoblock-ist-eine-interessante-mischung-aus-tetris-und-sudoku/).\\n\\n- I tried to capitalize on [#covfefe](https://twitter.com/SudoBlock/status/870202842182590465),\\n  which didn't work at all. But I repurposed that new code into an [Emojidoku mode](https://twitter.com/SudoBlock/status/875065979679645696).\\n\\n- I found a game publisher who was going to handle all the marketing and split the revenue.\\n  They even promised to get the game featured on the App Store.\\n  We signed the contract and I took the apps down for a while, but the publisher fell off the radar and stopped replying to my emails.\\n\\n- I finally got around to writing this blog post.\\n\\n# Other Notes\\n\\n- I switched from Sublime Text to [VS Code](https://code.visualstudio.com/) near the beginning of the project.\\n  VS Code is awesome. It's super fast and very customizable.\\n\\n- I set up [Flow](https://flow.org/) and started using [Immutable.js](https://facebook.github.io/immutable-js/).\\n  I love having static type checking for JavaScript.\\n\\n- I used Airbnb's [eslint config](https://github.com/airbnb/javascript), and spent about a day\\n  fixing all the issues. Every time I saw a rule that I didn't understand, I looked it up to understand their reasoning. I read through a lot of great discussions on Github. This was a great way to learn more about\\n  JavaScript, and especially some of the new ES6 features.\\n\\n- I starting doing some functional programming with [lodash/fp](https://github.com/lodash/lodash/wiki/FP-Guide) and [ramda](https://github.com/ramda/ramda). I had fun refactoring some code in a more functional style.\\n\\n- I really enjoyed working with [redux-saga](https://github.com/redux-saga/redux-saga), which helped me clean up a lot of messy code.\\n\\n- I learned a lot about Reactive programming. This post is amazing: [The introduction to Reactive Programming you've been missing](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754). I started playing with [RxJS](https://github.com/Reactive-Extensions/RxJS) and\\n  [redux-observable](https://github.com/redux-observable/redux-observable).\\n\\n- I set up [CodePush](https://microsoft.github.io/code-push/), so that I could push JS changes without releasing a new version to the App Store. [The setup guide is very helpful.](https://github.com/Microsoft/react-native-code-push/blob/master/README.md)\\n\\n- I had to debug some memory issues on Android, and this article was really helpful: [React Native Android App Memory Investigation](https://shift.infinite.red/react-native-android-app-memory-investigation-55695625da9c)\\n\\n- I learned about the [webpack DLL plugin](https://medium.com/@soederpop/webpack-plugins-been-we-been-keepin-on-the-dll-cdfdd6cb8cd7), which made development a lot faster. You can compile everything in `node_modules` as a separate bundle. You only need to do that once, so it saves a lot of time.\\n\\n- I released a boilerplate project with my [webpack config for react-native-web](https://github.com/ndbroadbent/react-native-web-webpack).\\n\\n- I learned about the [Babel AST](https://github.com/ndbroadbent/babel-plugin-transform-react-remove-prop-types/commit/18edb329aa4fe7ebfd91af6d4b325cf9204e2ae1) while working on [an issue](https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types/issues/95) in a Babel plugin, related to react-native-web.\\n\\n- I wrote a script that stripped unused glyphs from icon fonts, to reduce the app size.\\n\\n- I tested the app while simulating a slow network connection in Chrome. This revealed a bug where the counter started ticking before everything had finished loading.\\n\\n- I discovered that it takes a huge amount of effort to actually launch a game. Once I had a playable game, it was another 2 months before everything else was finished. Things like in-app purchases, ads, analytics, high scores, achievements, tutorials, app store listings, screenshots, icons, social media accounts, etc.\\n\\n<br/>\\n<br/>\\n\\nThis was about 3 months of work, and I was in a [state of flow](<https://en.wikipedia.org/wiki/Flow_(psychology)>) most of the time. I learned a lot of new things, and I really enjoyed the whole process.\\nThe game has only made about $50 so far, but I have some more ideas for grid-based games, and\\nI can reuse a lot of the SudoBlock code. I'm also a freelancer, so this is the only way I can pick up new skills.\\n\\nThanks for reading! If you have any questions, please [leave a comment on Hacker News](https://news.ycombinator.com/item?id=16367937).\\n\\n<br/>\\n\\n---\\n\\n- I'm currently working on [DocSpring](https://docspring.com/), which is an API for filling out PDFs.\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<style>\n  .blogpost h1 { font-size: 28px; margin-bottom: 20px; margin-top: 40px; }\n</style>\n<p>I used React Native to build a cross-platform game for iOS, Android, Windows, and the web. <a href=\"https://sudoblock.com/\">SudoBlock</a> is a cross between Sudoku, jigsaw puzzles, and Tetris.</p>\n<p>You can find SudoBlock on the <a href=\"https://sudoblock.com/\">web</a>, <a href=\"https://itunes.apple.com/us/app/sudoblock/id1207401341?ls=1&amp;mt=8\">App Store</a>, <a href=\"https://play.google.com/store/apps/details?id=com.ndbroadbent.sudoblock\">Google Play</a>, and the <a href=\"https://www.microsoft.com/store/apps/9np72dfcvkbw\">Microsoft Store</a>.</p>\n<a href=\"__GHOST_URL__/content/images/posts/2018/02/sudoblock.jpg\" target=\"_blank\">\n<img src=\"__GHOST_URL__/content/images/posts/2018/02/sudoblock.jpg\" style=\"max-width: 200px; margin: 30px 0;\">\n</a>\n<p>React Native only supports iOS and Android, but I used <a href=\"https://github.com/necolas/react-native-web\">react-native-web</a> for the browser, and <a href=\"https://github.com/Microsoft/react-native-windows\">react-native-windows</a> for Windows desktop and phone. The <a href=\"https://docs.microsoft.com/en-us/windows/uwp/get-started/whats-a-uwp\">UWP</a> app can also run on Xbox One and HoloLens. I also experimented with <a href=\"https://github.com/ptmt/react-native-macos\">react-native-macos</a> and <a href=\"https://github.com/douglowder/react-native-appletv\">react-native-appletv</a>, but they're not being maintained.</p>\n<br>\n<p>Here's some of the things I learned while building SudoBlock:</p>\n<h1 id=\"you-should-probably-use-a-game-engine\">You should probably use a game engine</h1>\n<p>I've heard good things about <a href=\"https://godotengine.org/\">Godot</a> and <a href=\"https://unity3d.com/\">Unity</a>.<br>\nThese game engines support iOS, Android, Windows, and Linux. Unity supports<br>\n<a href=\"https://unity3d.com/unity/features/multiplatform\">many other platforms</a>.</p>\n<p>Making a simple game was a great way to learn React Native, but it's not the best tool for the job.<br>\nHowever, people have started working on some game libraries for React Native, such as <a href=\"https://github.com/FormidableLabs/react-game-kit\">react-game-kit</a> and <a href=\"https://github.com/bberak/react-native-game-engine\">react-native-game-engine</a>.</p>\n<p>It's not the easiest way to make a game, but it's also not impossible.<br>\nThe built-in <a href=\"https://facebook.github.io/react-native/docs/animated.html\">Animated</a> library is great,<br>\nand I also used <a href=\"https://github.com/oblador/react-native-animatable\">react-native-animatable</a>.<br>\nI used a library to <a href=\"https://github.com/zmxv/react-native-sound\">play sounds</a>.<br>\nI wrote native code to integrate with iOS Game Center and Google Play Game Services.<br>\nI used libraries to integrate with <a href=\"https://github.com/idehub/react-native-billing\">InApp Billing on Android</a>,<br>\nand <a href=\"https://github.com/chirag04/react-native-in-app-utils\">in-app purchases on iOS</a>.<br>\nI also wrote native code for ads and in-app purchases on Windows.<br>\nThere's a RN library for <a href=\"https://github.com/greghe/react-native-particle-system\">particle effects</a><br>\n(although you'd have to add support for Android),<br>\nand <a href=\"https://github.com/FormidableLabs/react-game-kit\">react-game-kit</a> provides a way to manage sprites and animations.</p>\n<p>I want to make some more simple 2D games, and I'm going to stick with React Native for now. I can fork SudoBlock and reuse a lot of the code that I've already written.</p>\n<p>If your goal is to quickly build a cross-platform mobile game, then I'd recommend learning Godot or Unity.</p>\n<h1 id=\"dont-worry-about-supporting-windows\">Don't worry about supporting Windows</h1>\n<p>This is a no-brainer. No one uses Windows Phone and Microsoft have abandoned it.<br>\nI wanted to explore and learn new things, so I decided to do it anyway. I enjoyed the process<br>\nof installing Windows, working with Visual Studio, and writing some C#.<br>\nI also figured out how to write cross-platform npm scripts using <a href=\"https://github.com/testdouble/scripty\">scripty</a>.</p>\n<p><a href=\"https://github.com/Microsoft/react-native-windows\">react-native-windows</a> gives you a UWP app that can<br>\nrun on Windows Phone, tablets, desktop, Xbox One, HoloLens, and other Windows platforms. But:</p>\n<ul>\n<li>Nobody uses Windows Phone.</li>\n<li>Mobile games don't usually make sense on an Xbox.</li>\n<li>If your game runs in a browser, then you probably don't need a desktop app.</li>\n</ul>\n<h1 id=\"react-native-might-be-better-than-electron-for-desktop-applications\">React Native might be better than Electron for desktop applications</h1>\n<p>When I was running SudoBlock as a Windows desktop application, I realized that<br>\nReact Native could be a better choice than <a href=\"https://electronjs.org/\">Electron</a>.<br>\nElectron apps are notorious for being huge and using a lot of memory (e.g. Slack and Spotify.)<br>\nThey have to package and load an entire WebKit browser.<br>\nReact Native apps are much smaller and use far less memory, because they only need a JavaScript engine.<br>\nYou can also use responsive design, so that a single codebase works on desktop, mobile, and the web. The only problem is that <a href=\"https://github.com/ptmt/react-native-macos\">react-native-macos</a><br>\nis unmaintained and out of date, so it would be great if a company sponsored development.</p>\n<h1 id=\"youll-probably-write-some-native-code\">You'll probably write some native code</h1>\n<p>Some people are attracted to React Native because they've heard that you can write a mobile<br>\napp with only JavaScript. In practice, this is only true for extremely simple applications.<br>\nMost of your code will be written in JavaScript, but you'll probably have to write some native code.<br>\nAt the very least, you must be prepared to fix some bugs in third-party libraries.</p>\n<p>I started contributing to <a href=\"https://github.com/sbugert/react-native-admob\">react-native-admob</a>, and <a href=\"https://github.com/sbugert/react-native-admob/pull/90\">sent a pull request to allow multiple test devices</a>. That was my introduction to native code in React Native, and I had to work with JavaScript, Objective-C, and Java.</p>\n<p>I also did a lot of work on <a href=\"https://github.com/react-native-community/react-native-blur\">react-native-blur</a>. When I first tried to use it, it was completely broken on Android, and there were lots of problems on iOS.<br>\nIt took a lot of work to get everything running. I could have just skipped the blur and used a darkened overlay, but I enjoyed the work and learned a lot.</p>\n<p>I also had to write native code to integrate with iOS Game Center and Google Play Game Services,<br>\nand for ads and in-app purchases on Windows. I also wrote a small library to manage vibrations and haptic feedback across iOS, Android, Windows, and the web (using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API\">Vibration API</a>.)</p>\n<h1 id=\"there-will-be-bugs\">There will be bugs</h1>\n<p>React Native is pretty stable, but there's a lot of unmaintained libraries,<br>\nand most libraries don't have any tests. React Native is a bit like jQuery, in that it smooths over a lot of quirks and inconsistencies and provides a consistent API. But there's some tricky edge cases,<br>\nand I often had to read the React Native source code to figure out why something was happening.</p>\n<p>Some examples:</p>\n<ul>\n<li>There was a bug with the <a href=\"https://github.com/facebook/react-native/issues/13530\">native animation driver for Android</a>.</li>\n<li>There were crashes in the<br>\n<a href=\"https://github.com/zmxv/react-native-sound\">react-native-sound</a> library.</li>\n<li>The <a href=\"https://stackoverflow.com/questions/43470160/in-a-react-native-javascript-app-why-would-the-android-gc-behavior-change-if-i\">Android GC seemed to be clearing some memory that shouldn't have been cleared</a>.</li>\n</ul>\n<p>Android was particularly unstable. Not just React Native, but Android itself.<br>\nI didn't have too many problems with iOS.</p>\n<h1 id=\"react-native-vs-ios-swift\">React Native vs. iOS / Swift</h1>\n<p>I wrote an iOS app with Swift a few years ago, and I've actually had a much better experience with React Native.<br>\nWhen I was working with UIKit, I remember constantly fighting with things like layout, contraints, and font rendering. I uncovered some actual bugs, and found long threads on the Apple forums that were being ignored.<br>\nIt was really nice to let React Native handle all of the rendering. I had no rendering issues on iOS or Android,<br>\nand just a few problems that I fixed on Windows.</p>\n<p>Swift was also very unstable at the time, and Xcode upgrades took a lot of effort.<br>\nMy Obj-C code still compiles a year later on the latest version of Xcode. If I was using Swift,<br>\nI think it would take at least a day to upgrade to Swift 4.1 and update all of the third-party libraries.<br>\nI believe Swift is <a href=\"https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md\">more stable now</a>, and I love the language, so I might start using it again on future projects.</p>\n<p>I had a lot of headaches with React Native, but it wasn't as bad as Swift v1 and UIKit.</p>\n<h1 id=\"marketing-is-really-hard\">Marketing is really hard</h1>\n<ul>\n<li>\n<p>I tested Facebook ads with $50. I reached about ~7,000 people and got ~50 clicks. One person<br>\nended up buying the game for $2.99, so I made $2. You can't spend $50 to make $2.</p>\n</li>\n<li>\n<p>I posted on Reddit a few times:</p>\n<ul>\n<li><a href=\"https://www.reddit.com/r/iosgaming/comments/6edh0l/free_299_to_remove_ads_sudoblock_i_made_a_new_and/\">I posted on /r/iosgaming, which went ok</a></li>\n<li><a href=\"https://www.reddit.com/r/ios/comments/6ecos4/after_seeing_all_your_posts_about_bug_fixes_and/\">I also tried a different tactic, which worked pretty well</a></li>\n</ul>\n</li>\n<li>\n<p>A German website<br>\n<a href=\"https://www.mobiflip.de/sudoblock-ist-eine-interessante-mischung-aus-tetris-und-sudoku/\">published an article about SudoBlock</a>.</p>\n</li>\n<li>\n<p>I tried to capitalize on <a href=\"https://twitter.com/SudoBlock/status/870202842182590465\">#covfefe</a>,<br>\nwhich didn't work at all. But I repurposed that new code into an <a href=\"https://twitter.com/SudoBlock/status/875065979679645696\">Emojidoku mode</a>.</p>\n</li>\n<li>\n<p>I found a game publisher who was going to handle all the marketing and split the revenue.<br>\nThey even promised to get the game featured on the App Store.<br>\nWe signed the contract and I took the apps down for a while, but the publisher fell off the radar and stopped replying to my emails.</p>\n</li>\n<li>\n<p>I finally got around to writing this blog post.</p>\n</li>\n</ul>\n<h1 id=\"other-notes\">Other Notes</h1>\n<ul>\n<li>\n<p>I switched from Sublime Text to <a href=\"https://code.visualstudio.com/\">VS Code</a> near the beginning of the project.<br>\nVS Code is awesome. It's super fast and very customizable.</p>\n</li>\n<li>\n<p>I set up <a href=\"https://flow.org/\">Flow</a> and started using <a href=\"https://facebook.github.io/immutable-js/\">Immutable.js</a>.<br>\nI love having static type checking for JavaScript.</p>\n</li>\n<li>\n<p>I used Airbnb's <a href=\"https://github.com/airbnb/javascript\">eslint config</a>, and spent about a day<br>\nfixing all the issues. Every time I saw a rule that I didn't understand, I looked it up to understand their reasoning. I read through a lot of great discussions on Github. This was a great way to learn more about<br>\nJavaScript, and especially some of the new ES6 features.</p>\n</li>\n<li>\n<p>I starting doing some functional programming with <a href=\"https://github.com/lodash/lodash/wiki/FP-Guide\">lodash/fp</a> and <a href=\"https://github.com/ramda/ramda\">ramda</a>. I had fun refactoring some code in a more functional style.</p>\n</li>\n<li>\n<p>I really enjoyed working with <a href=\"https://github.com/redux-saga/redux-saga\">redux-saga</a>, which helped me clean up a lot of messy code.</p>\n</li>\n<li>\n<p>I learned a lot about Reactive programming. This post is amazing: <a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\">The introduction to Reactive Programming you've been missing</a>. I started playing with <a href=\"https://github.com/Reactive-Extensions/RxJS\">RxJS</a> and<br>\n<a href=\"https://github.com/redux-observable/redux-observable\">redux-observable</a>.</p>\n</li>\n<li>\n<p>I set up <a href=\"https://microsoft.github.io/code-push/\">CodePush</a>, so that I could push JS changes without releasing a new version to the App Store. <a href=\"https://github.com/Microsoft/react-native-code-push/blob/master/README.md\">The setup guide is very helpful.</a></p>\n</li>\n<li>\n<p>I had to debug some memory issues on Android, and this article was really helpful: <a href=\"https://shift.infinite.red/react-native-android-app-memory-investigation-55695625da9c\">React Native Android App Memory Investigation</a></p>\n</li>\n<li>\n<p>I learned about the <a href=\"https://medium.com/@soederpop/webpack-plugins-been-we-been-keepin-on-the-dll-cdfdd6cb8cd7\">webpack DLL plugin</a>, which made development a lot faster. You can compile everything in <code>node_modules</code> as a separate bundle. You only need to do that once, so it saves a lot of time.</p>\n</li>\n<li>\n<p>I released a boilerplate project with my <a href=\"https://github.com/ndbroadbent/react-native-web-webpack\">webpack config for react-native-web</a>.</p>\n</li>\n<li>\n<p>I learned about the <a href=\"https://github.com/ndbroadbent/babel-plugin-transform-react-remove-prop-types/commit/18edb329aa4fe7ebfd91af6d4b325cf9204e2ae1\">Babel AST</a> while working on <a href=\"https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types/issues/95\">an issue</a> in a Babel plugin, related to react-native-web.</p>\n</li>\n<li>\n<p>I wrote a script that stripped unused glyphs from icon fonts, to reduce the app size.</p>\n</li>\n<li>\n<p>I tested the app while simulating a slow network connection in Chrome. This revealed a bug where the counter started ticking before everything had finished loading.</p>\n</li>\n<li>\n<p>I discovered that it takes a huge amount of effort to actually launch a game. Once I had a playable game, it was another 2 months before everything else was finished. Things like in-app purchases, ads, analytics, high scores, achievements, tutorials, app store listings, screenshots, icons, social media accounts, etc.</p>\n</li>\n</ul>\n<br>\n<br>\n<p>This was about 3 months of work, and I was in a <a href=\"https://en.wikipedia.org/wiki/Flow_(psychology)\">state of flow</a> most of the time. I learned a lot of new things, and I really enjoyed the whole process.<br>\nThe game has only made about $50 so far, but I have some more ideas for grid-based games, and<br>\nI can reuse a lot of the SudoBlock code. I'm also a freelancer, so this is the only way I can pick up new skills.</p>\n<p>Thanks for reading! If you have any questions, please <a href=\"https://news.ycombinator.com/item?id=16367937\">leave a comment on Hacker News</a>.</p>\n<br>\n<hr>\n<ul>\n<li>I'm currently working on <a href=\"https://docspring.com/\">DocSpring</a>, which is an API for filling out PDFs.</li>\n</ul>\n",
            "comment_id": "69",
            "plaintext": "\n\n\nI used React Native to build a cross-platform game for iOS, Android, Windows, and the web. SudoBlock is a cross between Sudoku, jigsaw puzzles, and Tetris.\n\n\nYou can find SudoBlock on the web, App Store, Google Play, and the Microsoft Store.\n\n\n\n\n\nReact Native only supports iOS and Android, but I used react-native-web for the browser, and react-native-windows for Windows desktop and phone. The UWP app can also run on Xbox One and HoloLens. I also experimented with react-native-macos and react-native-appletv, but they're not being maintained.\n\n\n\n\nHere's some of the things I learned while building SudoBlock:\n\n\n\nYou should probably use a game engine\n\n\nI've heard good things about Godot and Unity.\n\nThese game engines support iOS, Android, Windows, and Linux. Unity supports\n\nmany other platforms.\n\n\nMaking a simple game was a great way to learn React Native, but it's not the best tool for the job.\n\nHowever, people have started working on some game libraries for React Native, such as react-game-kit and react-native-game-engine.\n\n\nIt's not the easiest way to make a game, but it's also not impossible.\n\nThe built-in Animated library is great,\n\nand I also used react-native-animatable.\n\nI used a library to play sounds.\n\nI wrote native code to integrate with iOS Game Center and Google Play Game Services.\n\nI used libraries to integrate with InApp Billing on Android,\n\nand in-app purchases on iOS.\n\nI also wrote native code for ads and in-app purchases on Windows.\n\nThere's a RN library for particle effects\n\n(although you'd have to add support for Android),\n\nand react-game-kit provides a way to manage sprites and animations.\n\n\nI want to make some more simple 2D games, and I'm going to stick with React Native for now. I can fork SudoBlock and reuse a lot of the code that I've already written.\n\n\nIf your goal is to quickly build a cross-platform mobile game, then I'd recommend learning Godot or Unity.\n\n\n\nDon't worry about supporting Windows\n\n\nThis is a no-brainer. No one uses Windows Phone and Microsoft have abandoned it.\n\nI wanted to explore and learn new things, so I decided to do it anyway. I enjoyed the process\n\nof installing Windows, working with Visual Studio, and writing some C#.\n\nI also figured out how to write cross-platform npm scripts using scripty.\n\n\nreact-native-windows gives you a UWP app that can\n\nrun on Windows Phone, tablets, desktop, Xbox One, HoloLens, and other Windows platforms. But:\n\n\n * Nobody uses Windows Phone.\n * Mobile games don't usually make sense on an Xbox.\n * If your game runs in a browser, then you probably don't need a desktop app.\n\n\n\nReact Native might be better than Electron for desktop applications\n\n\nWhen I was running SudoBlock as a Windows desktop application, I realized that\n\nReact Native could be a better choice than Electron.\n\nElectron apps are notorious for being huge and using a lot of memory (e.g. Slack and Spotify.)\n\nThey have to package and load an entire WebKit browser.\n\nReact Native apps are much smaller and use far less memory, because they only need a JavaScript engine.\n\nYou can also use responsive design, so that a single codebase works on desktop, mobile, and the web. The only problem is that react-native-macos\n\nis unmaintained and out of date, so it would be great if a company sponsored development.\n\n\n\nYou'll probably write some native code\n\n\nSome people are attracted to React Native because they've heard that you can write a mobile\n\napp with only JavaScript. In practice, this is only true for extremely simple applications.\n\nMost of your code will be written in JavaScript, but you'll probably have to write some native code.\n\nAt the very least, you must be prepared to fix some bugs in third-party libraries.\n\n\nI started contributing to react-native-admob, and sent a pull request to allow multiple test devices. That was my introduction to native code in React Native, and I had to work with JavaScript, Objective-C, and Java.\n\n\nI also did a lot of work on react-native-blur. When I first tried to use it, it was completely broken on Android, and there were lots of problems on iOS.\n\nIt took a lot of work to get everything running. I could have just skipped the blur and used a darkened overlay, but I enjoyed the work and learned a lot.\n\n\nI also had to write native code to integrate with iOS Game Center and Google Play Game Services,\n\nand for ads and in-app purchases on Windows. I also wrote a small library to manage vibrations and haptic feedback across iOS, Android, Windows, and the web (using the Vibration API.)\n\n\n\nThere will be bugs\n\n\nReact Native is pretty stable, but there's a lot of unmaintained libraries,\n\nand most libraries don't have any tests. React Native is a bit like jQuery, in that it smooths over a lot of quirks and inconsistencies and provides a consistent API. But there's some tricky edge cases,\n\nand I often had to read the React Native source code to figure out why something was happening.\n\n\nSome examples:\n\n\n * There was a bug with the native animation driver for Android.\n * There were crashes in the\n   \n   react-native-sound library.\n * The Android GC seemed to be clearing some memory that shouldn't have been cleared.\n\n\nAndroid was particularly unstable. Not just React Native, but Android itself.\n\nI didn't have too many problems with iOS.\n\n\n\nReact Native vs. iOS / Swift\n\n\nI wrote an iOS app with Swift a few years ago, and I've actually had a much better experience with React Native.\n\nWhen I was working with UIKit, I remember constantly fighting with things like layout, contraints, and font rendering. I uncovered some actual bugs, and found long threads on the Apple forums that were being ignored.\n\nIt was really nice to let React Native handle all of the rendering. I had no rendering issues on iOS or Android,\n\nand just a few problems that I fixed on Windows.\n\n\nSwift was also very unstable at the time, and Xcode upgrades took a lot of effort.\n\nMy Obj-C code still compiles a year later on the latest version of Xcode. If I was using Swift,\n\nI think it would take at least a day to upgrade to Swift 4.1 and update all of the third-party libraries.\n\nI believe Swift is more stable now, and I love the language, so I might start using it again on future projects.\n\n\nI had a lot of headaches with React Native, but it wasn't as bad as Swift v1 and UIKit.\n\n\n\nMarketing is really hard\n\n\n * \n   \n   \n   I tested Facebook ads with $50. I reached about ~7,000 people and got ~50 clicks. One person\n   \n   ended up buying the game for $2.99, so I made $2. You can't spend $50 to make $2.\n   \n\n * \n   \n   \n   I posted on Reddit a few times:\n   \n   \n   * I posted on /r/iosgaming, which went ok\n   * I also tried a different tactic, which worked pretty well\n   \n * \n   \n   \n   A German website\n   \n   published an article about SudoBlock.\n   \n\n * \n   \n   \n   I tried to capitalize on #covfefe,\n   \n   which didn't work at all. But I repurposed that new code into an Emojidoku mode.\n   \n\n * \n   \n   \n   I found a game publisher who was going to handle all the marketing and split the revenue.\n   \n   They even promised to get the game featured on the App Store.\n   \n   We signed the contract and I took the apps down for a while, but the publisher fell off the radar and stopped replying to my emails.\n   \n\n * \n   \n   \n   I finally got around to writing this blog post.\n   \n\n\n\nOther Notes\n\n\n * \n   \n   \n   I switched from Sublime Text to VS Code near the beginning of the project.\n   \n   VS Code is awesome. It's super fast and very customizable.\n   \n\n * \n   \n   \n   I set up Flow and started using Immutable.js.\n   \n   I love having static type checking for JavaScript.\n   \n\n * \n   \n   \n   I used Airbnb's eslint config, and spent about a day\n   \n   fixing all the issues. Every time I saw a rule that I didn't understand, I looked it up to understand their reasoning. I read through a lot of great discussions on Github. This was a great way to learn more about\n   \n   JavaScript, and especially some of the new ES6 features.\n   \n\n * \n   \n   \n   I starting doing some functional programming with lodash/fp and ramda. I had fun refactoring some code in a more functional style.\n   \n\n * \n   \n   \n   I really enjoyed working with redux-saga, which helped me clean up a lot of messy code.\n   \n\n * \n   \n   \n   I learned a lot about Reactive programming. This post is amazing: The introduction to Reactive Programming you've been missing. I started playing with RxJS and\n   \n   redux-observable.\n   \n\n * \n   \n   \n   I set up CodePush, so that I could push JS changes without releasing a new version to the App Store. The setup guide is very helpful.\n   \n\n * \n   \n   \n   I had to debug some memory issues on Android, and this article was really helpful: React Native Android App Memory Investigation\n   \n\n * \n   \n   \n   I learned about the webpack DLL plugin, which made development a lot faster. You can compile everything in node_modules as a separate bundle. You only need to do that once, so it saves a lot of time.\n   \n\n * \n   \n   \n   I released a boilerplate project with my webpack config for react-native-web.\n   \n\n * \n   \n   \n   I learned about the Babel AST while working on an issue in a Babel plugin, related to react-native-web.\n   \n\n * \n   \n   \n   I wrote a script that stripped unused glyphs from icon fonts, to reduce the app size.\n   \n\n * \n   \n   \n   I tested the app while simulating a slow network connection in Chrome. This revealed a bug where the counter started ticking before everything had finished loading.\n   \n\n * \n   \n   \n   I discovered that it takes a huge amount of effort to actually launch a game. Once I had a playable game, it was another 2 months before everything else was finished. Things like in-app purchases, ads, analytics, high scores, achievements, tutorials, app store listings, screenshots, icons, social media accounts, etc.\n   \n\n\n\n\n\n\nThis was about 3 months of work, and I was in a state of flow most of the time. I learned a lot of new things, and I really enjoyed the whole process.\n\nThe game has only made about $50 so far, but I have some more ideas for grid-based games, and\n\nI can reuse a lot of the SudoBlock code. I'm also a freelancer, so this is the only way I can pick up new skills.\n\n\nThanks for reading! If you have any questions, please leave a comment on Hacker News.\n\n\n\n\n\n * I'm currently working on DocSpring, which is an API for filling out PDFs.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2018-02-12T00:00:00.000Z",
            "updated_at": "2024-04-19T00:56:54.000Z",
            "published_at": "2018-02-11T18:34:40.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8c7",
            "uuid": "475fb50d-b776-436d-a6bb-1e20847e5ca2",
            "title": "Docker Saved My Hugo Blog",
            "slug": "how-docker-saved-my-blog",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"2024 UPDATE: I've migrated from Hugo to Ghost.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The following Docker solution broke when I started using a M2 MacBook. I wasn't able to run the older version of Hugo in a Docker container (even with Rosetta.)\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-quote\",\"version\":1},{\"type\":\"horizontalrule\",\"version\":1},{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nI haven't written any blog posts for a while. One reason is that I've been hard at work on [DocSpring](https://docspring.com) for the last few years, and I haven't had a lot of time to work on personal projects. But the main reason is that my blog uses an older version of [Hugo](https://gohugo.io/), which is a \\\"static site generator\\\" [^1].\\n\\nI switched from Jekyll to Hugo in 2017, and the current version of Hugo at the time was [`0.21`](https://gohugo.io/news/0.21-relnotes/). I found a cool theme called [hugo-sustain](https://github.com/suyundukov/hugo-sustain). Everything was great for a few years.\\n\\nTime passed. One day, I tried to update a post or write a new post (I can't remember which.) I realized that my `build` and `develop` scripts were broken. I was a new computer at that point, and I had updated my macOS version. I installed the latest version of `hugo` and saw a bunch of interesting and confusing error messages when it tried to compile my old themes and layouts. I tried to downgrade `hugo` to version `0.21`, and it crashed with a segfault (it was built for an older version of macOS.) I cloned the `hugo` repository and tried to compile it from source, but my Go version was too new, so it failed to compile. Finally, I downgraded my Go version to an older version that was released around the same time in 2017. I held my breath as I tried to compile `hugo` one last time. Go tried to fetch all of the required dependencies, and crashed with a bunch of 404 errors. Apparently some of the packages had been renamed and moved around, and the older versions had been removed from the Go package index.\\n\\nSo I gave up for a while. Instead of generating my blog from the source, I switched to editing the static files directly. Sometimes I would need to correct a typo or adjust some styles, so I'd go into the generated `./public` directory and manually modify the raw HTML and CSS.\\n\\nTime passed. One day, I started to notice some activity on [a blog post that I had written 11 years ago](__GHOST_URL__/2010/05/13/scanning-lots-of-photos-at-once/). This post is about a GIMP plugin called `deskew` that makes it easy to scan old photos in batches on a scanner and automatically rotate them. I had dropped this plugin file in my Google Drive and had pasted a link to the file. The link worked great for 10 years, and people were able to download the file without any issues. But eventually Google changed something and the link was no longer working. I started to receive emails from people who were requesting access to this file.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2021/12/request-to-access-deskew.jpeg\\\" alt=\\\"Request to access the deskew file\\\" />\\n\\nI manually shared the file a few times. Then I decided to download the file and check it in to the blog repo. I started going into the `./public` directly to update the HTML, but I decided it was time to have another crack at this Hugo problem and fix my blog.\\n\\nShould I switch to Ghost? I've loved using Ghost for the [DocSpring blog](https://docspring.com/blog). It's a really nice blogging platform that I self-host on [Digital Ocean for $5/mo](https://www.digitalocean.com/), and I enjoy the WYSIWYG writing experience a little more than editing plain Markdown files. (Images are a bit annoying.) But I didn't want to migrate all my posts over to [ghost.org](https://ghost.org/) and get locked in, or spend $5/mo for the rest of my life. I just want some static HTML/CSS that I can put on GitHub Pages forever.\\n\\nShould I upgrade to the latest version of Hugo and spend hours fixing up the themes and tweaking all my posts until everything is working again? No thanks. Hugo runs on my local machine and produces static HTML and CSS content. It's a [pure function](https://www.wikiwand.com/en/Pure_function). There are no security vulnerabilities to watch out for. As far as I'm concerned, Hugo version `0.21` is \\\"finished software.\\\" It generates my blog, and I'm happy with my blog. I will continue to be happy with my blog for many years to come. I don't need the latest and greatest features. I just want something stable that I can use over the next few decades without the constant grind of updating packages, breaking things, and debugging random issues. Give me Hugo `0.21` from May 2017!\\n\\nI was even tempted to throw everything away and start from scratch with something old and stable. Preferably written in Bash, C, or Perl. There's a lot of cool new languages out there but they often \\\"move fast and break things.\\\" The POSIX standard was created 33 years ago in 1988, so I could still run some shell scripts that are over 30 years old. (I asked Hacker News for some examples: [Ask HN: What is the oldest Posix script that I can still run in a modern shell?](https://news.ycombinator.com/item?id=29446380).)\\n\\nI had a sudden burst of inspiration:\\n\\n# Docker!\\n\\nI could run Hugo in a Docker image! If I can get Hugo `0.21` running in a Docker image, then I can save that Docker image into a `*.tar.gz` file and store it right in my git repo. Then I have a static `hugo` binary that comes packaged with everything it needs to run in a consistent environment, and I can run it anywhere (Linux, Mac OS, Windows.)\\n\\nI found a [Dockerfile in this docker-alpine-hugo repo](https://github.com/jonathanbp/docker-alpine-hugo/blob/master/Dockerfile), and I just needed to change `0.55.3` to `0.21`. Everything worked on the first try! [^2]\\n\\n### How I use Docker\\n\\nInstead of running `hugo`, I run a `./hugo` wrapper script that runs `hugo` inside a Docker container:\\n\\n```bash\\n#!/bin/bash\\ndocker run --rm -v \\\"${PWD}:/src\\\" hugo-alpine hugo \\\"$@\\\"\\n```\\n\\nI have a `build_docker` script [^3] that builds the Docker image and saves it to `hugo-alpine.tar.gz`:\\n\\n```bash\\n#!/bin/bash\\nset -euo pipefail\\n\\necho \\\"Building Dockerfile...\\\"\\ndocker build . -t hugo-alpine\\necho \\\"Saving image to hugo-alpine.tar.gz\\\"\\ndocker save hugo-alpine > hugo-alpine.tar.gz\\n```\\n\\nIf I'm on a new computer, I can just run `docker load -i hugo-alpine.tar.gz` to load the `hugo-alpine` image into Docker.\\n\\nI have a `dev` script that starts the `hugo` server and makes it available on port `1313`:\\n\\n```bash\\n#!/bin/bash\\ndocker run --rm -v \\\"${PWD}:/src\\\" -p \\\"1313:1313\\\" hugo-alpine hugo --watch serve --bind 0.0.0.0\\n```\\n\\nFinally, I have a `deploy` script that generates the static site into `./public`, then pushes the result to a `gh-pages` branch:\\n\\n```bash\\n#!/bin/bash\\nset -euo pipefail\\n\\nif [ ! -d public/.git ]; then\\n  rm -rf public\\n  REMOTE=\\\"$(git remote get-url origin)\\\"\\n  git clone \\\"${REMOTE}\\\" public\\n  (cd public && git checkout gh-pages)\\nfi\\n\\ndocker run --rm -v \\\"${PWD}:/src\\\" hugo-alpine hugo\\n\\ncd public\\ngit add -A\\ngit commit -m \\\"$(date)\\\"\\necho \\\"Pushing build...\\\"\\ngit push\\n\\ncd ..\\necho \\\"Pushing source...\\\"\\ngit push\\n```\\n\\n### You can view the source code for my blog here: https://github.com/ndbroadbent/ndbroadbent.github.io\\n\\n---\\n\\nI'm very happy with this workaround. Now I'm back in business, and I can update or write new blog posts to my heart's content. This new Docker-based setup should last me for the next few decades, if not longer. I still love how Hugo is super fast and generates my entire blog in about 6 seconds (even version `0.21`!) I'm in no hurry to switch to anything else.\\n\\n[^1]: A [static site generator](https://www.cloudflare.com/learning/performance/static-site-generator/) converts a folder full of Markdown files into a plain HTML/CSS website that you can host for free on [GitHub Pages](https://pages.github.com/) or [Netlify](https://www.netlify.com/).\\n[^2]: I think it's generally much easier to get older Linux packages running, especially when it's a single Go binary with no dependencies. I wish it was this easy on Mac!\\n[^3]: Hopefully I never have to run this again!\\n\"},{\"children\":[],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<h3 id=\"2024-update-ive-migrated-from-hugo-to-ghost\">2024 UPDATE: I've migrated from Hugo to Ghost.</h3><blockquote>The following Docker solution broke when I started using a M2 MacBook. I wasn't able to run the older version of Hugo in a Docker container (even with Rosetta.)</blockquote><hr><p>I haven't written any blog posts for a while. One reason is that I've been hard at work on <a href=\"https://docspring.com\">DocSpring</a> for the last few years, and I haven't had a lot of time to work on personal projects. But the main reason is that my blog uses an older version of <a href=\"https://gohugo.io/\">Hugo</a>, which is a \"static site generator\" <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>.</p>\n<p>I switched from Jekyll to Hugo in 2017, and the current version of Hugo at the time was <a href=\"https://gohugo.io/news/0.21-relnotes/\"><code>0.21</code></a>. I found a cool theme called <a href=\"https://github.com/suyundukov/hugo-sustain\">hugo-sustain</a>. Everything was great for a few years.</p>\n<p>Time passed. One day, I tried to update a post or write a new post (I can't remember which.) I realized that my <code>build</code> and <code>develop</code> scripts were broken. I was a new computer at that point, and I had updated my macOS version. I installed the latest version of <code>hugo</code> and saw a bunch of interesting and confusing error messages when it tried to compile my old themes and layouts. I tried to downgrade <code>hugo</code> to version <code>0.21</code>, and it crashed with a segfault (it was built for an older version of macOS.) I cloned the <code>hugo</code> repository and tried to compile it from source, but my Go version was too new, so it failed to compile. Finally, I downgraded my Go version to an older version that was released around the same time in 2017. I held my breath as I tried to compile <code>hugo</code> one last time. Go tried to fetch all of the required dependencies, and crashed with a bunch of 404 errors. Apparently some of the packages had been renamed and moved around, and the older versions had been removed from the Go package index.</p>\n<p>So I gave up for a while. Instead of generating my blog from the source, I switched to editing the static files directly. Sometimes I would need to correct a typo or adjust some styles, so I'd go into the generated <code>./public</code> directory and manually modify the raw HTML and CSS.</p>\n<p>Time passed. One day, I started to notice some activity on <a href=\"__GHOST_URL__/2010/05/13/scanning-lots-of-photos-at-once/\">a blog post that I had written 11 years ago</a>. This post is about a GIMP plugin called <code>deskew</code> that makes it easy to scan old photos in batches on a scanner and automatically rotate them. I had dropped this plugin file in my Google Drive and had pasted a link to the file. The link worked great for 10 years, and people were able to download the file without any issues. But eventually Google changed something and the link was no longer working. I started to receive emails from people who were requesting access to this file.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2021/12/request-to-access-deskew.jpeg\" alt=\"Request to access the deskew file\">\n<p>I manually shared the file a few times. Then I decided to download the file and check it in to the blog repo. I started going into the <code>./public</code> directly to update the HTML, but I decided it was time to have another crack at this Hugo problem and fix my blog.</p>\n<p>Should I switch to Ghost? I've loved using Ghost for the <a href=\"https://docspring.com/blog\">DocSpring blog</a>. It's a really nice blogging platform that I self-host on <a href=\"https://www.digitalocean.com/\">Digital Ocean for $5/mo</a>, and I enjoy the WYSIWYG writing experience a little more than editing plain Markdown files. (Images are a bit annoying.) But I didn't want to migrate all my posts over to <a href=\"https://ghost.org/\">ghost.org</a> and get locked in, or spend $5/mo for the rest of my life. I just want some static HTML/CSS that I can put on GitHub Pages forever.</p>\n<p>Should I upgrade to the latest version of Hugo and spend hours fixing up the themes and tweaking all my posts until everything is working again? No thanks. Hugo runs on my local machine and produces static HTML and CSS content. It's a <a href=\"https://www.wikiwand.com/en/Pure_function\">pure function</a>. There are no security vulnerabilities to watch out for. As far as I'm concerned, Hugo version <code>0.21</code> is \"finished software.\" It generates my blog, and I'm happy with my blog. I will continue to be happy with my blog for many years to come. I don't need the latest and greatest features. I just want something stable that I can use over the next few decades without the constant grind of updating packages, breaking things, and debugging random issues. Give me Hugo <code>0.21</code> from May 2017!</p>\n<p>I was even tempted to throw everything away and start from scratch with something old and stable. Preferably written in Bash, C, or Perl. There's a lot of cool new languages out there but they often \"move fast and break things.\" The POSIX standard was created 33 years ago in 1988, so I could still run some shell scripts that are over 30 years old. (I asked Hacker News for some examples: <a href=\"https://news.ycombinator.com/item?id=29446380\">Ask HN: What is the oldest Posix script that I can still run in a modern shell?</a>.)</p>\n<p>I had a sudden burst of inspiration:</p>\n<h1 id=\"docker\">Docker!</h1>\n<p>I could run Hugo in a Docker image! If I can get Hugo <code>0.21</code> running in a Docker image, then I can save that Docker image into a <code>*.tar.gz</code> file and store it right in my git repo. Then I have a static <code>hugo</code> binary that comes packaged with everything it needs to run in a consistent environment, and I can run it anywhere (Linux, Mac OS, Windows.)</p>\n<p>I found a <a href=\"https://github.com/jonathanbp/docker-alpine-hugo/blob/master/Dockerfile\">Dockerfile in this docker-alpine-hugo repo</a>, and I just needed to change <code>0.55.3</code> to <code>0.21</code>. Everything worked on the first try! <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></p>\n<h3 id=\"how-i-use-docker\">How I use Docker</h3>\n<p>Instead of running <code>hugo</code>, I run a <code>./hugo</code> wrapper script that runs <code>hugo</code> inside a Docker container:</p>\n<pre><code class=\"language-bash\">#!/bin/bash\ndocker run --rm -v \"${PWD}:/src\" hugo-alpine hugo \"$@\"\n</code></pre>\n<p>I have a <code>build_docker</code> script <sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup> that builds the Docker image and saves it to <code>hugo-alpine.tar.gz</code>:</p>\n<pre><code class=\"language-bash\">#!/bin/bash\nset -euo pipefail\n\necho \"Building Dockerfile...\"\ndocker build . -t hugo-alpine\necho \"Saving image to hugo-alpine.tar.gz\"\ndocker save hugo-alpine &gt; hugo-alpine.tar.gz\n</code></pre>\n<p>If I'm on a new computer, I can just run <code>docker load -i hugo-alpine.tar.gz</code> to load the <code>hugo-alpine</code> image into Docker.</p>\n<p>I have a <code>dev</code> script that starts the <code>hugo</code> server and makes it available on port <code>1313</code>:</p>\n<pre><code class=\"language-bash\">#!/bin/bash\ndocker run --rm -v \"${PWD}:/src\" -p \"1313:1313\" hugo-alpine hugo --watch serve --bind 0.0.0.0\n</code></pre>\n<p>Finally, I have a <code>deploy</code> script that generates the static site into <code>./public</code>, then pushes the result to a <code>gh-pages</code> branch:</p>\n<pre><code class=\"language-bash\">#!/bin/bash\nset -euo pipefail\n\nif [ ! -d public/.git ]; then\n  rm -rf public\n  REMOTE=\"$(git remote get-url origin)\"\n  git clone \"${REMOTE}\" public\n  (cd public &amp;&amp; git checkout gh-pages)\nfi\n\ndocker run --rm -v \"${PWD}:/src\" hugo-alpine hugo\n\ncd public\ngit add -A\ngit commit -m \"$(date)\"\necho \"Pushing build...\"\ngit push\n\ncd ..\necho \"Pushing source...\"\ngit push\n</code></pre>\n<h3 id=\"you-can-view-the-source-code-for-my-blog-here-httpsgithubcomndbroadbentndbroadbentgithubio\">You can view the source code for my blog here: <a href=\"https://github.com/ndbroadbent/ndbroadbent.github.io\">https://github.com/ndbroadbent/ndbroadbent.github.io</a></h3>\n<hr>\n<p>I'm very happy with this workaround. Now I'm back in business, and I can update or write new blog posts to my heart's content. This new Docker-based setup should last me for the next few decades, if not longer. I still love how Hugo is super fast and generates my entire blog in about 6 seconds (even version <code>0.21</code>!) I'm in no hurry to switch to anything else.</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>A <a href=\"https://www.cloudflare.com/learning/performance/static-site-generator/\">static site generator</a> converts a folder full of Markdown files into a plain HTML/CSS website that you can host for free on <a href=\"https://pages.github.com/\">GitHub Pages</a> or <a href=\"https://www.netlify.com/\">Netlify</a>. <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>I think it's generally much easier to get older Linux packages running, especially when it's a single Go binary with no dependencies. I wish it was this easy on Mac! <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>Hopefully I never have to run this again! <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "comment_id": "70",
            "plaintext": "2024 UPDATE: I've migrated from Hugo to Ghost.\n\nThe following Docker solution broke when I started using a M2 MacBook. I wasn't able to run the older version of Hugo in a Docker container (even with Rosetta.)\n\nI haven't written any blog posts for a while. One reason is that I've been hard at work on DocSpring for the last few years, and I haven't had a lot of time to work on personal projects. But the main reason is that my blog uses an older version of Hugo, which is a \"static site generator\" [1].\n\n\nI switched from Jekyll to Hugo in 2017, and the current version of Hugo at the time was 0.21. I found a cool theme called hugo-sustain. Everything was great for a few years.\n\n\nTime passed. One day, I tried to update a post or write a new post (I can't remember which.) I realized that my build and develop scripts were broken. I was a new computer at that point, and I had updated my macOS version. I installed the latest version of hugo and saw a bunch of interesting and confusing error messages when it tried to compile my old themes and layouts. I tried to downgrade hugo to version 0.21, and it crashed with a segfault (it was built for an older version of macOS.) I cloned the hugo repository and tried to compile it from source, but my Go version was too new, so it failed to compile. Finally, I downgraded my Go version to an older version that was released around the same time in 2017. I held my breath as I tried to compile hugo one last time. Go tried to fetch all of the required dependencies, and crashed with a bunch of 404 errors. Apparently some of the packages had been renamed and moved around, and the older versions had been removed from the Go package index.\n\n\nSo I gave up for a while. Instead of generating my blog from the source, I switched to editing the static files directly. Sometimes I would need to correct a typo or adjust some styles, so I'd go into the generated ./public directory and manually modify the raw HTML and CSS.\n\n\nTime passed. One day, I started to notice some activity on a blog post that I had written 11 years ago. This post is about a GIMP plugin called deskew that makes it easy to scan old photos in batches on a scanner and automatically rotate them. I had dropped this plugin file in my Google Drive and had pasted a link to the file. The link worked great for 10 years, and people were able to download the file without any issues. But eventually Google changed something and the link was no longer working. I started to receive emails from people who were requesting access to this file.\n\n\n\nI manually shared the file a few times. Then I decided to download the file and check it in to the blog repo. I started going into the ./public directly to update the HTML, but I decided it was time to have another crack at this Hugo problem and fix my blog.\n\n\nShould I switch to Ghost? I've loved using Ghost for the DocSpring blog. It's a really nice blogging platform that I self-host on Digital Ocean for $5/mo, and I enjoy the WYSIWYG writing experience a little more than editing plain Markdown files. (Images are a bit annoying.) But I didn't want to migrate all my posts over to ghost.org and get locked in, or spend $5/mo for the rest of my life. I just want some static HTML/CSS that I can put on GitHub Pages forever.\n\n\nShould I upgrade to the latest version of Hugo and spend hours fixing up the themes and tweaking all my posts until everything is working again? No thanks. Hugo runs on my local machine and produces static HTML and CSS content. It's a pure function. There are no security vulnerabilities to watch out for. As far as I'm concerned, Hugo version 0.21 is \"finished software.\" It generates my blog, and I'm happy with my blog. I will continue to be happy with my blog for many years to come. I don't need the latest and greatest features. I just want something stable that I can use over the next few decades without the constant grind of updating packages, breaking things, and debugging random issues. Give me Hugo 0.21 from May 2017!\n\n\nI was even tempted to throw everything away and start from scratch with something old and stable. Preferably written in Bash, C, or Perl. There's a lot of cool new languages out there but they often \"move fast and break things.\" The POSIX standard was created 33 years ago in 1988, so I could still run some shell scripts that are over 30 years old. (I asked Hacker News for some examples: Ask HN: What is the oldest Posix script that I can still run in a modern shell?.)\n\n\nI had a sudden burst of inspiration:\n\n\n\nDocker!\n\n\nI could run Hugo in a Docker image! If I can get Hugo 0.21 running in a Docker image, then I can save that Docker image into a *.tar.gz file and store it right in my git repo. Then I have a static hugo binary that comes packaged with everything it needs to run in a consistent environment, and I can run it anywhere (Linux, Mac OS, Windows.)\n\n\nI found a Dockerfile in this docker-alpine-hugo repo, and I just needed to change 0.55.3 to 0.21. Everything worked on the first try! [2]\n\n\n\nHow I use Docker\n\n\nInstead of running hugo, I run a ./hugo wrapper script that runs hugo inside a Docker container:\n\n\n#!/bin/bash\ndocker run --rm -v \"${PWD}:/src\" hugo-alpine hugo \"$@\"\n\n\n\nI have a build_docker script [3] that builds the Docker image and saves it to hugo-alpine.tar.gz:\n\n\n#!/bin/bash\nset -euo pipefail\n\necho \"Building Dockerfile...\"\ndocker build . -t hugo-alpine\necho \"Saving image to hugo-alpine.tar.gz\"\ndocker save hugo-alpine > hugo-alpine.tar.gz\n\n\n\nIf I'm on a new computer, I can just run docker load -i hugo-alpine.tar.gz to load the hugo-alpine image into Docker.\n\n\nI have a dev script that starts the hugo server and makes it available on port 1313:\n\n\n#!/bin/bash\ndocker run --rm -v \"${PWD}:/src\" -p \"1313:1313\" hugo-alpine hugo --watch serve --bind 0.0.0.0\n\n\n\nFinally, I have a deploy script that generates the static site into ./public, then pushes the result to a gh-pages branch:\n\n\n#!/bin/bash\nset -euo pipefail\n\nif [ ! -d public/.git ]; then\n  rm -rf public\n  REMOTE=\"$(git remote get-url origin)\"\n  git clone \"${REMOTE}\" public\n  (cd public && git checkout gh-pages)\nfi\n\ndocker run --rm -v \"${PWD}:/src\" hugo-alpine hugo\n\ncd public\ngit add -A\ngit commit -m \"$(date)\"\necho \"Pushing build...\"\ngit push\n\ncd ..\necho \"Pushing source...\"\ngit push\n\n\n\n\nYou can view the source code for my blog here: https://github.com/ndbroadbent/ndbroadbent.github.io\n\n\n\nI'm very happy with this workaround. Now I'm back in business, and I can update or write new blog posts to my heart's content. This new Docker-based setup should last me for the next few decades, if not longer. I still love how Hugo is super fast and generates my entire blog in about 6 seconds (even version 0.21!) I'm in no hurry to switch to anything else.\n\n\n\n\n\n\n 1. A static site generator converts a folder full of Markdown files into a plain HTML/CSS website that you can host for free on GitHub Pages or Netlify. ↩︎\n    \n\n 2. I think it's generally much easier to get older Linux packages running, especially when it's a single Go binary with no dependencies. I wish it was this easy on Mac! ↩︎\n    \n\n 3. Hopefully I never have to run this again! ↩︎\n    \n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2021-12-05T00:00:00.000Z",
            "updated_at": "2024-04-19T00:55:34.000Z",
            "published_at": "2021-12-05T02:15:59.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8c8",
            "uuid": "8de19a04-3460-4e32-86c8-fb5e3e3f737e",
            "title": "Automating my Kitchen Rangehood Fan and Light",
            "slug": "automating-my-kitchen-rangehood",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\n> I originally [posted this write-up on the Home Assistant Community Forums](https://community.home-assistant.io/t/i-automated-the-rangehood-above-my-stove-kitchen-extractor-fan-and-light-and-learned-a-lot/458085). I thought I would post it here as well, since I haven't written anything on this blog for a while. I've been getting more serious about Home Automation lately, so I might start writing some more blog posts and making a few videos.\\n\\nI figured out how to control the light and fan in the rangehood above my stove. I learned a lot from this project, and I wanted to share some of my experiences.\\n\\n- I figured out how to read the state of 4 buttons and light up 4 LEDs with only 5 wires\\n- I discovered some powerful circuit simulation software\\n- I used optocouplers for the first time (instead of relays)\\n- I wrote some C++ code for a custom ESPHome component\\n- I bought an oscilloscope\\n\\n## Introduction\\n\\nI wanted to be able to control the light and extractor fan above my stovetop, so I decided to automate it using an ESP32. This would be a similar concept to the [Raspberry Pi Microwave project](https://madebynathan.com/2013/07/10/raspberry-pi-powered-microwave/) that I built many years ago: I would put a \\\"proxy\\\" circuit between the buttons and the main board that controls the light and fan. The circuit would simulate button presses to control the main board, and it would read the state of the original buttons so that they would still work normally. The circuit would add WiFi connectivity so that the buttons could be controlled remotely and via automations in Home Assistant.\\n\\nI still use Raspberry Pis, but now I prefer using ESP32 and ESP8266 chips. ESPHome makes it so much easier to build little devices like this, and the OTA (over-the-air) updates are really convenient. I love all the built-in components that you can easily add to your YAML configuration files.\\n\\nHere's a photo of the rangehood, with some of my tools. You can see the main controller board and the button board hanging out.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/rangehood.jpg\\\" alt=\\\"Picture of my kitchen rangehood\\\" />\\n\\nThis is the button board, which has 4 buttons, and an LED for each button:\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/button_led_board.jpg\\\" alt=\\\"Button and LED board to control the rangehood\\\" />\\n\\n## How to read 4 buttons and light 4 LEDs with only 5 wires\\n\\nI wanted to preserve the original functionality of the rangehood buttons, so that you wouldn't even know there's an ESP32 chip inside. This button board was the first obstacle. If there were only 4 buttons, then that would be quite easy. You can just attach them directly to GPIO pins with an internal pull-up resistor. The LEDs were a bit confusing at first, but it was a fun puzzle to solve.\\n\\nI took a photo of the PCB and traced it using different colors, so I could where each of the wires was going:\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/pcb_traces.jpg\\\" alt=\\\"I traced the PCB on my phone\\\" />\\n\\nI found that button has a 1K ohm resistor, and each LED has a 148 ohm resistor.\\n\\n## Circuit simulation software\\n\\nI'm a software developer, so I really like having fast feedback loops and the ability to try lots of ideas quickly to see if something works. I started wondering if it might be possible to do this with circuits. I wanted to see if I could figure this out with trial and error and use some kind of circuit simulation software.\\n\\nI found [TinkerCad](https://www.tinkercad.com/), and my mind was blown! Now I had a virtual Arduino wired up to a virtual breadboard. I recreated this button/LED board inside TinkerCad. I could set up virtual multi-meters to see how much current was flowing through LEDs, and easily figure out values for resistors.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/tinkercad_simulation.png\\\" alt=\\\"Screenshot of TinkerCad simulation\\\" />\\n\\nThis is so awesome! It even tells you when too much current is going through an LED:\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/tinkercad_led_warning.png\\\" alt=\\\"It tells you when you have too much current going through an LED\\\" />\\n\\nHere's [a link to my TinkerCad project where you can run the circuit simulation](https://www.tinkercad.com/things/1bAouc9AybL-rangehood-esp32-buttonled-proxy/editel?sharecode=78vrKEWsZrrcoPSy2SCQuQP9ZW9wdGJ0-cJg6wy4u84).\\n\\nI started playing around with some code in an Arduino sketch. I figured out how to light up the LEDs. I figured out how to read the buttons. But I couldn't figure out how to do them both at the same time. If I wanted to light up the LEDs, then I'd need to be using `3.3V` on the shared wire. But if I wanted to read the buttons, then the shared wire needed to be connected to `GND`.\\n\\nThen I finally had a breakthrough. Whenever I had worked with GPIO pins in the past, I had just assumed that \\\"high\\\" and \\\"low\\\" meant \\\"on\\\" and \\\"off\\\". But I realized that \\\"high\\\" literally just means `5V` (or `3.3V`), and \\\"low\\\" literally just means `GND`. So you can just change the direction of a circuit if you set your output pins to normally \\\"high\\\", and you swap the `GND` pin with a `3.3V` pin.\\n\\nSo instead of needing to choose between the `3.3V` pin and the `GND` pin, I could use a GPIO pin on the shared wire and toggle it between \\\"high\\\" and \\\"low\\\". I set it to \\\"low\\\" whenever I needed to read the buttons, and set it to \\\"high\\\" whenever I needed to light up the LEDs.\\n\\nI got something working in my virtual Arduino. The other side of the circuit was quite easy (to simulate the button presses.) I used some optocouplers as relays, where you send current through an IR LED and it turns on a transistor on the other side, but it keeps both of the circuits separated. Later on I realized that I should have been looking at \\\"solid state relays\\\", which are optocouplers that are specifically designed for this purpose and can switch much higher voltages and currents.\\n\\nI tried it out with a real Arduino, and it worked!\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/arduino_screenshot.jpg\\\" alt=\\\"Screenshot of Arduino logs in real life\\\" />\\n\\nIt was a pretty cool experience to simulate a whole Arduino circuit inside my browser, and then see it work in real life.\\n\\nhttps://everycircuit.com is also a really cool option for circuit simulation:\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/everycircuit.jpg\\\" alt=\\\"EveryCircuit.com simulation\\\" />\\n\\nIt can handle some things that TinkerCad can't do, such as astable multivibrator circuits where you need to inject a little noise to get it started. (TinkerCad just crashes with an \\\"infinite loop\\\" error.)\\n\\n## Custom C++ ESPHome Component\\n\\nAlright, on to the next step. I've got something working with an Arduino, but how do I port this to ESPHome and get it working over WiFI?\\n\\nI needed to set an GPIO pin to output mode for a while, briefly switch it to input mode, read the state of a button, and then set it back to output mode again. I couldn't figure out how to do this in a YAML configuration file for ESPHome, so I decided to write a custom component using C++.\\n\\nThe [ESPHome documentation is pretty good](https://esphome.io/custom/custom_component.html), and I was able to get something working. Here's my YAML configuration and my custom C++ module: https://gist.github.com/ndbroadbent/63aa5f105e21631bee4ff9a62c9b1608\\n\\nThe most important difference between Arduino and ESPHome is that a component's `loop()` function is only called once every 16 milliseconds. (Arduino restarts the loop instantly.) This was actually perfect for me, since it meant that I could read the buttons once every 16ms, and leave the LEDs on before I exit the loop.\\n\\n## I ran out of pins on my ESP8266 (Wemos D1 Mini)\\n\\nI should have made sure that everything worked on a breadboard. Instead, I started to get a bit impatient, and I jumped straight to soldering a prototype PCB. I soldering some pin headers for my ESP8266 development board, and then started with one input, and one optocoupler for the output. I tested it and it was all working, so I kept going.\\n\\nThen I checked the [ESP8266 pinout](https://randomnerdtutorials.com/esp8266-pinout-reference-gpios/) and realized that I had run out of GPIO pins.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/esp8266_pinout.png\\\" alt=\\\"ESP8266 pin out\\\" />\\n\\nI tried to get away with using some of the yellow \\\"OK\\\" ones, but the boot started failing (I guess I was pulling some of the pins high or low.) I needed 4 pins to control the optocoupler outputs, and 5 for the button/LED board. That's 9 GPIO pins, and the ESP8266 only had 7. I thought it had more!\\n\\nThis can be solved with shift registers. You only need 3 GPIO pins to [control a 74HC595 8-bit shift register](https://lastminuteengineers.com/74hc595-shift-register-arduino-tutorial/) and get 8 digital outputs. You only need one additional GPIO pin if you want to [add a CD4021BE shift register](https://www.arduino.cc/en/Tutorial/Foundations/ShiftIn) (parallel-in, serial-out) and get 8 digital inputs. This is because the input and output registers can share the same clock and latch pins. You can then daisy-chain both of these to get as many inputs and outputs as you need (or use bigger shift registers with more pins), and use only 4 GPIO pins.\\n\\nAnyway, I switched to using an ESP32 development board which has 18 usable GPIO pins, and a few more with caveats. I used breadboard jumper wires to wire it up.\\n\\n## My resistors were too big\\n\\nI had put 1k resistors on the optocoupler outputs, to mimic the original button/LED board. What I didn't realize is that the optocoupler itself seemed to add about 500 ohms of resistance, so the resistance was slightly too high, and the rangehood controller board couldn't reliably read the simulated button presses.\\n\\nSo I unsoldered them and switched to 560 ohm resistors. Should have tested on a breadboard.\\n\\n## I bought a USB oscilloscope\\n\\nAfter doing a bunch of unsoldering and resoldering, putting random hookup wires all over the place, and swapping out ESP dev boards, I ended up with the ugliest prototype PCB you've ever seen. Of couse, stuff started breaking and one of my outputs wasn't working properly or reliably. It seemed like there was a problem with one of my optocouplers, and it was a real pain to figure out what was broken since I had only had a multimeter.\\n\\nI realized that a oscilloscope would be really useful, and I should have bought one a long time ago. I bought a [USB BitScope 10](http://my.bitscope.com/store/?p=view&i=item+3). It's pretty cool!\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/bitscope_screenshot.jpg\\\" alt=\\\"Screenshot of the Bitscope software on Mac\\\" />\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/components_on_desk.jpg\\\" alt=\\\"Photo of breadboard and Bitscope on my desk\\\" />\\n\\nThis helped me figure out where some things needed to be resoldered. One of the optocouplers was only working when I pushed on it with my finger. I originally thought it might have been a broken chip or something to do with capacitance, but it was just a broken PCB trace and some dodgy soldering.\\n\\nI'm still learning how to use the BitScope software and have barely scratched the surface of what it can do. This is going to be extremely useful for future projects, especially for reverse engineering how stuff works. (P.S. You'll need their [pre-release version for the latest version of Mac OS](https://support.bitscope.com/X37HPRRV/#downloads).)\\n\\n## WiFi was very weak on my \\\"Duinotech Wearable ESP32 Development Board\\\"\\n\\nI initially switched to a [Duinotech Wearable ESP32 Development Board](https://www.jaycar.co.nz/duinotech-wearable-esp32-development-board/p/XC3810) that I had bought a while ago. I got everything working, but then it really struggled to connect to WiFi and would cut out regularly, and my entities would become unavailable. Even though I had a Ubiquity access point only 10 meters away in the same room.\\n\\nI found a few other people who seemed to have problems with WiFi as well, but they might be for different reasons:\\n\\n- https://www.esp32.com/viewtopic.php?t=16311\\n- https://forum.micropython.org/viewtopic.php?t=11550&p=63020\\n- https://www.esp32.com/viewtopic.php?t=18159\\n- https://www.esp32.com/viewtopic.php?t=16622\\n- https://www.esp32.com/viewtopic.php?t=6073\\n- https://www.reddit.com/r/esp32/comments/bbjrir/very_poor_wifi_performance/\\n\\nThen I found [the \\\"WiFi Power Save Mode\\\" section in the ESPHome documentation](https://esphome.io/components/wifi.html#wifi-power-save-mode):\\n\\n- `NONE` (least power saving, Default for ESP8266)\\n- `LIGHT` (Default for ESP32)\\n\\nSo I tried:\\n\\n```\\nwifi:\\n  power_save_mode: none\\n  output_power: 20\\n```\\n\\nI think this seemed to help a little bit, but it still wasn't very reliable. I had ordered some more electronics stuff and threw in another [ESP32 Development Board](https://surplustronics.co.nz/products/9368-esp32-development-board-38-pin-espwroom-32s). I tried this out once it arrived and it was an instant improvement. I just threw away the board with poor WiFi. I also ordered a bunch of shift registers so I can get back to using ESP8266 boards (adafruit huzzuh feathers), and they seem to have much better WiFi as well.\\n\\nI also ordered a few extra Wemos D1 Mini Pros that support external antennas. They haven't arrived yet, but I might try these out for car presence detection. I've been struggling with WiFi range for this as well.\\n\\n## Putting it all together\\n\\nI put everything into a little black box. Connected all the wires up and stuck it inside the rangehood. I chopped the power cable for the rangehood and added a screw terminal, and wired up a USB charger to power the ESP32 board.\\n\\nSo now I've got the fan and light in Home Assistant. (And the physical buttons still work as well.)\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/homeassistant_rangehood_screenshot.png\\\" alt=\\\"Screenshot of the rangehood entities in Home Assistant\\\" />\\n\\nI've set up an [entity controller](https://danobot.github.io/ec-docs/) to turn on the light.\\n\\n## Next steps\\n\\nThe rangehood controller board has a piezo buzzer that beeps every time a button is pressed. That's pretty annoying. I might try to [desolder or destroy the buzzer](https://electronics.stackexchange.com/questions/41806/how-do-you-remove-the-buzzer-from-this-pcb-whose-solder-side-is-inaccessible).\\n\\nI want to put an air quality sensor in the kitchen and automatically turn on the extractor fan based on AQI. I've ordered some [ZigBee air quality meters](https://www.aliexpress.com/item/1005003797614144.html?spm=a2g0o.order_detail.0.0.5510f19c1mjFfW) on AliExpress, and they should arrive in a few weeks.\\n\\n> Update from Sep 30, 2022: I've put the air quality sensor in the kitchen, and have set it up to turn on the rangehood fan when the PM 2.5 level is above 12 µg/m³. (It usually hovers around 6 µg/m³.) It's been working really well!\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/kitchen_aqi_chart.jpg\\\" alt=\\\"Chart of PM 2.5 levels in our kitchen. I use a filter to remove outliers and smooth out the data.\\\" />\\n\\nI also bought a current clamp sensor that can measure AC current. I want to set this up for the stovetop so I can detect when it's on and automatically turn on the fan (in advance, instead of waiting for the AQI to get bad.) It would be easier if I could use an energy monitoring wall plug, but it looks like the stovetop is wired directly into the circuit breaker, and it uses a lot of power so I don't want to mess around with those wires. I'll just separate them and put a clamp around one of them. I'll follow [this guide to set it all up](https://learn.openenergymonitor.org/electricity-monitoring/ct-sensors/interface-with-arduino?redirected=true) and get it working on an ESP32.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/09/ac_current_clamp_circuit.jpg\\\" alt=\\\"Circuit diagram for measuring AC current with a clamp sensor\\\" />\\n\\nI have [this power meter](https://www.aliexpress.com/item/32695813719.html?spm=a2g0s.12269583.0.0.197e6455U2UxlV) that I'll use to calibrate it.\\n\\nI also want to learn how to make a proper PCB design in KiCad and order a [cool purple PCB from OSH park](https://oshpark.com/).\\n\\nI'm really enjoying this self-directed crash course in electronics. It's really fun to learn so much while working on practical projects that we can use every day in our house.\\n\\nThanks for reading, it was fun to write up everything I learned. If you have any questions, please feel free to ask in the comments!\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><blockquote>\n<p>I originally <a href=\"https://community.home-assistant.io/t/i-automated-the-rangehood-above-my-stove-kitchen-extractor-fan-and-light-and-learned-a-lot/458085\">posted this write-up on the Home Assistant Community Forums</a>. I thought I would post it here as well, since I haven't written anything on this blog for a while. I've been getting more serious about Home Automation lately, so I might start writing some more blog posts and making a few videos.</p>\n</blockquote>\n<p>I figured out how to control the light and fan in the rangehood above my stove. I learned a lot from this project, and I wanted to share some of my experiences.</p>\n<ul>\n<li>I figured out how to read the state of 4 buttons and light up 4 LEDs with only 5 wires</li>\n<li>I discovered some powerful circuit simulation software</li>\n<li>I used optocouplers for the first time (instead of relays)</li>\n<li>I wrote some C++ code for a custom ESPHome component</li>\n<li>I bought an oscilloscope</li>\n</ul>\n<h2 id=\"introduction\">Introduction</h2>\n<p>I wanted to be able to control the light and extractor fan above my stovetop, so I decided to automate it using an ESP32. This would be a similar concept to the <a href=\"https://madebynathan.com/2013/07/10/raspberry-pi-powered-microwave/\">Raspberry Pi Microwave project</a> that I built many years ago: I would put a &quot;proxy&quot; circuit between the buttons and the main board that controls the light and fan. The circuit would simulate button presses to control the main board, and it would read the state of the original buttons so that they would still work normally. The circuit would add WiFi connectivity so that the buttons could be controlled remotely and via automations in Home Assistant.</p>\n<p>I still use Raspberry Pis, but now I prefer using ESP32 and ESP8266 chips. ESPHome makes it so much easier to build little devices like this, and the OTA (over-the-air) updates are really convenient. I love all the built-in components that you can easily add to your YAML configuration files.</p>\n<p>Here's a photo of the rangehood, with some of my tools. You can see the main controller board and the button board hanging out.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/rangehood.jpg\" alt=\"Picture of my kitchen rangehood\" />\n<p>This is the button board, which has 4 buttons, and an LED for each button:</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/button_led_board.jpg\" alt=\"Button and LED board to control the rangehood\" />\n<h2 id=\"howtoread4buttonsandlight4ledswithonly5wires\">How to read 4 buttons and light 4 LEDs with only 5 wires</h2>\n<p>I wanted to preserve the original functionality of the rangehood buttons, so that you wouldn't even know there's an ESP32 chip inside. This button board was the first obstacle. If there were only 4 buttons, then that would be quite easy. You can just attach them directly to GPIO pins with an internal pull-up resistor. The LEDs were a bit confusing at first, but it was a fun puzzle to solve.</p>\n<p>I took a photo of the PCB and traced it using different colors, so I could where each of the wires was going:</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/pcb_traces.jpg\" alt=\"I traced the PCB on my phone\" />\n<p>I found that button has a 1K ohm resistor, and each LED has a 148 ohm resistor.</p>\n<h2 id=\"circuitsimulationsoftware\">Circuit simulation software</h2>\n<p>I'm a software developer, so I really like having fast feedback loops and the ability to try lots of ideas quickly to see if something works. I started wondering if it might be possible to do this with circuits. I wanted to see if I could figure this out with trial and error and use some kind of circuit simulation software.</p>\n<p>I found <a href=\"https://www.tinkercad.com/\">TinkerCad</a>, and my mind was blown! Now I had a virtual Arduino wired up to a virtual breadboard. I recreated this button/LED board inside TinkerCad. I could set up virtual multi-meters to see how much current was flowing through LEDs, and easily figure out values for resistors.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/tinkercad_simulation.png\" alt=\"Screenshot of TinkerCad simulation\" />\n<p>This is so awesome! It even tells you when too much current is going through an LED:</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/tinkercad_led_warning.png\" alt=\"It tells you when you have too much current going through an LED\" />\n<p>Here's <a href=\"https://www.tinkercad.com/things/1bAouc9AybL-rangehood-esp32-buttonled-proxy/editel?sharecode=78vrKEWsZrrcoPSy2SCQuQP9ZW9wdGJ0-cJg6wy4u84\">a link to my TinkerCad project where you can run the circuit simulation</a>.</p>\n<p>I started playing around with some code in an Arduino sketch. I figured out how to light up the LEDs. I figured out how to read the buttons. But I couldn't figure out how to do them both at the same time. If I wanted to light up the LEDs, then I'd need to be using <code>3.3V</code> on the shared wire. But if I wanted to read the buttons, then the shared wire needed to be connected to <code>GND</code>.</p>\n<p>Then I finally had a breakthrough. Whenever I had worked with GPIO pins in the past, I had just assumed that &quot;high&quot; and &quot;low&quot; meant &quot;on&quot; and &quot;off&quot;. But I realized that &quot;high&quot; literally just means <code>5V</code> (or <code>3.3V</code>), and &quot;low&quot; literally just means <code>GND</code>. So you can just change the direction of a circuit if you set your output pins to normally &quot;high&quot;, and you swap the <code>GND</code> pin with a <code>3.3V</code> pin.</p>\n<p>So instead of needing to choose between the <code>3.3V</code> pin and the <code>GND</code> pin, I could use a GPIO pin on the shared wire and toggle it between &quot;high&quot; and &quot;low&quot;. I set it to &quot;low&quot; whenever I needed to read the buttons, and set it to &quot;high&quot; whenever I needed to light up the LEDs.</p>\n<p>I got something working in my virtual Arduino. The other side of the circuit was quite easy (to simulate the button presses.) I used some optocouplers as relays, where you send current through an IR LED and it turns on a transistor on the other side, but it keeps both of the circuits separated. Later on I realized that I should have been looking at &quot;solid state relays&quot;, which are optocouplers that are specifically designed for this purpose and can switch much higher voltages and currents.</p>\n<p>I tried it out with a real Arduino, and it worked!</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/arduino_screenshot.jpg\" alt=\"Screenshot of Arduino logs in real life\" />\n<p>It was a pretty cool experience to simulate a whole Arduino circuit inside my browser, and then see it work in real life.</p>\n<p><a href=\"https://everycircuit.com\">https://everycircuit.com</a> is also a really cool option for circuit simulation:</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/everycircuit.jpg\" alt=\"EveryCircuit.com simulation\" />\n<p>It can handle some things that TinkerCad can't do, such as astable multivibrator circuits where you need to inject a little noise to get it started. (TinkerCad just crashes with an &quot;infinite loop&quot; error.)</p>\n<h2 id=\"customcesphomecomponent\">Custom C++ ESPHome Component</h2>\n<p>Alright, on to the next step. I've got something working with an Arduino, but how do I port this to ESPHome and get it working over WiFI?</p>\n<p>I needed to set an GPIO pin to output mode for a while, briefly switch it to input mode, read the state of a button, and then set it back to output mode again. I couldn't figure out how to do this in a YAML configuration file for ESPHome, so I decided to write a custom component using C++.</p>\n<p>The <a href=\"https://esphome.io/custom/custom_component.html\">ESPHome documentation is pretty good</a>, and I was able to get something working. Here's my YAML configuration and my custom C++ module: <a href=\"https://gist.github.com/ndbroadbent/63aa5f105e21631bee4ff9a62c9b1608\">https://gist.github.com/ndbroadbent/63aa5f105e21631bee4ff9a62c9b1608</a></p>\n<p>The most important difference between Arduino and ESPHome is that a component's <code>loop()</code> function is only called once every 16 milliseconds. (Arduino restarts the loop instantly.) This was actually perfect for me, since it meant that I could read the buttons once every 16ms, and leave the LEDs on before I exit the loop.</p>\n<h2 id=\"iranoutofpinsonmyesp8266wemosd1mini\">I ran out of pins on my ESP8266 (Wemos D1 Mini)</h2>\n<p>I should have made sure that everything worked on a breadboard. Instead, I started to get a bit impatient, and I jumped straight to soldering a prototype PCB. I soldering some pin headers for my ESP8266 development board, and then started with one input, and one optocoupler for the output. I tested it and it was all working, so I kept going.</p>\n<p>Then I checked the <a href=\"https://randomnerdtutorials.com/esp8266-pinout-reference-gpios/\">ESP8266 pinout</a> and realized that I had run out of GPIO pins.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/esp8266_pinout.png\" alt=\"ESP8266 pin out\" />\n<p>I tried to get away with using some of the yellow &quot;OK&quot; ones, but the boot started failing (I guess I was pulling some of the pins high or low.) I needed 4 pins to control the optocoupler outputs, and 5 for the button/LED board. That's 9 GPIO pins, and the ESP8266 only had 7. I thought it had more!</p>\n<p>This can be solved with shift registers. You only need 3 GPIO pins to <a href=\"https://lastminuteengineers.com/74hc595-shift-register-arduino-tutorial/\">control a 74HC595 8-bit shift register</a> and get 8 digital outputs. You only need one additional GPIO pin if you want to <a href=\"https://www.arduino.cc/en/Tutorial/Foundations/ShiftIn\">add a CD4021BE shift register</a> (parallel-in, serial-out) and get 8 digital inputs. This is because the input and output registers can share the same clock and latch pins. You can then daisy-chain both of these to get as many inputs and outputs as you need (or use bigger shift registers with more pins), and use only 4 GPIO pins.</p>\n<p>Anyway, I switched to using an ESP32 development board which has 18 usable GPIO pins, and a few more with caveats. I used breadboard jumper wires to wire it up.</p>\n<h2 id=\"myresistorsweretoobig\">My resistors were too big</h2>\n<p>I had put 1k resistors on the optocoupler outputs, to mimic the original button/LED board. What I didn't realize is that the optocoupler itself seemed to add about 500 ohms of resistance, so the resistance was slightly too high, and the rangehood controller board couldn't reliably read the simulated button presses.</p>\n<p>So I unsoldered them and switched to 560 ohm resistors. Should have tested on a breadboard.</p>\n<h2 id=\"iboughtausboscilloscope\">I bought a USB oscilloscope</h2>\n<p>After doing a bunch of unsoldering and resoldering, putting random hookup wires all over the place, and swapping out ESP dev boards, I ended up with the ugliest prototype PCB you've ever seen. Of couse, stuff started breaking and one of my outputs wasn't working properly or reliably. It seemed like there was a problem with one of my optocouplers, and it was a real pain to figure out what was broken since I had only had a multimeter.</p>\n<p>I realized that a oscilloscope would be really useful, and I should have bought one a long time ago. I bought a <a href=\"http://my.bitscope.com/store/?p=view&amp;i=item+3\">USB BitScope 10</a>. It's pretty cool!</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/bitscope_screenshot.jpg\" alt=\"Screenshot of the Bitscope software on Mac\" />\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/components_on_desk.jpg\" alt=\"Photo of breadboard and Bitscope on my desk\" />\n<p>This helped me figure out where some things needed to be resoldered. One of the optocouplers was only working when I pushed on it with my finger. I originally thought it might have been a broken chip or something to do with capacitance, but it was just a broken PCB trace and some dodgy soldering.</p>\n<p>I'm still learning how to use the BitScope software and have barely scratched the surface of what it can do. This is going to be extremely useful for future projects, especially for reverse engineering how stuff works. (P.S. You'll need their <a href=\"https://support.bitscope.com/X37HPRRV/#downloads\">pre-release version for the latest version of Mac OS</a>.)</p>\n<h2 id=\"wifiwasveryweakonmyduinotechwearableesp32developmentboard\">WiFi was very weak on my &quot;Duinotech Wearable ESP32 Development Board&quot;</h2>\n<p>I initially switched to a <a href=\"https://www.jaycar.co.nz/duinotech-wearable-esp32-development-board/p/XC3810\">Duinotech Wearable ESP32 Development Board</a> that I had bought a while ago. I got everything working, but then it really struggled to connect to WiFi and would cut out regularly, and my entities would become unavailable. Even though I had a Ubiquity access point only 10 meters away in the same room.</p>\n<p>I found a few other people who seemed to have problems with WiFi as well, but they might be for different reasons:</p>\n<ul>\n<li><a href=\"https://www.esp32.com/viewtopic.php?t=16311\">https://www.esp32.com/viewtopic.php?t=16311</a></li>\n<li><a href=\"https://forum.micropython.org/viewtopic.php?t=11550&amp;p=63020\">https://forum.micropython.org/viewtopic.php?t=11550&amp;p=63020</a></li>\n<li><a href=\"https://www.esp32.com/viewtopic.php?t=18159\">https://www.esp32.com/viewtopic.php?t=18159</a></li>\n<li><a href=\"https://www.esp32.com/viewtopic.php?t=16622\">https://www.esp32.com/viewtopic.php?t=16622</a></li>\n<li><a href=\"https://www.esp32.com/viewtopic.php?t=6073\">https://www.esp32.com/viewtopic.php?t=6073</a></li>\n<li><a href=\"https://www.reddit.com/r/esp32/comments/bbjrir/very_poor_wifi_performance/\">https://www.reddit.com/r/esp32/comments/bbjrir/very_poor_wifi_performance/</a></li>\n</ul>\n<p>Then I found <a href=\"https://esphome.io/components/wifi.html#wifi-power-save-mode\">the &quot;WiFi Power Save Mode&quot; section in the ESPHome documentation</a>:</p>\n<ul>\n<li><code>NONE</code> (least power saving, Default for ESP8266)</li>\n<li><code>LIGHT</code> (Default for ESP32)</li>\n</ul>\n<p>So I tried:</p>\n<pre><code>wifi:\n  power_save_mode: none\n  output_power: 20\n</code></pre>\n<p>I think this seemed to help a little bit, but it still wasn't very reliable. I had ordered some more electronics stuff and threw in another <a href=\"https://surplustronics.co.nz/products/9368-esp32-development-board-38-pin-espwroom-32s\">ESP32 Development Board</a>. I tried this out once it arrived and it was an instant improvement. I just threw away the board with poor WiFi. I also ordered a bunch of shift registers so I can get back to using ESP8266 boards (adafruit huzzuh feathers), and they seem to have much better WiFi as well.</p>\n<p>I also ordered a few extra Wemos D1 Mini Pros that support external antennas. They haven't arrived yet, but I might try these out for car presence detection. I've been struggling with WiFi range for this as well.</p>\n<h2 id=\"puttingitalltogether\">Putting it all together</h2>\n<p>I put everything into a little black box. Connected all the wires up and stuck it inside the rangehood. I chopped the power cable for the rangehood and added a screw terminal, and wired up a USB charger to power the ESP32 board.</p>\n<p>So now I've got the fan and light in Home Assistant. (And the physical buttons still work as well.)</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/homeassistant_rangehood_screenshot.png\" alt=\"Screenshot of the rangehood entities in Home Assistant\" />\n<p>I've set up an <a href=\"https://danobot.github.io/ec-docs/\">entity controller</a> to turn on the light.</p>\n<h2 id=\"nextsteps\">Next steps</h2>\n<p>The rangehood controller board has a piezo buzzer that beeps every time a button is pressed. That's pretty annoying. I might try to <a href=\"https://electronics.stackexchange.com/questions/41806/how-do-you-remove-the-buzzer-from-this-pcb-whose-solder-side-is-inaccessible\">desolder or destroy the buzzer</a>.</p>\n<p>I want to put an air quality sensor in the kitchen and automatically turn on the extractor fan based on AQI. I've ordered some <a href=\"https://www.aliexpress.com/item/1005003797614144.html?spm=a2g0o.order_detail.0.0.5510f19c1mjFfW\">ZigBee air quality meters</a> on AliExpress, and they should arrive in a few weeks.</p>\n<blockquote>\n<p>Update from Sep 30, 2022: I've put the air quality sensor in the kitchen, and have set it up to turn on the rangehood fan when the PM 2.5 level is above 12 µg/m³. (It usually hovers around 6 µg/m³.) It's been working really well!</p>\n</blockquote>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/kitchen_aqi_chart.jpg\" alt=\"Chart of PM 2.5 levels in our kitchen. I use a filter to remove outliers and smooth out the data.\" />\n<p>I also bought a current clamp sensor that can measure AC current. I want to set this up for the stovetop so I can detect when it's on and automatically turn on the fan (in advance, instead of waiting for the AQI to get bad.) It would be easier if I could use an energy monitoring wall plug, but it looks like the stovetop is wired directly into the circuit breaker, and it uses a lot of power so I don't want to mess around with those wires. I'll just separate them and put a clamp around one of them. I'll follow <a href=\"https://learn.openenergymonitor.org/electricity-monitoring/ct-sensors/interface-with-arduino?redirected=true\">this guide to set it all up</a> and get it working on an ESP32.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/09/ac_current_clamp_circuit.jpg\" alt=\"Circuit diagram for measuring AC current with a clamp sensor\" />\n<p>I have <a href=\"https://www.aliexpress.com/item/32695813719.html?spm=a2g0s.12269583.0.0.197e6455U2UxlV\">this power meter</a> that I'll use to calibrate it.</p>\n<p>I also want to learn how to make a proper PCB design in KiCad and order a <a href=\"https://oshpark.com/\">cool purple PCB from OSH park</a>.</p>\n<p>I'm really enjoying this self-directed crash course in electronics. It's really fun to learn so much while working on practical projects that we can use every day in our house.</p>\n<p>Thanks for reading, it was fun to write up everything I learned. If you have any questions, please feel free to ask in the comments!</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "71",
            "plaintext": "\n\n\nI originally posted this write-up on the Home Assistant Community Forums. I thought I would post it here as well, since I haven't written anything on this blog for a while. I've been getting more serious about Home Automation lately, so I might start writing some more blog posts and making a few videos.\n\n\n\nI figured out how to control the light and fan in the rangehood above my stove. I learned a lot from this project, and I wanted to share some of my experiences.\n\n\n * I figured out how to read the state of 4 buttons and light up 4 LEDs with only 5 wires\n * I discovered some powerful circuit simulation software\n * I used optocouplers for the first time (instead of relays)\n * I wrote some C++ code for a custom ESPHome component\n * I bought an oscilloscope\n\n\n\nIntroduction\n\n\nI wanted to be able to control the light and extractor fan above my stovetop, so I decided to automate it using an ESP32. This would be a similar concept to the Raspberry Pi Microwave project that I built many years ago: I would put a \"proxy\" circuit between the buttons and the main board that controls the light and fan. The circuit would simulate button presses to control the main board, and it would read the state of the original buttons so that they would still work normally. The circuit would add WiFi connectivity so that the buttons could be controlled remotely and via automations in Home Assistant.\n\n\nI still use Raspberry Pis, but now I prefer using ESP32 and ESP8266 chips. ESPHome makes it so much easier to build little devices like this, and the OTA (over-the-air) updates are really convenient. I love all the built-in components that you can easily add to your YAML configuration files.\n\n\nHere's a photo of the rangehood, with some of my tools. You can see the main controller board and the button board hanging out.\n\n\n\nThis is the button board, which has 4 buttons, and an LED for each button:\n\n\n\n\nHow to read 4 buttons and light 4 LEDs with only 5 wires\n\n\nI wanted to preserve the original functionality of the rangehood buttons, so that you wouldn't even know there's an ESP32 chip inside. This button board was the first obstacle. If there were only 4 buttons, then that would be quite easy. You can just attach them directly to GPIO pins with an internal pull-up resistor. The LEDs were a bit confusing at first, but it was a fun puzzle to solve.\n\n\nI took a photo of the PCB and traced it using different colors, so I could where each of the wires was going:\n\n\n\nI found that button has a 1K ohm resistor, and each LED has a 148 ohm resistor.\n\n\n\nCircuit simulation software\n\n\nI'm a software developer, so I really like having fast feedback loops and the ability to try lots of ideas quickly to see if something works. I started wondering if it might be possible to do this with circuits. I wanted to see if I could figure this out with trial and error and use some kind of circuit simulation software.\n\n\nI found TinkerCad, and my mind was blown! Now I had a virtual Arduino wired up to a virtual breadboard. I recreated this button/LED board inside TinkerCad. I could set up virtual multi-meters to see how much current was flowing through LEDs, and easily figure out values for resistors.\n\n\n\nThis is so awesome! It even tells you when too much current is going through an LED:\n\n\n\nHere's a link to my TinkerCad project where you can run the circuit simulation.\n\n\nI started playing around with some code in an Arduino sketch. I figured out how to light up the LEDs. I figured out how to read the buttons. But I couldn't figure out how to do them both at the same time. If I wanted to light up the LEDs, then I'd need to be using 3.3V on the shared wire. But if I wanted to read the buttons, then the shared wire needed to be connected to GND.\n\n\nThen I finally had a breakthrough. Whenever I had worked with GPIO pins in the past, I had just assumed that \"high\" and \"low\" meant \"on\" and \"off\". But I realized that \"high\" literally just means 5V (or 3.3V), and \"low\" literally just means GND. So you can just change the direction of a circuit if you set your output pins to normally \"high\", and you swap the GND pin with a 3.3V pin.\n\n\nSo instead of needing to choose between the 3.3V pin and the GND pin, I could use a GPIO pin on the shared wire and toggle it between \"high\" and \"low\". I set it to \"low\" whenever I needed to read the buttons, and set it to \"high\" whenever I needed to light up the LEDs.\n\n\nI got something working in my virtual Arduino. The other side of the circuit was quite easy (to simulate the button presses.) I used some optocouplers as relays, where you send current through an IR LED and it turns on a transistor on the other side, but it keeps both of the circuits separated. Later on I realized that I should have been looking at \"solid state relays\", which are optocouplers that are specifically designed for this purpose and can switch much higher voltages and currents.\n\n\nI tried it out with a real Arduino, and it worked!\n\n\n\nIt was a pretty cool experience to simulate a whole Arduino circuit inside my browser, and then see it work in real life.\n\n\nhttps://everycircuit.com is also a really cool option for circuit simulation:\n\n\n\nIt can handle some things that TinkerCad can't do, such as astable multivibrator circuits where you need to inject a little noise to get it started. (TinkerCad just crashes with an \"infinite loop\" error.)\n\n\n\nCustom C++ ESPHome Component\n\n\nAlright, on to the next step. I've got something working with an Arduino, but how do I port this to ESPHome and get it working over WiFI?\n\n\nI needed to set an GPIO pin to output mode for a while, briefly switch it to input mode, read the state of a button, and then set it back to output mode again. I couldn't figure out how to do this in a YAML configuration file for ESPHome, so I decided to write a custom component using C++.\n\n\nThe ESPHome documentation is pretty good, and I was able to get something working. Here's my YAML configuration and my custom C++ module: https://gist.github.com/ndbroadbent/63aa5f105e21631bee4ff9a62c9b1608\n\n\nThe most important difference between Arduino and ESPHome is that a component's loop() function is only called once every 16 milliseconds. (Arduino restarts the loop instantly.) This was actually perfect for me, since it meant that I could read the buttons once every 16ms, and leave the LEDs on before I exit the loop.\n\n\n\nI ran out of pins on my ESP8266 (Wemos D1 Mini)\n\n\nI should have made sure that everything worked on a breadboard. Instead, I started to get a bit impatient, and I jumped straight to soldering a prototype PCB. I soldering some pin headers for my ESP8266 development board, and then started with one input, and one optocoupler for the output. I tested it and it was all working, so I kept going.\n\n\nThen I checked the ESP8266 pinout and realized that I had run out of GPIO pins.\n\n\n\nI tried to get away with using some of the yellow \"OK\" ones, but the boot started failing (I guess I was pulling some of the pins high or low.) I needed 4 pins to control the optocoupler outputs, and 5 for the button/LED board. That's 9 GPIO pins, and the ESP8266 only had 7. I thought it had more!\n\n\nThis can be solved with shift registers. You only need 3 GPIO pins to control a 74HC595 8-bit shift register and get 8 digital outputs. You only need one additional GPIO pin if you want to add a CD4021BE shift register (parallel-in, serial-out) and get 8 digital inputs. This is because the input and output registers can share the same clock and latch pins. You can then daisy-chain both of these to get as many inputs and outputs as you need (or use bigger shift registers with more pins), and use only 4 GPIO pins.\n\n\nAnyway, I switched to using an ESP32 development board which has 18 usable GPIO pins, and a few more with caveats. I used breadboard jumper wires to wire it up.\n\n\n\nMy resistors were too big\n\n\nI had put 1k resistors on the optocoupler outputs, to mimic the original button/LED board. What I didn't realize is that the optocoupler itself seemed to add about 500 ohms of resistance, so the resistance was slightly too high, and the rangehood controller board couldn't reliably read the simulated button presses.\n\n\nSo I unsoldered them and switched to 560 ohm resistors. Should have tested on a breadboard.\n\n\n\nI bought a USB oscilloscope\n\n\nAfter doing a bunch of unsoldering and resoldering, putting random hookup wires all over the place, and swapping out ESP dev boards, I ended up with the ugliest prototype PCB you've ever seen. Of couse, stuff started breaking and one of my outputs wasn't working properly or reliably. It seemed like there was a problem with one of my optocouplers, and it was a real pain to figure out what was broken since I had only had a multimeter.\n\n\nI realized that a oscilloscope would be really useful, and I should have bought one a long time ago. I bought a USB BitScope 10. It's pretty cool!\n\n\n\n\nThis helped me figure out where some things needed to be resoldered. One of the optocouplers was only working when I pushed on it with my finger. I originally thought it might have been a broken chip or something to do with capacitance, but it was just a broken PCB trace and some dodgy soldering.\n\n\nI'm still learning how to use the BitScope software and have barely scratched the surface of what it can do. This is going to be extremely useful for future projects, especially for reverse engineering how stuff works. (P.S. You'll need their pre-release version for the latest version of Mac OS.)\n\n\n\nWiFi was very weak on my \"Duinotech Wearable ESP32 Development Board\"\n\n\nI initially switched to a Duinotech Wearable ESP32 Development Board that I had bought a while ago. I got everything working, but then it really struggled to connect to WiFi and would cut out regularly, and my entities would become unavailable. Even though I had a Ubiquity access point only 10 meters away in the same room.\n\n\nI found a few other people who seemed to have problems with WiFi as well, but they might be for different reasons:\n\n\n * https://www.esp32.com/viewtopic.php?t=16311\n * https://forum.micropython.org/viewtopic.php?t=11550&p=63020\n * https://www.esp32.com/viewtopic.php?t=18159\n * https://www.esp32.com/viewtopic.php?t=16622\n * https://www.esp32.com/viewtopic.php?t=6073\n * https://www.reddit.com/r/esp32/comments/bbjrir/very_poor_wifi_performance/\n\n\nThen I found the \"WiFi Power Save Mode\" section in the ESPHome documentation:\n\n\n * NONE (least power saving, Default for ESP8266)\n * LIGHT (Default for ESP32)\n\n\nSo I tried:\n\n\nwifi:\n  power_save_mode: none\n  output_power: 20\n\n\n\nI think this seemed to help a little bit, but it still wasn't very reliable. I had ordered some more electronics stuff and threw in another ESP32 Development Board. I tried this out once it arrived and it was an instant improvement. I just threw away the board with poor WiFi. I also ordered a bunch of shift registers so I can get back to using ESP8266 boards (adafruit huzzuh feathers), and they seem to have much better WiFi as well.\n\n\nI also ordered a few extra Wemos D1 Mini Pros that support external antennas. They haven't arrived yet, but I might try these out for car presence detection. I've been struggling with WiFi range for this as well.\n\n\n\nPutting it all together\n\n\nI put everything into a little black box. Connected all the wires up and stuck it inside the rangehood. I chopped the power cable for the rangehood and added a screw terminal, and wired up a USB charger to power the ESP32 board.\n\n\nSo now I've got the fan and light in Home Assistant. (And the physical buttons still work as well.)\n\n\n\nI've set up an entity controller to turn on the light.\n\n\n\nNext steps\n\n\nThe rangehood controller board has a piezo buzzer that beeps every time a button is pressed. That's pretty annoying. I might try to desolder or destroy the buzzer.\n\n\nI want to put an air quality sensor in the kitchen and automatically turn on the extractor fan based on AQI. I've ordered some ZigBee air quality meters on AliExpress, and they should arrive in a few weeks.\n\n\n\n\n\nUpdate from Sep 30, 2022: I've put the air quality sensor in the kitchen, and have set it up to turn on the rangehood fan when the PM 2.5 level is above 12 µg/m³. (It usually hovers around 6 µg/m³.) It's been working really well!\n\n\n\n\nI also bought a current clamp sensor that can measure AC current. I want to set this up for the stovetop so I can detect when it's on and automatically turn on the fan (in advance, instead of waiting for the AQI to get bad.) It would be easier if I could use an energy monitoring wall plug, but it looks like the stovetop is wired directly into the circuit breaker, and it uses a lot of power so I don't want to mess around with those wires. I'll just separate them and put a clamp around one of them. I'll follow this guide to set it all up and get it working on an ESP32.\n\n\n\nI have this power meter that I'll use to calibrate it.\n\n\nI also want to learn how to make a proper PCB design in KiCad and order a cool purple PCB from OSH park.\n\n\nI'm really enjoying this self-directed crash course in electronics. It's really fun to learn so much while working on practical projects that we can use every day in our house.\n\n\nThanks for reading, it was fun to write up everything I learned. If you have any questions, please feel free to ask in the comments!\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2022-09-30T00:00:00.000Z",
            "updated_at": "2022-09-30T00:00:00.000Z",
            "published_at": "2022-09-30T10:21:05.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8c9",
            "uuid": "af512eb5-1571-4262-bc7d-20d5298f3e82",
            "title": "Creating a new favicon with text-to-image AI",
            "slug": "how-to-create-a-favicon-with-stable-diffusion-and-dalle-2",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\nIt's been a while since [I wrote a blog post about creating a `favicon.ico` file for your website or blog.](https://madebynathan.com/2010/05/20/how-to-create-a-favicon-ico-with-gimp/) Things have changed a bit since I wrote that blog post in May 2010.\\n\\nI've been updating the CSS for my blog recently, and I wanted to update the favicon. Here's the old green square icon that I was using before:\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/favicon/old_favicon.jpg\\\" alt=\\\"My old green square favicon\\\" />\\n\\n<br/>\\n\\nI wanted something a bit more interesting, so I tried using some of the new text-to-image AI tools that have been getting a lot of attention lately. I used [Midjourney](https://www.midjourney.com/home/) and [DALL·E 2](https://openai.com/blog/dall-e/). (Midjourney uses [Stable Diffusion](https://stability.ai/blog/stable-diffusion-public-release).)\\n\\n<hr style=\\\"margin: 50px 0;\\\" />\\n\\nI played around with some different prompts in Midjourney and DALL·E 2, and I iterated on a few different ideas. I enjoy spending time in Midjourney's shared Discord channels (e.g. `#general-*`), where you can see what other people are doing and get some inspiration for prompts.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/favicon/midjourney_discord_shared_chat.jpg\\\" alt=\\\"Midjourney shared chat channel general-4\\\" />\\n\\nHere's a few examples of the prompts that I was trying:\\n\\n---\\n\\n> _website favicon logo, circuit board PCB design, vector, SVG, blue purple gradient, hexagon, bolt and tools icon_\\n\\n---\\n\\n> _small favicon logo for a blog website, circuit board pattern, electronics, vector, epic ultra wide aerial shot from atmosphere, cool gradients, ultra high contrast, blue background, psychedelic color, vortex, hyperrealism, intricate details, cinematic lighting_\\n\\nHere's some of the images that I generated using DALL·E 2:\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/favicon/dalle_library.jpg\\\" alt=\\\"Collection of images from Dalle 2\\\" />\\n\\nAnd here's some from Midjourney:\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/favicon/midjourney_library.jpg\\\" alt=\\\"Collection of images from Midjourney\\\" />\\n\\nI eventually found some shapes and colors that looked pretty cool, so I generated some variations using the Midjourney Discord Bot.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/favicon/midjourney_discord.jpg\\\" alt=\\\"Variations on a shape\\\" />\\n\\nEventually I settled on this one. It kind of looks like an abstract \\\"N\\\". I tweaked the colors and contrast a little bit in [GIMP](https://www.gimp.org/).\\n\\n<p class=\\\"text-center\\\">\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/favicon/final_logo.png\\\" alt=\\\"I settled on this gradient and shape\\\" style=\\\"max-width: 140px; margin: 50px;\\\"/>\\n</p>\\n\\nI used [realfavicongenerator.net](https://realfavicongenerator.net) to generate a favicon package with lots of different sizes and (mostly unnecessary) features.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/favicon/realfavicongenerator_net.jpg\\\" alt=\\\"realfavicongenerator.net is awesome. I use them for all my websites.\\\" />\\n\\nThey provide this HTML to include in my `<head>` tag:\\n\\n```html\\n<link rel=\\\"apple-touch-icon\\\" sizes=\\\"180x180\\\" href=\\\"/apple-touch-icon.png\\\" />\\n<link rel=\\\"icon\\\" type=\\\"image/png\\\" sizes=\\\"32x32\\\" href=\\\"/favicon-32x32.png\\\" />\\n<link rel=\\\"icon\\\" type=\\\"image/png\\\" sizes=\\\"16x16\\\" href=\\\"/favicon-16x16.png\\\" />\\n<link rel=\\\"manifest\\\" href=\\\"/site.webmanifest\\\" />\\n<link rel=\\\"mask-icon\\\" href=\\\"/safari-pinned-tab.svg\\\" color=\\\"#5bbad5\\\" />\\n<meta name=\\\"msapplication-TileColor\\\" content=\\\"#603cba\\\" />\\n<meta name=\\\"theme-color\\\" content=\\\"#ffffff\\\" />\\n```\\n\\n<hr style=\\\"margin: 50px 0;\\\" />\\n\\nSo here's the new favicon:\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/favicon/new_favicon.jpg\\\" alt=\\\"My new favicon\\\" />\\n\\n<hr style=\\\"margin: 50px 0;\\\" />\\n\\nP.S. Here's one I didn't end up using, in case you want it:\\n\\n<p class=\\\"text-left\\\">\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/favicon/wet_bectolon.jpg\\\" alt=\\\"WET BECTOLON\\\" style=\\\"max-width: 360px;\\\" />\\n</p>\\n\\n### Wet Bectolon. _Crdoruf Ptaogoatuy_\\n\\n([wetbectolon.com](https://www.namecheap.com/domains/registration/results/?domain=wetbectolon.com) is available!)\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}",
            "lexical": null,
            "html": "<!--kg-card-begin: markdown--><p>It's been a while since <a href=\"https://madebynathan.com/2010/05/20/how-to-create-a-favicon-ico-with-gimp/\">I wrote a blog post about creating a <code>favicon.ico</code> file for your website or blog.</a> Things have changed a bit since I wrote that blog post in May 2010.</p>\n<p>I've been updating the CSS for my blog recently, and I wanted to update the favicon. Here's the old green square icon that I was using before:</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/favicon/old_favicon.jpg\" alt=\"My old green square favicon\" />\n<br/>\n<p>I wanted something a bit more interesting, so I tried using some of the new text-to-image AI tools that have been getting a lot of attention lately. I used <a href=\"https://www.midjourney.com/home/\">Midjourney</a> and <a href=\"https://openai.com/blog/dall-e/\">DALL·E 2</a>. (Midjourney uses <a href=\"https://stability.ai/blog/stable-diffusion-public-release\">Stable Diffusion</a>.)</p>\n<hr style=\"margin: 50px 0;\" />\n<p>I played around with some different prompts in Midjourney and DALL·E 2, and I iterated on a few different ideas. I enjoy spending time in Midjourney's shared Discord channels (e.g. <code>#general-*</code>), where you can see what other people are doing and get some inspiration for prompts.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/favicon/midjourney_discord_shared_chat.jpg\" alt=\"Midjourney shared chat channel general-4\" />\n<p>Here's a few examples of the prompts that I was trying:</p>\n<hr>\n<blockquote>\n<p><em>website favicon logo, circuit board PCB design, vector, SVG, blue purple gradient, hexagon, bolt and tools icon</em></p>\n</blockquote>\n<hr>\n<blockquote>\n<p><em>small favicon logo for a blog website, circuit board pattern, electronics, vector, epic ultra wide aerial shot from atmosphere, cool gradients, ultra high contrast, blue background, psychedelic color, vortex, hyperrealism, intricate details, cinematic lighting</em></p>\n</blockquote>\n<p>Here's some of the images that I generated using DALL·E 2:</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/favicon/dalle_library.jpg\" alt=\"Collection of images from Dalle 2\" />\n<p>And here's some from Midjourney:</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/favicon/midjourney_library.jpg\" alt=\"Collection of images from Midjourney\" />\n<p>I eventually found some shapes and colors that looked pretty cool, so I generated some variations using the Midjourney Discord Bot.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/favicon/midjourney_discord.jpg\" alt=\"Variations on a shape\" />\n<p>Eventually I settled on this one. It kind of looks like an abstract &quot;N&quot;. I tweaked the colors and contrast a little bit in <a href=\"https://www.gimp.org/\">GIMP</a>.</p>\n<p class=\"text-center\">\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/favicon/final_logo.png\" alt=\"I settled on this gradient and shape\" style=\"max-width: 140px; margin: 50px;\"/>\n</p>\n<p>I used <a href=\"https://realfavicongenerator.net\">realfavicongenerator.net</a> to generate a favicon package with lots of different sizes and (mostly unnecessary) features.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/favicon/realfavicongenerator_net.jpg\" alt=\"realfavicongenerator.net is awesome. I use them for all my websites.\" />\n<p>They provide this HTML to include in my <code>&lt;head&gt;</code> tag:</p>\n<pre><code class=\"language-html\">&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;/apple-touch-icon.png&quot; /&gt;\n&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;32x32&quot; href=&quot;/favicon-32x32.png&quot; /&gt;\n&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;16x16&quot; href=&quot;/favicon-16x16.png&quot; /&gt;\n&lt;link rel=&quot;manifest&quot; href=&quot;/site.webmanifest&quot; /&gt;\n&lt;link rel=&quot;mask-icon&quot; href=&quot;/safari-pinned-tab.svg&quot; color=&quot;#5bbad5&quot; /&gt;\n&lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#603cba&quot; /&gt;\n&lt;meta name=&quot;theme-color&quot; content=&quot;#ffffff&quot; /&gt;\n</code></pre>\n<hr style=\"margin: 50px 0;\" />\n<p>So here's the new favicon:</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/favicon/new_favicon.jpg\" alt=\"My new favicon\" />\n<hr style=\"margin: 50px 0;\" />\n<p>P.S. Here's one I didn't end up using, in case you want it:</p>\n<p class=\"text-left\">\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/favicon/wet_bectolon.jpg\" alt=\"WET BECTOLON\" style=\"max-width: 360px;\" />\n</p>\n<h3 id=\"wetbectoloncrdorufptaogoatuy\">Wet Bectolon. <em>Crdoruf Ptaogoatuy</em></h3>\n<p>(<a href=\"https://www.namecheap.com/domains/registration/results/?domain=wetbectolon.com\">wetbectolon.com</a> is available!)</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "72",
            "plaintext": "It's been a while since I wrote a blog post about creating a favicon.ico file for your website or blog. Things have changed a bit since I wrote that blog post in May 2010.\n\n\nI've been updating the CSS for my blog recently, and I wanted to update the favicon. Here's the old green square icon that I was using before:\n\n\n\n\n\nI wanted something a bit more interesting, so I tried using some of the new text-to-image AI tools that have been getting a lot of attention lately. I used Midjourney and DALL·E 2. (Midjourney uses Stable Diffusion.)\n\n\n\nI played around with some different prompts in Midjourney and DALL·E 2, and I iterated on a few different ideas. I enjoy spending time in Midjourney's shared Discord channels (e.g. #general-*), where you can see what other people are doing and get some inspiration for prompts.\n\n\n\nHere's a few examples of the prompts that I was trying:\n\n\n\n\n\n\nwebsite favicon logo, circuit board PCB design, vector, SVG, blue purple gradient, hexagon, bolt and tools icon\n\n\n\n\n\n\n\nsmall favicon logo for a blog website, circuit board pattern, electronics, vector, epic ultra wide aerial shot from atmosphere, cool gradients, ultra high contrast, blue background, psychedelic color, vortex, hyperrealism, intricate details, cinematic lighting\n\n\n\nHere's some of the images that I generated using DALL·E 2:\n\n\n\nAnd here's some from Midjourney:\n\n\n\nI eventually found some shapes and colors that looked pretty cool, so I generated some variations using the Midjourney Discord Bot.\n\n\n\nEventually I settled on this one. It kind of looks like an abstract \"N\". I tweaked the colors and contrast a little bit in GIMP.\n\n\n\n\n\n\n\nI used realfavicongenerator.net to generate a favicon package with lots of different sizes and (mostly unnecessary) features.\n\n\n\nThey provide this HTML to include in my <head> tag:\n\n\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\" />\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\" />\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\" />\n<link rel=\"manifest\" href=\"/site.webmanifest\" />\n<link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#5bbad5\" />\n<meta name=\"msapplication-TileColor\" content=\"#603cba\" />\n<meta name=\"theme-color\" content=\"#ffffff\" />\n\n\n\n\nSo here's the new favicon:\n\n\n\n\nP.S. Here's one I didn't end up using, in case you want it:\n\n\n\n\n\n\n\n\nWet Bectolon. Crdoruf Ptaogoatuy\n\n\n(wetbectolon.com is available!)\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2022-10-01T00:00:00.000Z",
            "updated_at": "2022-10-01T00:00:00.000Z",
            "published_at": "2022-10-01T18:41:13.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8ca",
            "uuid": "cddc0c02-9fdf-4c9b-b04c-f6a53617ad37",
            "title": "Can you plug a SATA drive into a SAS controller?",
            "slug": "can-you-plug-a-sata-drive-into-a-sas-controller",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\n## Yes.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/sata-sas/sata-sas.jpg\\\" alt=\\\"SATA and SAS connectors\\\" />\\n\\nSATA and SAS use very similar connectors, but a SATA connector has a gap in the middle. This means that you can physically plug a SATA drive into a SAS connector, but you can't plug a SAS drive into a SATA controller (because it won't fit.) SAS controller software can support SATA drives, but SATA controllers don't support SAS drives (even if you have an adapter.)\\n\\n## Why do I have a SAS controller?\\n\\nI was running [Home Assistant](https://www.home-assistant.io/) and [Plex Media Server](https://www.plex.tv/) on a [Raspberry Pi 4 Model B](https://www.raspberrypi.com/products/raspberry-pi-4-model-b/). I kept adding more and more Home Assistant add-ons (which run in Docker containers), so it started to get a bit slow. It took a long time to restart Home Assistant, and we started to notice some speed and reliability issues.\\n\\nI already had a server rack in my closet, so I wanted to get a proper server to put in it. I didn't need anything too fancy. It just needed to be a little bit faster than a Raspberry Pi, so I found a 10 year old IBM server for $249 NZD ($160 USD.) I found it on TradeMe, which is similar to eBay in New Zealand.\\n\\n- Model: [IBM System X3250 M4 E3-1270v2](https://www.ibm.com/support/pages/overview-ibm-system-x3250-m4-windows-server-2012-type-2583)\\n- CPU: Intel Xeon E3-1270v2 4-core, 8-thread Processor\\n- Memory: 8GB DDR3 Ram\\n- Storage: 4x 2.5\\\" SAS / SATA drive bays, 1x 240GB SAS hard drive\\n- Controller: LSI SAS2004 IR SAS / SATA HBA\\n- Power: 2x 460w power supplies\\n\\nThe new server has been working great, and Home Assistant is noticeably faster. The 10-year-old Intel Xeon E3-1270v2 CPU has a CPU Mark benchmark score of 6429, which is 8x better than the Broadcom BCM2711 processor in a Raspberry Pi 4B (834.)\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/sata-sas/bcm2711-vs-intel-xeon.jpg\\\" alt=\\\"BCM2711 vs Intel Xeon E3-1270 V2\\\" />\\n\\n- [BCM2711 vs Intel Xeon E3-1270 V2 @ 3.50GHz on cpubenchmark.net](https://www.cpubenchmark.net/compare/BCM2711-vs-Intel-Xeon-E3-1270-V2/4297vs1192)\\n\\n---\\n\\nThe only problem is that the server came with a 320GB SAS hard-drive. It was a bit too small, and it made a lot of clicking noises. I wanted to replace it with a 1TB SATA SSD, which would be faster and silent. I just wasn't sure if my old server would be compatible with a modern SATA SSD.\\n\\nI did a bit of research, and it seemed like it would work, so I bought a new Samsung 870 EVO 1TB SSD. It was the same size and had the same screw holes as the old 2.5\\\" SAS drive, so I was able to swap the drives and use the same drive bracket. I put in the new drive and installed Debian 11 (with LVM), and everything worked great!\\n\\n**Conclusion: The latest Samsung SATA SSDs are still compatible with SAS controllers in servers that were made in 2012.**\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<h2 id=\"yes\">Yes.</h2>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/sata-sas/sata-sas.jpg\" alt=\"SATA and SAS connectors\">\n<p>SATA and SAS use very similar connectors, but a SATA connector has a gap in the middle. This means that you can physically plug a SATA drive into a SAS connector, but you can't plug a SAS drive into a SATA controller (because it won't fit.) SAS controller software can support SATA drives, but SATA controllers don't support SAS drives (even if you have an adapter.)</p>\n<h2 id=\"why-do-i-have-a-sas-controller\">Why do I have a SAS controller?</h2>\n<p>I was running <a href=\"https://www.home-assistant.io/\">Home Assistant</a> and <a href=\"https://www.plex.tv/\">Plex Media Server</a> on a <a href=\"https://www.raspberrypi.com/products/raspberry-pi-4-model-b/\">Raspberry Pi 4 Model B</a>. I kept adding more and more Home Assistant add-ons (which run in Docker containers), so it started to get a bit slow. It took a long time to restart Home Assistant, and we started to notice some speed and reliability issues.</p>\n<p>I already had a server rack in my closet, so I wanted to get a proper server to put in it. I didn't need anything too fancy. It just needed to be a little bit faster than a Raspberry Pi, so I found a 10 year old IBM server for $249 NZD ($160 USD.) I found it on TradeMe, which is similar to eBay in New Zealand.</p>\n<ul>\n<li>Model: <a href=\"https://www.ibm.com/support/pages/overview-ibm-system-x3250-m4-windows-server-2012-type-2583\">IBM System X3250 M4 E3-1270v2</a></li>\n<li>CPU: Intel Xeon E3-1270v2 4-core, 8-thread Processor</li>\n<li>Memory: 8GB DDR3 Ram</li>\n<li>Storage: 4x 2.5\" SAS / SATA drive bays, 1x 240GB SAS hard drive</li>\n<li>Controller: LSI SAS2004 IR SAS / SATA HBA</li>\n<li>Power: 2x 460w power supplies</li>\n</ul>\n<p>The new server has been working great, and Home Assistant is noticeably faster. The 10-year-old Intel Xeon E3-1270v2 CPU has a CPU Mark benchmark score of 6429, which is 8x better than the Broadcom BCM2711 processor in a Raspberry Pi 4B (834.)</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/sata-sas/bcm2711-vs-intel-xeon.jpg\" alt=\"BCM2711 vs Intel Xeon E3-1270 V2\">\n<ul>\n<li><a href=\"https://www.cpubenchmark.net/compare/BCM2711-vs-Intel-Xeon-E3-1270-V2/4297vs1192\">BCM2711 vs Intel Xeon E3-1270 V2 @ 3.50GHz on cpubenchmark.net</a></li>\n</ul>\n<hr>\n<p>The only problem is that the server came with a 320GB SAS hard-drive. It was a bit too small, and it made a lot of clicking noises. I wanted to replace it with a 1TB SATA SSD, which would be faster and silent. I just wasn't sure if my old server would be compatible with a modern SATA SSD.</p>\n<p>I did a bit of research, and it seemed like it would work, so I bought a new Samsung 870 EVO 1TB SSD. It was the same size and had the same screw holes as the old 2.5\" SAS drive, so I was able to swap the drives and use the same drive bracket. I put in the new drive and installed Debian 11 (with LVM), and everything worked great!</p>\n<p><strong>Conclusion: The latest Samsung SATA SSDs are still compatible with SAS controllers in servers that were made in 2012.</strong></p>\n",
            "comment_id": "73",
            "plaintext": "Yes.\n\n\n\nSATA and SAS use very similar connectors, but a SATA connector has a gap in the middle. This means that you can physically plug a SATA drive into a SAS connector, but you can't plug a SAS drive into a SATA controller (because it won't fit.) SAS controller software can support SATA drives, but SATA controllers don't support SAS drives (even if you have an adapter.)\n\n\n\nWhy do I have a SAS controller?\n\n\nI was running Home Assistant and Plex Media Server on a Raspberry Pi 4 Model B. I kept adding more and more Home Assistant add-ons (which run in Docker containers), so it started to get a bit slow. It took a long time to restart Home Assistant, and we started to notice some speed and reliability issues.\n\n\nI already had a server rack in my closet, so I wanted to get a proper server to put in it. I didn't need anything too fancy. It just needed to be a little bit faster than a Raspberry Pi, so I found a 10 year old IBM server for $249 NZD ($160 USD.) I found it on TradeMe, which is similar to eBay in New Zealand.\n\n\n * Model: IBM System X3250 M4 E3-1270v2\n * CPU: Intel Xeon E3-1270v2 4-core, 8-thread Processor\n * Memory: 8GB DDR3 Ram\n * Storage: 4x 2.5\" SAS / SATA drive bays, 1x 240GB SAS hard drive\n * Controller: LSI SAS2004 IR SAS / SATA HBA\n * Power: 2x 460w power supplies\n\n\nThe new server has been working great, and Home Assistant is noticeably faster. The 10-year-old Intel Xeon E3-1270v2 CPU has a CPU Mark benchmark score of 6429, which is 8x better than the Broadcom BCM2711 processor in a Raspberry Pi 4B (834.)\n\n\n\n * BCM2711 vs Intel Xeon E3-1270 V2 @ 3.50GHz on cpubenchmark.net\n\n\n\nThe only problem is that the server came with a 320GB SAS hard-drive. It was a bit too small, and it made a lot of clicking noises. I wanted to replace it with a 1TB SATA SSD, which would be faster and silent. I just wasn't sure if my old server would be compatible with a modern SATA SSD.\n\n\nI did a bit of research, and it seemed like it would work, so I bought a new Samsung 870 EVO 1TB SSD. It was the same size and had the same screw holes as the old 2.5\" SAS drive, so I was able to swap the drives and use the same drive bracket. I put in the new drive and installed Debian 11 (with LVM), and everything worked great!\n\n\nConclusion: The latest Samsung SATA SSDs are still compatible with SAS controllers in servers that were made in 2012.\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2022-10-07T00:00:00.000Z",
            "updated_at": "2024-04-19T00:24:10.000Z",
            "published_at": "2022-10-07T07:29:33.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8cb",
            "uuid": "595d202c-a4e8-4010-bf02-6ef951e16ba1",
            "title": "Delete Plex TV Shows and Movies After Watching",
            "slug": "delete-plex-tv-shows-and-movies-after-watching",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\n[`Plex-Cleaner`](https://github.com/ndbroadbent/Plex-Cleaner) is a Python script that can clean up your Plex directory by deleting movies and TV shows after you've watched them. This will stop your disk from filling up with lots of old media files over time. You can run this script on your server (or Raspberry Pi, or wherever you run Plex Media Server.)\\n\\nI like to put things in the `/opt` directory on my servers.\\n\\n- Run `git clone https://github.com/ndbroadbent/Plex-Cleaner.git /opt`\\n- Run `python3 PlexCleaner.py --dump Cleaner.conf` to create a new configuration file\\n- Configure an authentication token in `Cleaner.conf`, under the `\\\"Token\\\"` key.\\n\\n  - [Here's how to get an authentication token.](https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/)\\n\\n- Call `python3 PlexCleaner.py` to test it out.\\n\\nThe script will run in test mode and won't delete anything if your `Cleaner.conf` contains `\\\"test\\\": true`, or if you call `python3 PlexCleaner.py --test`.\\n\\n- After everything looks good in the logs, set `\\\"test\\\": false` in `Cleaner.conf`.\\n\\nYou'll probably want to run this script regularly as a cron job. Run `crontab -e` to edit your crontab, then add the following line to run the script every day at 4am:\\n\\n    0 4 * * * /usr/bin/python3 /opt/Plex-Cleaner/PlexCleaner.py\\n\\n<br/>\\n\\n---\\n\\nI always like to set up monitoring for any scheduled scripts so that I get a notification ~~if~~&nbsp;when they stop working. [healthchecks.io](https://healthchecks.io/) is my favorite monitoring tool and they have a generous free tier. _(No affiliation, they're just an awesome service.)_\\n\\nTo set up monitoring with healthchecks.io, you can call the `run_plex_cleaner.sh` script from [my fork](https://github.com/ndbroadbent/Plex-Cleaner). This script will ping [healthchecks.io](https://healthchecks.io/) on success or failure. [healthchecks.io](https://healthchecks.io/) will also send you a notification if it doesn't receive any ping at the expected time (e.g. if your server has been turned off.)\\n\\n- Sign up for a free [healthchecks.io](https://healthchecks.io/) account.\\n- Create a new check. Choose the \\\"Cron\\\" schedule and enter your cron expression, e.g. `0 4 * * *`.\\n- Make sure you also set the correct Time Zone in the options.\\n- Save the healthchecks.io check ID to a `healthchecksio_id` file in the `Plex-Cleaner` directory\\n- Set the log file option in `Cleaner.conf` so that it writes logs to a file:\\n\\n```\\n\\\"LogFile\\\": \\\"/opt/Plex-Cleaner/plexcleaner.log\\\",\\n```\\n\\n- Set up this cron job entry (instead of the one above):\\n\\n```\\n0 4 * * * /opt/Plex-Cleaner/run_plex_cleaner.sh\\n```\\n\\n<br/>\\n\\nNow you'll get an email alert whenever something goes wrong:\\n\\n- The script exits with an error\\n- The `plexcleaner.log` log file contains any `ERROR` entries\\n- The script doesn't run at all\\n\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><a href=\"https://github.com/ndbroadbent/Plex-Cleaner\"><code>Plex-Cleaner</code></a> is a Python script that can clean up your Plex directory by deleting movies and TV shows after you've watched them. This will stop your disk from filling up with lots of old media files over time. You can run this script on your server (or Raspberry Pi, or wherever you run Plex Media Server.)</p>\n<p>I like to put things in the <code>/opt</code> directory on my servers.</p>\n<ul>\n<li>\n<p>Run <code>git clone https://github.com/ndbroadbent/Plex-Cleaner.git /opt</code></p>\n</li>\n<li>\n<p>Run <code>python3 PlexCleaner.py --dump Cleaner.conf</code> to create a new configuration file</p>\n</li>\n<li>\n<p>Configure an authentication token in <code>Cleaner.conf</code>, under the <code>\"Token\"</code> key.</p>\n<ul>\n<li><a href=\"https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/\">Here's how to get an authentication token.</a></li>\n</ul>\n</li>\n<li>\n<p>Call <code>python3 PlexCleaner.py</code> to test it out.</p>\n</li>\n</ul>\n<p>The script will run in test mode and won't delete anything if your <code>Cleaner.conf</code> contains <code>\"test\": true</code>, or if you call <code>python3 PlexCleaner.py --test</code>.</p>\n<ul>\n<li>After everything looks good in the logs, set <code>\"test\": false</code> in <code>Cleaner.conf</code>.</li>\n</ul>\n<p>You'll probably want to run this script regularly as a cron job. Run <code>crontab -e</code> to edit your crontab, then add the following line to run the script every day at 4am:</p>\n<pre><code>0 4 * * * /usr/bin/python3 /opt/Plex-Cleaner/PlexCleaner.py\n</code></pre>\n<br>\n<hr>\n<p>I always like to set up monitoring for any scheduled scripts so that I get a notification <s>if</s>&nbsp;when they stop working. <a href=\"https://healthchecks.io/\">healthchecks.io</a> is my favorite monitoring tool and they have a generous free tier. <em>(No affiliation, they're just an awesome service.)</em></p>\n<p>To set up monitoring with healthchecks.io, you can call the <code>run_plex_cleaner.sh</code> script from <a href=\"https://github.com/ndbroadbent/Plex-Cleaner\">my fork</a>. This script will ping <a href=\"https://healthchecks.io/\">healthchecks.io</a> on success or failure. <a href=\"https://healthchecks.io/\">healthchecks.io</a> will also send you a notification if it doesn't receive any ping at the expected time (e.g. if your server has been turned off.)</p>\n<ul>\n<li>Sign up for a free <a href=\"https://healthchecks.io/\">healthchecks.io</a> account.</li>\n<li>Create a new check. Choose the \"Cron\" schedule and enter your cron expression, e.g. <code>0 4 * * *</code>.</li>\n<li>Make sure you also set the correct Time Zone in the options.</li>\n<li>Save the healthchecks.io check ID to a <code>healthchecksio_id</code> file in the <code>Plex-Cleaner</code> directory</li>\n<li>Set the log file option in <code>Cleaner.conf</code> so that it writes logs to a file:</li>\n</ul>\n<pre><code>\"LogFile\": \"/opt/Plex-Cleaner/plexcleaner.log\",\n</code></pre>\n<ul>\n<li>Set up this cron job entry (instead of the one above):</li>\n</ul>\n<pre><code>0 4 * * * /opt/Plex-Cleaner/run_plex_cleaner.sh\n</code></pre>\n<br>\n<p>Now you'll get an email alert whenever something goes wrong:</p>\n<ul>\n<li>The script exits with an error</li>\n<li>The <code>plexcleaner.log</code> log file contains any <code>ERROR</code> entries</li>\n<li>The script doesn't run at all</li>\n</ul>\n",
            "comment_id": "74",
            "plaintext": "Plex-Cleaner is a Python script that can clean up your Plex directory by deleting movies and TV shows after you've watched them. This will stop your disk from filling up with lots of old media files over time. You can run this script on your server (or Raspberry Pi, or wherever you run Plex Media Server.)\n\n\nI like to put things in the /opt directory on my servers.\n\n\n * \n   \n   \n   Run git clone https://github.com/ndbroadbent/Plex-Cleaner.git /opt\n   \n\n * \n   \n   \n   Run python3 PlexCleaner.py --dump Cleaner.conf to create a new configuration file\n   \n\n * \n   \n   \n   Configure an authentication token in Cleaner.conf, under the \"Token\" key.\n   \n   \n   * Here's how to get an authentication token.\n   \n * \n   \n   \n   Call python3 PlexCleaner.py to test it out.\n   \n\n\nThe script will run in test mode and won't delete anything if your Cleaner.conf contains \"test\": true, or if you call python3 PlexCleaner.py --test.\n\n\n * After everything looks good in the logs, set \"test\": false in Cleaner.conf.\n\n\nYou'll probably want to run this script regularly as a cron job. Run crontab -e to edit your crontab, then add the following line to run the script every day at 4am:\n\n\n0 4 * * * /usr/bin/python3 /opt/Plex-Cleaner/PlexCleaner.py\n\n\n\n\n\n\nI always like to set up monitoring for any scheduled scripts so that I get a notification if when they stop working. healthchecks.io is my favorite monitoring tool and they have a generous free tier. (No affiliation, they're just an awesome service.)\n\n\nTo set up monitoring with healthchecks.io, you can call the run_plex_cleaner.sh script from my fork. This script will ping healthchecks.io on success or failure. healthchecks.io will also send you a notification if it doesn't receive any ping at the expected time (e.g. if your server has been turned off.)\n\n\n * Sign up for a free healthchecks.io account.\n * Create a new check. Choose the \"Cron\" schedule and enter your cron expression, e.g. 0 4 * * *.\n * Make sure you also set the correct Time Zone in the options.\n * Save the healthchecks.io check ID to a healthchecksio_id file in the Plex-Cleaner directory\n * Set the log file option in Cleaner.conf so that it writes logs to a file:\n\n\n\"LogFile\": \"/opt/Plex-Cleaner/plexcleaner.log\",\n\n\n\n * Set up this cron job entry (instead of the one above):\n\n\n0 4 * * * /opt/Plex-Cleaner/run_plex_cleaner.sh\n\n\n\n\n\nNow you'll get an email alert whenever something goes wrong:\n\n\n * The script exits with an error\n * The plexcleaner.log log file contains any ERROR entries\n * The script doesn't run at all\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2022-10-10T00:00:00.000Z",
            "updated_at": "2024-04-19T00:23:04.000Z",
            "published_at": "2022-10-10T00:36:15.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8cc",
            "uuid": "a169a226-62a0-48e2-adb4-27f9a722a587",
            "title": "Organizing 1,700 Resistors in a Ring Binder",
            "slug": "e24-resistor-pack-ring-binder",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"markdown\",\"version\":1,\"markdown\":\"\\nI used a ring binder and card sleeves to organize 1,700 through-hole resistors.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/10k-to-51k.jpg\\\" alt=\\\"Resistors from 10K to 51K ohms\\\" />\\n\\nYou can use this PDF to make your own ring binder:\\n\\n<iframe style=\\\"width: 100%; height: 500px;\\\" src=\\\"__GHOST_URL__/content/files/2022/10/E24_Resistor_Kit_Folder.pdf\\\"></iframe>\\n\\n<br/>\\n\\n- [Download E24_Resistor_Kit_Folder.pdf](__GHOST_URL__/content/files/2022/10/E24_Resistor_Kit_Folder.pdf)\\n- [Liquid and SCSS that was used to generate the PDF](https://gist.github.com/ndbroadbent/b33a2d72a13549d01c39d10a96b97880)\\n\\n> The template code and generated PDF document are released under the MIT license. You can find a copy of the MIT license at the bottom of this page.\\n\\n---\\n\\n# What Are Resistors?\\n\\n[Resistors](https://en.wikipedia.org/wiki/Resistor) are a fundamental component in electronics. They are used to limit the current flowing through a circuit. Resistors have colored bands that represent their value. The first two bands represent the first two digits of the resistance, and the third band represents the \\\"multiplier\\\" value, or power of 10. For example, a 10KΩ resistor has a brown band, a black band, and an orange band. The first two bands are brown (1) and black (0), which is 10. The third band is orange (1,000Ω), so the resistance is 10 x 1,000 = 10,000Ω.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/10k-resistor.jpg\\\" alt=\\\"10,000 ohm resistor\\\" style=\\\"max-width: 500px;\\\" />\\n\\nThe \\\"tolerance\\\" value is the fourth band. This is the maximum deviation from the nominal resistance. For example, a 10KΩ resistor with a 5% tolerance can have a resistance between 9,500Ω and 10,500Ω.\\n\\n<br/>\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/resistor-color-chart.jpg\\\" alt=\\\"Resistor color chart\\\" style=\\\"max-width: 500px;\\\" />\\n\\n## The E24 Series\\n\\nThe [E24 series](https://en.wikipedia.org/wiki/E_series_of_preferred_numbers) is a logarithmic series of 24 values for each power of 10: 1.0, 1.1, 1.2, 1.3, 1.5, 1.6, 1.8, 2.0, 2.2, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.3, 4.7, 5.1, 5.6, 6.2, 6.8, 7.5, 8.2, 9.1.\\n\\nYou can multiply each value in the series by the multiplier (power of 10) to get the 24 resistance values for each order of magnitude. For example, these are the first ten resistor values with a brown multiplier band (10Ω): 100Ω, 110Ω, 120Ω, 130Ω, 150Ω, 160Ω, 180Ω, 200Ω, 220Ω, 240Ω.\\n\\n<br/>\\n\\n# How I Organized 1,700 Resistors\\n\\nI bought a resistor pack that included 1,700 resistors in the E24 series, in sets of 10 (170 different values.) I bought 1/4 W carbon film resistors with a 5% tolerance.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/resistor-kit.jpg\\\" alt=\\\"Pack of carbon film resistors\\\" />\\n\\nIt's very useful to have a wide range of resistors for breadboard circuits and prototype PCBs. It's not so useful when they're all mixed together in a single bag. The resistors I bought didn't have any labels or markings on the paper strips, so I had to read the colored bands or use a multimeter to find the resistance.\\n\\nFor my first attempt at organizing them, I sorted them by the multiplier band (0.1Ω, 1Ω, 10Ω, etc.), and put them in labeled drawers:\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/original-labeled-drawers.jpg\\\" alt=\\\"The original drawers I used to organize the resistors\\\" />\\n\\nThis didn't really help at all. I still needed to sort through 24 different values to find the one I was looking for. It got even worse once I started pulling out individual resistors to use in breadboard circuits. Instead of 24 sets of 10, I could have up to 240 individual resistors to sort through.\\n\\n## Ring Binder Design\\n\\nI had some spare card sleeves, and I realized that I could use these to create a 3x3 grid of pockets on an A4 ring binder sheet.\\n\\nI used [DocSpring](https://docspring.com) to create the layout for all the pages. DocSpring is an API for filling out and generating PDFs. You can upload an existing PDF form, or create your own PDF templates using HTML and CSS. DocSpring's HTML/CSS templates support the [Liquid template language](https://shopify.github.io/liquid/), so I wrote some Liquid code to calculate the resistor values and generate all the pages for the E24 series.\\n\\n> (Disclaimer: I'm the founder of DocSpring.)\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/docspring-template-html-screenshot.jpg\\\" alt=\\\"Screenshot of the DocSpring template editor showing Liquid / HTML\\\" />\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/docspring-template-scss-screenshot.jpg\\\" alt=\\\"Screenshot of the DocSpring template editor showing SCSS\\\" />\\n\\n> This template didn't need any fields, so I didn't need to use the DocSpring API. I just downloaded the generated PDF from the Preview tab.\\n\\nI included a resistor graphic that shows the colored bands for each value. This was invaluable when I was sorting resistors into sleeves.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/pdf-template-example.jpg\\\" alt=\\\"Screenshot of the DocSpring template editor showing SCSS\\\" />\\n\\nI used [Sleeve Kings 63.5mm X 88mm Card Sleeves](https://www.amazon.com/Sleeve-Kings-Card-Sleeves-63-5x88mm/dp/B07RD9QZD2?&linkCode=ll1&tag=ndbroadbent-20&linkId=b7ec66667342d933da70a72b98482f5f&language=en_US&ref_=as_li_ss_tl) for the 3x3 grid of pockets.\\n\\n<a href=\\\"https://www.amazon.com/Sleeve-Kings-Card-Sleeves-63-5x88mm/dp/B07RD9QZD2?&linkCode=ll1&tag=ndbroadbent-20&linkId=b7ec66667342d933da70a72b98482f5f&language=en_US&ref_=as_li_ss_tl\\\">\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/sleeve-kings-card-sleeves.jpg\\\" alt=\\\"Sleeve Kings 63.5mm X 88mm Card Sleeves\\\" />\\n</a>\\n\\nI cut them to make them a little shorter, and stuck them onto ring binder sheets using a glue stick. Then I sorted all the resistors into sleeves, which felt like doing a jigsaw puzzle. It was a fun activity for a rainy Sunday afternoon.\\n\\nI'm pretty happy with how this turned out, and I think my version is even better than the expensive ring binders I found for sale. The PDF and code are MIT licensed, so anyone is more than welcome to use this for personal or commercial purposes.\\n\\n- [Github Gist with Liquid and SCSS code](https://gist.github.com/ndbroadbent/b33a2d72a13549d01c39d10a96b97880)\\n- [Try a DocSpring demo with this template](https://docspring.com/templates/tpl_GP7fTnpFzJmbeJHzR7/edit)\\n- [Sign up for a free DocSpring trial account to customize the template](https://docspring.com/sign_up?library_template_id=ltp_AQbEsdhD4Ksf6mYLXD)\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Gallery: Finished Ring Binder\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h2\"},{\"type\":\"gallery\",\"version\":1,\"images\":[{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/page00.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"page00.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/page01.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"page01.jpg\"},{\"row\":0,\"src\":\"__GHOST_URL__/content/images/2024/04/page02.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"page02.jpg\"},{\"row\":1,\"src\":\"__GHOST_URL__/content/images/2024/04/page03.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"page03.jpg\"},{\"row\":1,\"src\":\"__GHOST_URL__/content/images/2024/04/page04.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"page04.jpg\"},{\"row\":1,\"src\":\"__GHOST_URL__/content/images/2024/04/page05.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"page05.jpg\"},{\"row\":2,\"src\":\"__GHOST_URL__/content/images/2024/04/page06.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"page06.jpg\"},{\"row\":2,\"src\":\"__GHOST_URL__/content/images/2024/04/page07.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"page07.jpg\"},{\"row\":2,\"src\":\"__GHOST_URL__/content/images/2024/04/page08.jpg\",\"width\":1024,\"height\":768,\"fileName\":\"page08.jpg\"}],\"caption\":\"\"},{\"children\":[],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"markdown\",\"version\":1,\"markdown\":\"> This ring binder system makes it much easier to see when I need to order more resistors. (I've got some more 330, 360, 1K, and 1.1K ohm resistors on the way!)\\n\\n<br />\\n\\n---\\n\\n# How To Organize Your Own Resistors\\n\\n## Option 1: Buy Card Binder Sheets\\n\\nAfter publishing this blog post, I found out that you can buy card binder sheets that already come with 9 pockets.\\n[You can purchase these on Amazon.](https://www.amazon.com/AmazonBasics-Sleeve-Protectors-Binder-Sheet/dp/B07PD7KBN5?&linkCode=ll1&tag=ndbroadbent-20&linkId=1e81f428ee077d3eaf75a8f274d88aa5&language=en_US&ref_=as_li_ss_tl)\\n\\n<a href=\\\"https://www.amazon.com/AmazonBasics-Sleeve-Protectors-Binder-Sheet/dp/B07PD7KBN5?&linkCode=ll1&tag=ndbroadbent-20&linkId=1e81f428ee077d3eaf75a8f274d88aa5&language=en_US&ref_=as_li_ss_tl\\\"><img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/amazon-9-sleeve-card-binder-sheets.jpg\\\" alt=\\\"3x3 card binder sheets\\\" style=\\\"max-width: 500px;\\\" /></a>\\n\\n<br/>\\n\\nI found [another option that has some flaps at the top of each pocket](https://www.amazon.com/StoreSMART-Plastic-Binders-10-Pack-RMSTWPF-MEMRY-10/dp/B00JAIIMEY?th=1&psc=1&linkCode=ll1&tag=ndbroadbent-20&linkId=545fa3f02aa979f1e78f4b86105ac6a0&language=en_US&ref_=as_li_ss_tl).\\nThis would prevent the resistors from falling out if you drop the binder or tip it upside down. I'll probably use this option next time I need to organize electronic components. It would also be very handy for SD cards and USB sticks.\\n\\n<a href=\\\"https://www.amazon.com/StoreSMART-Plastic-Binders-10-Pack-RMSTWPF-MEMRY-10/dp/B00JAIIMEY?th=1&psc=1&linkCode=ll1&tag=ndbroadbent-20&linkId=545fa3f02aa979f1e78f4b86105ac6a0&language=en_US&ref_=as_li_ss_tl\\\"><img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/3x3-binder-pockets-with-flaps.jpg\\\" alt=\\\"3x3 card binder sheets with flaps for each pocket\\\" style=\\\"max-width: 500px;\\\" /></a>\\n\\n### Supplies\\n\\n- Color printer\\n- [Ring binder](https://www.amazon.com/Avery-Economy-Showcase-Binder-19750/dp/B000WFMBO6?keywords=3+ring+binder&qid=1667182456&qu=eyJxc2MiOiI3LjY5IiwicXNhIjoiNy4wMyIsInFzcCI6IjYuNjcifQ%3D%3D&sr=8-5&linkCode=ll1&tag=ndbroadbent-20&linkId=f2b3029cfdaaa7d4ffb02938cde1d7b5&language=en_US&ref_=as_li_ss_tl)\\n- [9 Sleeve Card Binder Sheet](https://www.amazon.com/AmazonBasics-Sleeve-Protectors-Binder-Sheet/dp/B07PD7KBN5?&linkCode=ll1&tag=ndbroadbent-20&linkId=1e81f428ee077d3eaf75a8f274d88aa5&language=en_US&ref_=as_li_ss_tl), or [9 Pocket Binder Sheets With Flaps](https://www.amazon.com/StoreSMART-Plastic-Binders-10-Pack-RMSTWPF-MEMRY-10/dp/B00JAIIMEY?th=1&psc=1&linkCode=ll1&tag=ndbroadbent-20&linkId=545fa3f02aa979f1e78f4b86105ac6a0&language=en_US&ref_=as_li_ss_tl)\\n- Scissors or paper cutter\\n\\n### Instructions\\n\\n1. Print the PDF\\n2. Cut out the cards on each page\\n3. Insert the cards into the pockets\\n4. Insert resistors in front of the cards in each pocket\\n\\n---\\n\\n## Option 2: Make DIY Card Binder Sheets\\n\\n### Supplies\\n\\n- Color printer\\n- [Ring binder](https://www.amazon.com/Avery-Economy-Showcase-Binder-19750/dp/B000WFMBO6?keywords=3+ring+binder&qid=1667182456&qu=eyJxc2MiOiI3LjY5IiwicXNhIjoiNy4wMyIsInFzcCI6IjYuNjcifQ%3D%3D&sr=8-5&linkCode=ll1&tag=ndbroadbent-20&linkId=f2b3029cfdaaa7d4ffb02938cde1d7b5&language=en_US&ref_=as_li_ss_tl)\\n- [Plain ring binder sheets](https://www.amazon.com/Amazon-Basics-Clear-Protector-Binder/dp/B07R479JG2?pd_rd_w=LWRzP&content-id=amzn1.sym.9b14949a-3979-4b7d-b182-b07adcc4c0e7&pf_rd_p=9b14949a-3979-4b7d-b182-b07adcc4c0e7&pf_rd_r=51YBZA0N9E2PANB6W3QV&pd_rd_wg=cp0Cc&pd_rd_r=b6352cc5-3f7a-461c-be95-835c07b9087e&pd_rd_i=B07R479JG2&psc=1&linkCode=ll1&tag=ndbroadbent-20&linkId=89efc3eb7921da23353c29463445653f&language=en_US&ref_=as_li_ss_tl)\\n- Card sleeves (e.g. [Sleeve Kings 63.5mm X 88mm Card Sleeves](https://www.amazon.com/Sleeve-Kings-Card-Sleeves-63-5x88mm/dp/B07RD9QZD2?&linkCode=ll1&tag=ndbroadbent-20&linkId=b7ec66667342d933da70a72b98482f5f&language=en_US&ref_=as_li_ss_tl) or similar)\\n- [Glue stick](https://www.amazon.com/Elmers-School-Glue-Sticks-5ct/dp/B074MPDDRD?ac_md=0-0-Z2x1ZSBzdGljaw%3D%3D-ac_d_rm_rm_rm&content-id=amzn1.sym.568df61d-e115-4cb1-a96a-ba070b8f0935%3Aamzn1.sym.568df61d-e115-4cb1-a96a-ba070b8f0935&crid=J8VFDJPMF09A&cv_ct_cx=glue+stick&keywords=glue+stick&pd_rd_i=B074MPDDRD&pd_rd_r=d791008c-9cc0-44df-b03c-3ce198e017ad&pd_rd_w=icqOY&pd_rd_wg=ADqNT&pf_rd_p=568df61d-e115-4cb1-a96a-ba070b8f0935&pf_rd_r=B3SAPW5S9MNYK8ZDVT7Z&psc=1&qid=1667182523&qu=eyJxc2MiOiI0Ljc1IiwicXNhIjoiNC40NyIsInFzcCI6IjQuMzMifQ%3D%3D&sprefix=%2Caps%2C1199&sr=1-1-7d9bfb42-6e38-4445-b604-42cab39e191b&linkCode=ll1&tag=ndbroadbent-20&linkId=1bf8d09bd3db3775d20cc2beeed4925a&language=en_US&ref_=as_li_ss_tl)\\n\\n### Instructions\\n\\n1. Print the PDF\\n2. Insert pages into ring binder sheets\\n3. Use glue stick to glue the card sleeves to the outside of the ring binder sheets\\n4. Insert resistors into card sleeves\\n\\n---\\n\\n## Option 3: Raaco storage drawers\\n\\n[@impulse7 posted a comment on Hacker News](https://news.ycombinator.com/item?id=33393853) where they shared their own solution to this problem. They created PDF labels to organize resistors in [Raaco storage drawers](https://www.amazon.com/Storage-Home-Organization-Raaco-Tools-Improvement/s?rh=n%3A13400631%2Cp_89%3ARaaco&linkCode=ll2&tag=ndbroadbent-20&linkId=8c3a44131d986bdc83efb320e3a486a9&language=en_US&ref_=as_li_ss_tl). They have shared their [PDF generation code on GitHub](https://github.com/tonybjorkman/raaco-organizer). This is a great option if you have plenty of space in your workshop.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/raaco-storage-labels.jpg\\\" alt=\\\"Labels for Raaco storage organizer, from https://github.com/tonybjorkman/raaco-organizer\\\" />\\n\\n---\\n\\n## Option 4: Buy A Finished Ring Binder With Sorted Resistors\\n\\nIf you want to skip all the work and just buy a pre-made ring binder, you can [buy one from an electronics supplier such as RS Components](https://nz.rs-online.com/web/p/resistor-kits/2476718). This will save a lot of time, but they can be quite expensive.\\n\\n<a href=\\\"https://nz.rs-online.com/web/p/resistor-kits/2476718\\\">\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/through-hole-resistor-kit-504.jpg\\\" alt=\\\"$504 NZD for a ring binder of sorted resistors\\\" />\\n</a>\\n\\n> $504.52 New Zealand dollars = $323.72 USD\\n\\nI found a few cheaper options but they were still hundreds of dollars. So I thought it would be fun to make my own ring binder.\\n\\n---\\n\\n<br />\\n\\nP.S. Digi-Key's [Resistor Color Code Calculator](https://www.digikey.co.nz/en/resources/conversion-calculators/conversion-calculator-resistor-color-code) was very useful. It's a great tool for quickly looking up resistor values.\\n\\n<img class=\\\"lightbox thumb\\\" src=\\\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/digikey-calculator.jpg\\\" alt=\\\"DigiKey's 4 Band Resistor Color Code Calculator\\\" />\\n\"},{\"children\":[],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>I used a ring binder and card sleeves to organize 1,700 through-hole resistors.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/10k-to-51k.jpg\" alt=\"Resistors from 10K to 51K ohms\">\n<p>You can use this PDF to make your own ring binder:</p>\n<iframe style=\"width: 100%; height: 500px;\" src=\"__GHOST_URL__/content/files/2022/10/E24_Resistor_Kit_Folder.pdf\"></iframe>\n<br>\n<ul>\n<li><a href=\"__GHOST_URL__/content/files/2022/10/E24_Resistor_Kit_Folder.pdf\">Download E24_Resistor_Kit_Folder.pdf</a></li>\n<li><a href=\"https://gist.github.com/ndbroadbent/b33a2d72a13549d01c39d10a96b97880\">Liquid and SCSS that was used to generate the PDF</a></li>\n</ul>\n<blockquote>\n<p>The template code and generated PDF document are released under the MIT license. You can find a copy of the MIT license at the bottom of this page.</p>\n</blockquote>\n<hr>\n<h1 id=\"what-are-resistors\">What Are Resistors?</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/Resistor\">Resistors</a> are a fundamental component in electronics. They are used to limit the current flowing through a circuit. Resistors have colored bands that represent their value. The first two bands represent the first two digits of the resistance, and the third band represents the \"multiplier\" value, or power of 10. For example, a 10KΩ resistor has a brown band, a black band, and an orange band. The first two bands are brown (1) and black (0), which is 10. The third band is orange (1,000Ω), so the resistance is 10 x 1,000 = 10,000Ω.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/10k-resistor.jpg\" alt=\"10,000 ohm resistor\" style=\"max-width: 500px;\">\n<p>The \"tolerance\" value is the fourth band. This is the maximum deviation from the nominal resistance. For example, a 10KΩ resistor with a 5% tolerance can have a resistance between 9,500Ω and 10,500Ω.</p>\n<br>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/resistor-color-chart.jpg\" alt=\"Resistor color chart\" style=\"max-width: 500px;\">\n<h2 id=\"the-e24-series\">The E24 Series</h2>\n<p>The <a href=\"https://en.wikipedia.org/wiki/E_series_of_preferred_numbers\">E24 series</a> is a logarithmic series of 24 values for each power of 10: 1.0, 1.1, 1.2, 1.3, 1.5, 1.6, 1.8, 2.0, 2.2, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.3, 4.7, 5.1, 5.6, 6.2, 6.8, 7.5, 8.2, 9.1.</p>\n<p>You can multiply each value in the series by the multiplier (power of 10) to get the 24 resistance values for each order of magnitude. For example, these are the first ten resistor values with a brown multiplier band (10Ω): 100Ω, 110Ω, 120Ω, 130Ω, 150Ω, 160Ω, 180Ω, 200Ω, 220Ω, 240Ω.</p>\n<br>\n<h1 id=\"how-i-organized-1700-resistors\">How I Organized 1,700 Resistors</h1>\n<p>I bought a resistor pack that included 1,700 resistors in the E24 series, in sets of 10 (170 different values.) I bought 1/4 W carbon film resistors with a 5% tolerance.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/resistor-kit.jpg\" alt=\"Pack of carbon film resistors\">\n<p>It's very useful to have a wide range of resistors for breadboard circuits and prototype PCBs. It's not so useful when they're all mixed together in a single bag. The resistors I bought didn't have any labels or markings on the paper strips, so I had to read the colored bands or use a multimeter to find the resistance.</p>\n<p>For my first attempt at organizing them, I sorted them by the multiplier band (0.1Ω, 1Ω, 10Ω, etc.), and put them in labeled drawers:</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/original-labeled-drawers.jpg\" alt=\"The original drawers I used to organize the resistors\">\n<p>This didn't really help at all. I still needed to sort through 24 different values to find the one I was looking for. It got even worse once I started pulling out individual resistors to use in breadboard circuits. Instead of 24 sets of 10, I could have up to 240 individual resistors to sort through.</p>\n<h2 id=\"ring-binder-design\">Ring Binder Design</h2>\n<p>I had some spare card sleeves, and I realized that I could use these to create a 3x3 grid of pockets on an A4 ring binder sheet.</p>\n<p>I used <a href=\"https://docspring.com\">DocSpring</a> to create the layout for all the pages. DocSpring is an API for filling out and generating PDFs. You can upload an existing PDF form, or create your own PDF templates using HTML and CSS. DocSpring's HTML/CSS templates support the <a href=\"https://shopify.github.io/liquid/\">Liquid template language</a>, so I wrote some Liquid code to calculate the resistor values and generate all the pages for the E24 series.</p>\n<blockquote>\n<p>(Disclaimer: I'm the founder of DocSpring.)</p>\n</blockquote>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/docspring-template-html-screenshot.jpg\" alt=\"Screenshot of the DocSpring template editor showing Liquid / HTML\">\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/docspring-template-scss-screenshot.jpg\" alt=\"Screenshot of the DocSpring template editor showing SCSS\">\n<blockquote>\n<p>This template didn't need any fields, so I didn't need to use the DocSpring API. I just downloaded the generated PDF from the Preview tab.</p>\n</blockquote>\n<p>I included a resistor graphic that shows the colored bands for each value. This was invaluable when I was sorting resistors into sleeves.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/pdf-template-example.jpg\" alt=\"Screenshot of the DocSpring template editor showing SCSS\">\n<p>I used <a href=\"https://www.amazon.com/Sleeve-Kings-Card-Sleeves-63-5x88mm/dp/B07RD9QZD2?&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=b7ec66667342d933da70a72b98482f5f&amp;language=en_US&amp;ref_=as_li_ss_tl\">Sleeve Kings 63.5mm X 88mm Card Sleeves</a> for the 3x3 grid of pockets.</p>\n<a href=\"https://www.amazon.com/Sleeve-Kings-Card-Sleeves-63-5x88mm/dp/B07RD9QZD2?&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=b7ec66667342d933da70a72b98482f5f&amp;language=en_US&amp;ref_=as_li_ss_tl\">\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/sleeve-kings-card-sleeves.jpg\" alt=\"Sleeve Kings 63.5mm X 88mm Card Sleeves\">\n</a>\n<p>I cut them to make them a little shorter, and stuck them onto ring binder sheets using a glue stick. Then I sorted all the resistors into sleeves, which felt like doing a jigsaw puzzle. It was a fun activity for a rainy Sunday afternoon.</p>\n<p>I'm pretty happy with how this turned out, and I think my version is even better than the expensive ring binders I found for sale. The PDF and code are MIT licensed, so anyone is more than welcome to use this for personal or commercial purposes.</p>\n<ul>\n<li><a href=\"https://gist.github.com/ndbroadbent/b33a2d72a13549d01c39d10a96b97880\">Github Gist with Liquid and SCSS code</a></li>\n<li><a href=\"https://docspring.com/templates/tpl_GP7fTnpFzJmbeJHzR7/edit\">Try a DocSpring demo with this template</a></li>\n<li><a href=\"https://docspring.com/sign_up?library_template_id=ltp_AQbEsdhD4Ksf6mYLXD\">Sign up for a free DocSpring trial account to customize the template</a></li>\n</ul>\n<h2 id=\"gallery-finished-ring-binder\">Gallery: Finished Ring Binder</h2><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/page00.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/page00.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/page00.jpg 1000w, __GHOST_URL__/content/images/2024/04/page00.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/page01.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/page01.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/page01.jpg 1000w, __GHOST_URL__/content/images/2024/04/page01.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/page02.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/page02.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/page02.jpg 1000w, __GHOST_URL__/content/images/2024/04/page02.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/page03.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/page03.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/page03.jpg 1000w, __GHOST_URL__/content/images/2024/04/page03.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/page04.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/page04.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/page04.jpg 1000w, __GHOST_URL__/content/images/2024/04/page04.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/page05.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/page05.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/page05.jpg 1000w, __GHOST_URL__/content/images/2024/04/page05.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/page06.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/page06.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/page06.jpg 1000w, __GHOST_URL__/content/images/2024/04/page06.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/page07.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/page07.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/page07.jpg 1000w, __GHOST_URL__/content/images/2024/04/page07.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div><div class=\"kg-gallery-image\"><img src=\"__GHOST_URL__/content/images/2024/04/page08.jpg\" width=\"1024\" height=\"768\" loading=\"lazy\" alt=\"\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/04/page08.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/04/page08.jpg 1000w, __GHOST_URL__/content/images/2024/04/page08.jpg 1024w\" sizes=\"(min-width: 720px) 720px\"></div></div></div></figure><p></p><blockquote>\n<p>This ring binder system makes it much easier to see when I need to order more resistors. (I've got some more 330, 360, 1K, and 1.1K ohm resistors on the way!)</p>\n</blockquote>\n<br>\n<hr>\n<h1 id=\"how-to-organize-your-own-resistors\">How To Organize Your Own Resistors</h1>\n<h2 id=\"option-1-buy-card-binder-sheets\">Option 1: Buy Card Binder Sheets</h2>\n<p>After publishing this blog post, I found out that you can buy card binder sheets that already come with 9 pockets.<br>\n<a href=\"https://www.amazon.com/AmazonBasics-Sleeve-Protectors-Binder-Sheet/dp/B07PD7KBN5?&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=1e81f428ee077d3eaf75a8f274d88aa5&amp;language=en_US&amp;ref_=as_li_ss_tl\">You can purchase these on Amazon.</a></p>\n<p><a href=\"https://www.amazon.com/AmazonBasics-Sleeve-Protectors-Binder-Sheet/dp/B07PD7KBN5?&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=1e81f428ee077d3eaf75a8f274d88aa5&amp;language=en_US&amp;ref_=as_li_ss_tl\"><img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/amazon-9-sleeve-card-binder-sheets.jpg\" alt=\"3x3 card binder sheets\" style=\"max-width: 500px;\"></a></p>\n<br>\n<p>I found <a href=\"https://www.amazon.com/StoreSMART-Plastic-Binders-10-Pack-RMSTWPF-MEMRY-10/dp/B00JAIIMEY?th=1&amp;psc=1&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=545fa3f02aa979f1e78f4b86105ac6a0&amp;language=en_US&amp;ref_=as_li_ss_tl\">another option that has some flaps at the top of each pocket</a>.<br>\nThis would prevent the resistors from falling out if you drop the binder or tip it upside down. I'll probably use this option next time I need to organize electronic components. It would also be very handy for SD cards and USB sticks.</p>\n<p><a href=\"https://www.amazon.com/StoreSMART-Plastic-Binders-10-Pack-RMSTWPF-MEMRY-10/dp/B00JAIIMEY?th=1&amp;psc=1&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=545fa3f02aa979f1e78f4b86105ac6a0&amp;language=en_US&amp;ref_=as_li_ss_tl\"><img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/3x3-binder-pockets-with-flaps.jpg\" alt=\"3x3 card binder sheets with flaps for each pocket\" style=\"max-width: 500px;\"></a></p>\n<h3 id=\"supplies\">Supplies</h3>\n<ul>\n<li>Color printer</li>\n<li><a href=\"https://www.amazon.com/Avery-Economy-Showcase-Binder-19750/dp/B000WFMBO6?keywords=3+ring+binder&amp;qid=1667182456&amp;qu=eyJxc2MiOiI3LjY5IiwicXNhIjoiNy4wMyIsInFzcCI6IjYuNjcifQ%3D%3D&amp;sr=8-5&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=f2b3029cfdaaa7d4ffb02938cde1d7b5&amp;language=en_US&amp;ref_=as_li_ss_tl\">Ring binder</a></li>\n<li><a href=\"https://www.amazon.com/AmazonBasics-Sleeve-Protectors-Binder-Sheet/dp/B07PD7KBN5?&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=1e81f428ee077d3eaf75a8f274d88aa5&amp;language=en_US&amp;ref_=as_li_ss_tl\">9 Sleeve Card Binder Sheet</a>, or <a href=\"https://www.amazon.com/StoreSMART-Plastic-Binders-10-Pack-RMSTWPF-MEMRY-10/dp/B00JAIIMEY?th=1&amp;psc=1&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=545fa3f02aa979f1e78f4b86105ac6a0&amp;language=en_US&amp;ref_=as_li_ss_tl\">9 Pocket Binder Sheets With Flaps</a></li>\n<li>Scissors or paper cutter</li>\n</ul>\n<h3 id=\"instructions\">Instructions</h3>\n<ol>\n<li>Print the PDF</li>\n<li>Cut out the cards on each page</li>\n<li>Insert the cards into the pockets</li>\n<li>Insert resistors in front of the cards in each pocket</li>\n</ol>\n<hr>\n<h2 id=\"option-2-make-diy-card-binder-sheets\">Option 2: Make DIY Card Binder Sheets</h2>\n<h3 id=\"supplies\">Supplies</h3>\n<ul>\n<li>Color printer</li>\n<li><a href=\"https://www.amazon.com/Avery-Economy-Showcase-Binder-19750/dp/B000WFMBO6?keywords=3+ring+binder&amp;qid=1667182456&amp;qu=eyJxc2MiOiI3LjY5IiwicXNhIjoiNy4wMyIsInFzcCI6IjYuNjcifQ%3D%3D&amp;sr=8-5&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=f2b3029cfdaaa7d4ffb02938cde1d7b5&amp;language=en_US&amp;ref_=as_li_ss_tl\">Ring binder</a></li>\n<li><a href=\"https://www.amazon.com/Amazon-Basics-Clear-Protector-Binder/dp/B07R479JG2?pd_rd_w=LWRzP&amp;content-id=amzn1.sym.9b14949a-3979-4b7d-b182-b07adcc4c0e7&amp;pf_rd_p=9b14949a-3979-4b7d-b182-b07adcc4c0e7&amp;pf_rd_r=51YBZA0N9E2PANB6W3QV&amp;pd_rd_wg=cp0Cc&amp;pd_rd_r=b6352cc5-3f7a-461c-be95-835c07b9087e&amp;pd_rd_i=B07R479JG2&amp;psc=1&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=89efc3eb7921da23353c29463445653f&amp;language=en_US&amp;ref_=as_li_ss_tl\">Plain ring binder sheets</a></li>\n<li>Card sleeves (e.g. <a href=\"https://www.amazon.com/Sleeve-Kings-Card-Sleeves-63-5x88mm/dp/B07RD9QZD2?&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=b7ec66667342d933da70a72b98482f5f&amp;language=en_US&amp;ref_=as_li_ss_tl\">Sleeve Kings 63.5mm X 88mm Card Sleeves</a> or similar)</li>\n<li><a href=\"https://www.amazon.com/Elmers-School-Glue-Sticks-5ct/dp/B074MPDDRD?ac_md=0-0-Z2x1ZSBzdGljaw%3D%3D-ac_d_rm_rm_rm&amp;content-id=amzn1.sym.568df61d-e115-4cb1-a96a-ba070b8f0935%3Aamzn1.sym.568df61d-e115-4cb1-a96a-ba070b8f0935&amp;crid=J8VFDJPMF09A&amp;cv_ct_cx=glue+stick&amp;keywords=glue+stick&amp;pd_rd_i=B074MPDDRD&amp;pd_rd_r=d791008c-9cc0-44df-b03c-3ce198e017ad&amp;pd_rd_w=icqOY&amp;pd_rd_wg=ADqNT&amp;pf_rd_p=568df61d-e115-4cb1-a96a-ba070b8f0935&amp;pf_rd_r=B3SAPW5S9MNYK8ZDVT7Z&amp;psc=1&amp;qid=1667182523&amp;qu=eyJxc2MiOiI0Ljc1IiwicXNhIjoiNC40NyIsInFzcCI6IjQuMzMifQ%3D%3D&amp;sprefix=%2Caps%2C1199&amp;sr=1-1-7d9bfb42-6e38-4445-b604-42cab39e191b&amp;linkCode=ll1&amp;tag=ndbroadbent-20&amp;linkId=1bf8d09bd3db3775d20cc2beeed4925a&amp;language=en_US&amp;ref_=as_li_ss_tl\">Glue stick</a></li>\n</ul>\n<h3 id=\"instructions\">Instructions</h3>\n<ol>\n<li>Print the PDF</li>\n<li>Insert pages into ring binder sheets</li>\n<li>Use glue stick to glue the card sleeves to the outside of the ring binder sheets</li>\n<li>Insert resistors into card sleeves</li>\n</ol>\n<hr>\n<h2 id=\"option-3-raaco-storage-drawers\">Option 3: Raaco storage drawers</h2>\n<p><a href=\"https://news.ycombinator.com/item?id=33393853\">@impulse7 posted a comment on Hacker News</a> where they shared their own solution to this problem. They created PDF labels to organize resistors in <a href=\"https://www.amazon.com/Storage-Home-Organization-Raaco-Tools-Improvement/s?rh=n%3A13400631%2Cp_89%3ARaaco&amp;linkCode=ll2&amp;tag=ndbroadbent-20&amp;linkId=8c3a44131d986bdc83efb320e3a486a9&amp;language=en_US&amp;ref_=as_li_ss_tl\">Raaco storage drawers</a>. They have shared their <a href=\"https://github.com/tonybjorkman/raaco-organizer\">PDF generation code on GitHub</a>. This is a great option if you have plenty of space in your workshop.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/raaco-storage-labels.jpg\" alt=\"Labels for Raaco storage organizer, from https://github.com/tonybjorkman/raaco-organizer\">\n<hr>\n<h2 id=\"option-4-buy-a-finished-ring-binder-with-sorted-resistors\">Option 4: Buy A Finished Ring Binder With Sorted Resistors</h2>\n<p>If you want to skip all the work and just buy a pre-made ring binder, you can <a href=\"https://nz.rs-online.com/web/p/resistor-kits/2476718\">buy one from an electronics supplier such as RS Components</a>. This will save a lot of time, but they can be quite expensive.</p>\n<a href=\"https://nz.rs-online.com/web/p/resistor-kits/2476718\">\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/through-hole-resistor-kit-504.jpg\" alt=\"$504 NZD for a ring binder of sorted resistors\">\n</a>\n<blockquote>\n<p>$504.52 New Zealand dollars = $323.72 USD</p>\n</blockquote>\n<p>I found a few cheaper options but they were still hundreds of dollars. So I thought it would be fun to make my own ring binder.</p>\n<hr>\n<br>\n<p>P.S. Digi-Key's <a href=\"https://www.digikey.co.nz/en/resources/conversion-calculators/conversion-calculator-resistor-color-code\">Resistor Color Code Calculator</a> was very useful. It's a great tool for quickly looking up resistor values.</p>\n<img class=\"lightbox thumb\" src=\"__GHOST_URL__/content/images/posts/2022/10/e24-resistors-ring-binder/digikey-calculator.jpg\" alt=\"DigiKey's 4 Band Resistor Color Code Calculator\">\n<p></p>",
            "comment_id": "75",
            "plaintext": "I used a ring binder and card sleeves to organize 1,700 through-hole resistors.\n\n\n\nYou can use this PDF to make your own ring binder:\n\n\n\n\n\n * Download E24_Resistor_Kit_Folder.pdf\n * Liquid and SCSS that was used to generate the PDF\n\n\n\n\n\nThe template code and generated PDF document are released under the MIT license. You can find a copy of the MIT license at the bottom of this page.\n\n\n\n\n\nWhat Are Resistors?\n\n\nResistors are a fundamental component in electronics. They are used to limit the current flowing through a circuit. Resistors have colored bands that represent their value. The first two bands represent the first two digits of the resistance, and the third band represents the \"multiplier\" value, or power of 10. For example, a 10KΩ resistor has a brown band, a black band, and an orange band. The first two bands are brown (1) and black (0), which is 10. The third band is orange (1,000Ω), so the resistance is 10 x 1,000 = 10,000Ω.\n\n\n\nThe \"tolerance\" value is the fourth band. This is the maximum deviation from the nominal resistance. For example, a 10KΩ resistor with a 5% tolerance can have a resistance between 9,500Ω and 10,500Ω.\n\n\n\n\n\n\nThe E24 Series\n\n\nThe E24 series is a logarithmic series of 24 values for each power of 10: 1.0, 1.1, 1.2, 1.3, 1.5, 1.6, 1.8, 2.0, 2.2, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.3, 4.7, 5.1, 5.6, 6.2, 6.8, 7.5, 8.2, 9.1.\n\n\nYou can multiply each value in the series by the multiplier (power of 10) to get the 24 resistance values for each order of magnitude. For example, these are the first ten resistor values with a brown multiplier band (10Ω): 100Ω, 110Ω, 120Ω, 130Ω, 150Ω, 160Ω, 180Ω, 200Ω, 220Ω, 240Ω.\n\n\n\n\n\nHow I Organized 1,700 Resistors\n\n\nI bought a resistor pack that included 1,700 resistors in the E24 series, in sets of 10 (170 different values.) I bought 1/4 W carbon film resistors with a 5% tolerance.\n\n\n\nIt's very useful to have a wide range of resistors for breadboard circuits and prototype PCBs. It's not so useful when they're all mixed together in a single bag. The resistors I bought didn't have any labels or markings on the paper strips, so I had to read the colored bands or use a multimeter to find the resistance.\n\n\nFor my first attempt at organizing them, I sorted them by the multiplier band (0.1Ω, 1Ω, 10Ω, etc.), and put them in labeled drawers:\n\n\n\nThis didn't really help at all. I still needed to sort through 24 different values to find the one I was looking for. It got even worse once I started pulling out individual resistors to use in breadboard circuits. Instead of 24 sets of 10, I could have up to 240 individual resistors to sort through.\n\n\n\nRing Binder Design\n\n\nI had some spare card sleeves, and I realized that I could use these to create a 3x3 grid of pockets on an A4 ring binder sheet.\n\n\nI used DocSpring to create the layout for all the pages. DocSpring is an API for filling out and generating PDFs. You can upload an existing PDF form, or create your own PDF templates using HTML and CSS. DocSpring's HTML/CSS templates support the Liquid template language, so I wrote some Liquid code to calculate the resistor values and generate all the pages for the E24 series.\n\n\n\n\n\n(Disclaimer: I'm the founder of DocSpring.)\n\n\n\n\n\n\n\n\nThis template didn't need any fields, so I didn't need to use the DocSpring API. I just downloaded the generated PDF from the Preview tab.\n\n\n\nI included a resistor graphic that shows the colored bands for each value. This was invaluable when I was sorting resistors into sleeves.\n\n\n\nI used Sleeve Kings 63.5mm X 88mm Card Sleeves for the 3x3 grid of pockets.\n\n\n\n\n\nI cut them to make them a little shorter, and stuck them onto ring binder sheets using a glue stick. Then I sorted all the resistors into sleeves, which felt like doing a jigsaw puzzle. It was a fun activity for a rainy Sunday afternoon.\n\n\nI'm pretty happy with how this turned out, and I think my version is even better than the expensive ring binders I found for sale. The PDF and code are MIT licensed, so anyone is more than welcome to use this for personal or commercial purposes.\n\n\n * Github Gist with Liquid and SCSS code\n * Try a DocSpring demo with this template\n * Sign up for a free DocSpring trial account to customize the template\n\n\n\nGallery: Finished Ring Binder\n\n\n\n\n\n\nThis ring binder system makes it much easier to see when I need to order more resistors. (I've got some more 330, 360, 1K, and 1.1K ohm resistors on the way!)\n\n\n\n\n\n\n\nHow To Organize Your Own Resistors\n\n\n\nOption 1: Buy Card Binder Sheets\n\n\nAfter publishing this blog post, I found out that you can buy card binder sheets that already come with 9 pockets.\n\nYou can purchase these on Amazon.\n\n\n\n\n\n\n\nI found another option that has some flaps at the top of each pocket.\n\nThis would prevent the resistors from falling out if you drop the binder or tip it upside down. I'll probably use this option next time I need to organize electronic components. It would also be very handy for SD cards and USB sticks.\n\n\n\n\n\n\nSupplies\n\n\n * Color printer\n * Ring binder\n * 9 Sleeve Card Binder Sheet, or 9 Pocket Binder Sheets With Flaps\n * Scissors or paper cutter\n\n\n\nInstructions\n\n\n 1. Print the PDF\n 2. Cut out the cards on each page\n 3. Insert the cards into the pockets\n 4. Insert resistors in front of the cards in each pocket\n\n\n\n\nOption 2: Make DIY Card Binder Sheets\n\n\n\nSupplies\n\n\n * Color printer\n * Ring binder\n * Plain ring binder sheets\n * Card sleeves (e.g. Sleeve Kings 63.5mm X 88mm Card Sleeves or similar)\n * Glue stick\n\n\n\nInstructions\n\n\n 1. Print the PDF\n 2. Insert pages into ring binder sheets\n 3. Use glue stick to glue the card sleeves to the outside of the ring binder sheets\n 4. Insert resistors into card sleeves\n\n\n\n\nOption 3: Raaco storage drawers\n\n\n@impulse7 posted a comment on Hacker News where they shared their own solution to this problem. They created PDF labels to organize resistors in Raaco storage drawers. They have shared their PDF generation code on GitHub. This is a great option if you have plenty of space in your workshop.\n\n\n\n\n\nOption 4: Buy A Finished Ring Binder With Sorted Resistors\n\n\nIf you want to skip all the work and just buy a pre-made ring binder, you can buy one from an electronics supplier such as RS Components. This will save a lot of time, but they can be quite expensive.\n\n\n\n\n\n\n\n\n$504.52 New Zealand dollars = $323.72 USD\n\n\n\nI found a few cheaper options but they were still hundreds of dollars. So I thought it would be fun to make my own ring binder.\n\n\n\n\n\nP.S. Digi-Key's Resistor Color Code Calculator was very useful. It's a great tool for quickly looking up resistor values.\n\n\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2022-10-30T00:00:00.000Z",
            "updated_at": "2024-04-19T00:22:33.000Z",
            "published_at": "2022-10-30T04:07:28.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "66213221cab1a83ac77afabd",
            "uuid": "b5ebf29f-980d-4860-85cd-72e06b55b168",
            "title": "Everything I've 3D Printed (So Far)",
            "slug": "everything-ive-3d-printed-so-far",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": null,
            "comment_id": "66213221cab1a83ac77afabd",
            "plaintext": null,
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "draft",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2024-04-18T14:45:53.000Z",
            "updated_at": "2024-04-18T14:46:04.000Z",
            "published_at": null,
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "6621325bcab1a83ac77afac4",
            "uuid": "fa34c7bd-6baa-4e36-baa5-fde3baa5717e",
            "title": "My Home Automation Setup",
            "slug": "my-home-automation-setup",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": null,
            "comment_id": "6621325bcab1a83ac77afac4",
            "plaintext": null,
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "draft",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2024-04-18T14:46:51.000Z",
            "updated_at": "2024-04-18T14:46:51.000Z",
            "published_at": null,
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          }
        ],
        "posts_authors": [
          {
            "id": "66212f3bcab1a83ac77af8d2",
            "post_id": "66212f3bcab1a83ac77af882",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8d9",
            "post_id": "66212f3bcab1a83ac77af883",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8de",
            "post_id": "66212f3bcab1a83ac77af884",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8e5",
            "post_id": "66212f3bcab1a83ac77af885",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8ed",
            "post_id": "66212f3bcab1a83ac77af886",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8f2",
            "post_id": "66212f3bcab1a83ac77af887",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8f8",
            "post_id": "66212f3bcab1a83ac77af888",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af902",
            "post_id": "66212f3bcab1a83ac77af889",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af908",
            "post_id": "66212f3bcab1a83ac77af88a",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af90f",
            "post_id": "66212f3bcab1a83ac77af88b",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af914",
            "post_id": "66212f3bcab1a83ac77af88c",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af91a",
            "post_id": "66212f3bcab1a83ac77af88d",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af91e",
            "post_id": "66212f3bcab1a83ac77af88e",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af926",
            "post_id": "66212f3bcab1a83ac77af88f",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af92a",
            "post_id": "66212f3bcab1a83ac77af890",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af92f",
            "post_id": "66212f3bcab1a83ac77af891",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af93a",
            "post_id": "66212f3bcab1a83ac77af892",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af93e",
            "post_id": "66212f3bcab1a83ac77af893",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af945",
            "post_id": "66212f3bcab1a83ac77af894",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af94c",
            "post_id": "66212f3bcab1a83ac77af895",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af951",
            "post_id": "66212f3bcab1a83ac77af896",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af955",
            "post_id": "66212f3bcab1a83ac77af897",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af95b",
            "post_id": "66212f3bcab1a83ac77af898",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af95f",
            "post_id": "66212f3bcab1a83ac77af899",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af963",
            "post_id": "66212f3bcab1a83ac77af89a",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af968",
            "post_id": "66212f3bcab1a83ac77af89b",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af96f",
            "post_id": "66212f3bcab1a83ac77af89c",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af974",
            "post_id": "66212f3bcab1a83ac77af89d",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af97d",
            "post_id": "66212f3bcab1a83ac77af89e",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af983",
            "post_id": "66212f3bcab1a83ac77af89f",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af988",
            "post_id": "66212f3bcab1a83ac77af8a0",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af98d",
            "post_id": "66212f3bcab1a83ac77af8a1",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af994",
            "post_id": "66212f3bcab1a83ac77af8a2",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af99a",
            "post_id": "66212f3bcab1a83ac77af8a3",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af99e",
            "post_id": "66212f3bcab1a83ac77af8a4",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9a4",
            "post_id": "66212f3bcab1a83ac77af8a5",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9ab",
            "post_id": "66212f3bcab1a83ac77af8a6",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9b2",
            "post_id": "66212f3bcab1a83ac77af8a7",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9b8",
            "post_id": "66212f3bcab1a83ac77af8a8",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9bd",
            "post_id": "66212f3bcab1a83ac77af8a9",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9c2",
            "post_id": "66212f3bcab1a83ac77af8aa",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9c8",
            "post_id": "66212f3bcab1a83ac77af8ab",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9d0",
            "post_id": "66212f3bcab1a83ac77af8ac",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9d5",
            "post_id": "66212f3bcab1a83ac77af8ad",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9dc",
            "post_id": "66212f3bcab1a83ac77af8ae",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9e4",
            "post_id": "66212f3bcab1a83ac77af8af",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9e9",
            "post_id": "66212f3bcab1a83ac77af8b0",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9f1",
            "post_id": "66212f3bcab1a83ac77af8b1",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9f6",
            "post_id": "66212f3bcab1a83ac77af8b2",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9fb",
            "post_id": "66212f3bcab1a83ac77af8b3",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa01",
            "post_id": "66212f3bcab1a83ac77af8b4",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa07",
            "post_id": "66212f3bcab1a83ac77af8b5",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa0e",
            "post_id": "66212f3bcab1a83ac77af8b6",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa14",
            "post_id": "66212f3bcab1a83ac77af8b7",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa1b",
            "post_id": "66212f3bcab1a83ac77af8b8",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa20",
            "post_id": "66212f3bcab1a83ac77af8b9",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa28",
            "post_id": "66212f3bcab1a83ac77af8ba",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa2f",
            "post_id": "66212f3bcab1a83ac77af8bb",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa35",
            "post_id": "66212f3bcab1a83ac77af8bc",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa3e",
            "post_id": "66212f3bcab1a83ac77af8bd",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa47",
            "post_id": "66212f3bcab1a83ac77af8be",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa4e",
            "post_id": "66212f3bcab1a83ac77af8bf",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa54",
            "post_id": "66212f3bcab1a83ac77af8c0",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa5d",
            "post_id": "66212f3bcab1a83ac77af8c1",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa65",
            "post_id": "66212f3bcab1a83ac77af8c2",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa6c",
            "post_id": "66212f3bcab1a83ac77af8c3",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa74",
            "post_id": "66212f3bcab1a83ac77af8c4",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa83",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa8b",
            "post_id": "66212f3bcab1a83ac77af8c6",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa91",
            "post_id": "66212f3bcab1a83ac77af8c7",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa9a",
            "post_id": "66212f3bcab1a83ac77af8c8",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afaa5",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afaac",
            "post_id": "66212f3bcab1a83ac77af8ca",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afab1",
            "post_id": "66212f3bcab1a83ac77af8cb",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afab6",
            "post_id": "66212f3bcab1a83ac77af8cc",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "66213221cab1a83ac77afabe",
            "post_id": "66213221cab1a83ac77afabd",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "6621325bcab1a83ac77afac5",
            "post_id": "6621325bcab1a83ac77afac4",
            "author_id": "1",
            "sort_order": 0
          }
        ],
        "posts_meta": [
          {
            "id": "66212f3bcab1a83ac77af8d3",
            "post_id": "66212f3bcab1a83ac77af882",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Compaq Evo T20 projects",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8da",
            "post_id": "66212f3bcab1a83ac77af883",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "The Compaq Evo T20 works",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8df",
            "post_id": "66212f3bcab1a83ac77af884",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Next project!",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8e6",
            "post_id": "66212f3bcab1a83ac77af885",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Pertelian X2040, lcd4linux, shell-fm",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8ee",
            "post_id": "66212f3bcab1a83ac77af886",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Fireworks display in time to music",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8f3",
            "post_id": "66212f3bcab1a83ac77af887",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Hacking DSP-420 LCD displays",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8f9",
            "post_id": "66212f3bcab1a83ac77af888",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "How to use a bluetooth headset on Ubuntu 9.10 +",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3bcab1a83ac77af903",
            "post_id": "66212f3bcab1a83ac77af889",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Last.fm Player - Project Videos",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af909",
            "post_id": "66212f3bcab1a83ac77af88a",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "jqgrid on Spree",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af910",
            "post_id": "66212f3bcab1a83ac77af88b",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "obscure jqGrid API notes",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af915",
            "post_id": "66212f3bcab1a83ac77af88c",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Scanning lots of photos at once with GIMP on Ubuntu Linux",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af91b",
            "post_id": "66212f3bcab1a83ac77af88d",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "YoutubeJukebox",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af91f",
            "post_id": "66212f3bcab1a83ac77af88e",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "blueberry pi",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af927",
            "post_id": "66212f3bcab1a83ac77af88f",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "How to create a favicon.ico with GIMP",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af92b",
            "post_id": "66212f3bcab1a83ac77af890",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "git shortcuts",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af930",
            "post_id": "66212f3bcab1a83ac77af891",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Don't override core Rails methods",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af93b",
            "post_id": "66212f3bcab1a83ac77af892",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Last.fm on embedded systems",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af93f",
            "post_id": "66212f3bcab1a83ac77af893",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "How to upgrade git on legacy Ubuntu",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af946",
            "post_id": "66212f3bcab1a83ac77af894",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "wimp.com rss feed",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af94d",
            "post_id": "66212f3bcab1a83ac77af895",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "RSpec tasks on Rails 3",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af952",
            "post_id": "66212f3bcab1a83ac77af896",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Configure SMTP - SMTP Error: Could not connect to SMTP host.",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af956",
            "post_id": "66212f3bcab1a83ac77af897",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "How to preserve indentation in wordpress [sourcecode] tags",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af95c",
            "post_id": "66212f3bcab1a83ac77af898",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "How to use bundler with multiple Gemfiles in plugins / extensions",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af960",
            "post_id": "66212f3bcab1a83ac77af899",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Search and replace in multiple files on linux with bash, egrep, sed function",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af964",
            "post_id": "66212f3bcab1a83ac77af89a",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Make 'git status' put filepaths into numbered variables",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af969",
            "post_id": "66212f3bcab1a83ac77af89b",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Trying to use l1merain but it doesn't work?",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af970",
            "post_id": "66212f3bcab1a83ac77af89c",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Grooveshark - Set Current Song as Browser Title",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af975",
            "post_id": "66212f3bcab1a83ac77af89d",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "My attempt at an embossed metal box from beverage can",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af97e",
            "post_id": "66212f3bcab1a83ac77af89e",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "RFID apartment lock (& iPhone app)",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af984",
            "post_id": "66212f3bcab1a83ac77af89f",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Get Punished for Breaking Your Software Tests",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af989",
            "post_id": "66212f3bcab1a83ac77af8a0",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Gedit plugin I18n Helper for Rails",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af98e",
            "post_id": "66212f3bcab1a83ac77af8a1",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "iOS JB tweak - Replace operator with current prepaid balance",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af995",
            "post_id": "66212f3bcab1a83ac77af8a2",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "More home automation..",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af99b",
            "post_id": "66212f3bcab1a83ac77af8a3",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Demo iPhone app - Apartment automation",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af99f",
            "post_id": "66212f3bcab1a83ac77af8a4",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Wikipedia is great, help keep it free!",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9a5",
            "post_id": "66212f3bcab1a83ac77af8a5",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Add .bashrc to iPhone for SSH or MobileTerminal",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9ac",
            "post_id": "66212f3bcab1a83ac77af8a6",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Build a ruby gem and host it on rubygems.org in 4 easy steps",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9b3",
            "post_id": "66212f3bcab1a83ac77af8a7",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Daily Calvin & Hobbes RSS feed (with embedded images)",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9b9",
            "post_id": "66212f3bcab1a83ac77af8a8",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "New Cydia Themes (Sounds)",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9be",
            "post_id": "66212f3bcab1a83ac77af8a9",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Rails 3 caching views in development mode",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9c3",
            "post_id": "66212f3bcab1a83ac77af8aa",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Rails 3 Rake tasks can take too long to load",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9c9",
            "post_id": "66212f3bcab1a83ac77af8ab",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Capistrano task - show deployed revisions & diffs",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9d1",
            "post_id": "66212f3bcab1a83ac77af8ac",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Weather Notifier",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9d6",
            "post_id": "66212f3bcab1a83ac77af8ad",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "How to calculate Easter Sunday",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9dd",
            "post_id": "66212f3bcab1a83ac77af8ae",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Avatar Harmony - Sync your profile pics",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9e5",
            "post_id": "66212f3bcab1a83ac77af8af",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Really handy RVM hook to symlink current gem directory",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9ea",
            "post_id": "66212f3bcab1a83ac77af8b0",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Repurposed pressure gauge - Bathroom door indicator",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9f2",
            "post_id": "66212f3bcab1a83ac77af8b1",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Automatically change iPhone wallpaper every 30 minutes",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9f7",
            "post_id": "66212f3bcab1a83ac77af8b2",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Bash Color Index",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9fc",
            "post_id": "66212f3bcab1a83ac77af8b3",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Running bash color codes through sed",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa02",
            "post_id": "66212f3bcab1a83ac77af8b4",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Don't use 'bundle install {gem}'.",
            "meta_description": "You keep using 'bundle install {gem}'. I do not think it means what you think it means.",
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa08",
            "post_id": "66212f3bcab1a83ac77af8b5",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "A better way to use xclip (clipboard from the command line)",
            "meta_description": "A better way to use xclip",
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa0f",
            "post_id": "66212f3bcab1a83ac77af8b6",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "SCM Breeze",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa15",
            "post_id": "66212f3bcab1a83ac77af8b7",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "10 Reasons why Hackers should Jailbreak their iPhones",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa1c",
            "post_id": "66212f3bcab1a83ac77af8b8",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Managing Project Design Assets For Git Repositories: A Simple Solution",
            "meta_description": "How to use Dropbox to sync the files you don't want to check in",
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa21",
            "post_id": "66212f3bcab1a83ac77af8b9",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Testing Multiple Databases for a Rails app on Travis CI",
            "meta_description": "Testing Multiple Databases for a Rails app on Travis CI",
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa29",
            "post_id": "66212f3bcab1a83ac77af8ba",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Travis CI Status in Shell Prompt",
            "meta_description": "Travis CI Status in Shell Prompt",
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa30",
            "post_id": "66212f3bcab1a83ac77af8bb",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Scheduling one-off tasks with 'at'",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa36",
            "post_id": "66212f3bcab1a83ac77af8bc",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Skype notifications using libnotify on Linux",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa3f",
            "post_id": "66212f3bcab1a83ac77af8bd",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "How to start a Google Group for a git project",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa48",
            "post_id": "66212f3bcab1a83ac77af8be",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Automate your Rails development with cron: Keep projects updated, install gems, and maintain a repo index",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa4f",
            "post_id": "66212f3bcab1a83ac77af8bf",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Saving space in the terminal with symbols",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa55",
            "post_id": "66212f3bcab1a83ac77af8c0",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Auto-reloading your .bashrc (or .zshrc)",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa5e",
            "post_id": "66212f3bcab1a83ac77af8c1",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "capistrano_colors has been merged into capistrano",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa66",
            "post_id": "66212f3bcab1a83ac77af8c2",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Automatically run 'bundle install' when Bundler can't find a gem",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa6d",
            "post_id": "66212f3bcab1a83ac77af8c3",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Open files generated by 'rails generate' in your editor",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa75",
            "post_id": "66212f3bcab1a83ac77af8c4",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Ubuntu Keyboard Shortcut: Open a selected file in Sublime Text 2",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa84",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Raspberry Pi Microwave",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa8c",
            "post_id": "66212f3bcab1a83ac77af8c6",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "What I Learned While Making a Game With React Native",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa92",
            "post_id": "66212f3bcab1a83ac77af8c7",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Docker Saved My Blog",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa9b",
            "post_id": "66212f3bcab1a83ac77af8c8",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Automating my Kitchen Rangehood Fan and Light",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afaa6",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Creating a new favicon with text-to-image AI",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afaad",
            "post_id": "66212f3bcab1a83ac77af8ca",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Can you plug a SATA drive into a SAS controller?",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afab2",
            "post_id": "66212f3bcab1a83ac77af8cb",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Delete Plex TV Shows and Movies After Watching",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          },
          {
            "id": "66212f3dcab1a83ac77afab7",
            "post_id": "66212f3bcab1a83ac77af8cc",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": "Organizing 1,700 Resistors in a Ring Binder",
            "meta_description": null,
            "email_subject": null,
            "frontmatter": null,
            "feature_image_alt": null,
            "feature_image_caption": null,
            "email_only": 0
          }
        ],
        "posts_products": [
          {
            "id": "66212f79cab1a83ac77afab8",
            "post_id": "66212f3bcab1a83ac77af8cc",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621322ccab1a83ac77afac1",
            "post_id": "66213221cab1a83ac77afabd",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621b956cab1a83ac77afadd",
            "post_id": "66212f3bcab1a83ac77af8cb",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621b96ccab1a83ac77afae1",
            "post_id": "66212f3bcab1a83ac77af8ca",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621bb43cab1a83ac77afae7",
            "post_id": "66212f3bcab1a83ac77af8c7",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621bd45cab1a83ac77afaeb",
            "post_id": "66212f3bcab1a83ac77af8c2",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c075cab1a83ac77afb0c",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c120cab1a83ac77afb12",
            "post_id": "66212f3bcab1a83ac77af8c6",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c511cab1a83ac77afb37",
            "post_id": "66212f3bcab1a83ac77af8c4",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c617cab1a83ac77afb45",
            "post_id": "66212f3bcab1a83ac77af8c3",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c6bccab1a83ac77afb49",
            "post_id": "66212f3bcab1a83ac77af8bf",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c732cab1a83ac77afb4f",
            "post_id": "66212f3bcab1a83ac77af8be",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c75acab1a83ac77afb53",
            "post_id": "66212f3bcab1a83ac77af8bd",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c877cab1a83ac77afb57",
            "post_id": "66212f3bcab1a83ac77af8bc",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c8bccab1a83ac77afb5b",
            "post_id": "66212f3bcab1a83ac77af8bb",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c90acab1a83ac77afb60",
            "post_id": "66212f3bcab1a83ac77af8ba",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c96ccab1a83ac77afb6c",
            "post_id": "66212f3bcab1a83ac77af8b9",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c990cab1a83ac77afb70",
            "post_id": "66212f3bcab1a83ac77af8b8",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621c9c9cab1a83ac77afb74",
            "post_id": "66212f3bcab1a83ac77af8b7",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621ca19cab1a83ac77afb78",
            "post_id": "66212f3bcab1a83ac77af8b6",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621cbb5cab1a83ac77afba0",
            "post_id": "66212f3bcab1a83ac77af8b5",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621cbdecab1a83ac77afba4",
            "post_id": "66212f3bcab1a83ac77af8b4",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621cbfdcab1a83ac77afba9",
            "post_id": "66212f3bcab1a83ac77af8b3",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621cc64cab1a83ac77afbb3",
            "post_id": "66212f3bcab1a83ac77af8b2",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621cc98cab1a83ac77afbbb",
            "post_id": "66212f3bcab1a83ac77af8b1",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621ccfccab1a83ac77afbc4",
            "post_id": "66212f3bcab1a83ac77af8af",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621cdf4cab1a83ac77afbc8",
            "post_id": "66212f3bcab1a83ac77af8ae",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621ce0fcab1a83ac77afbcc",
            "post_id": "66212f3bcab1a83ac77af8ad",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621ce85cab1a83ac77afbd2",
            "post_id": "66212f3bcab1a83ac77af8ac",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621ced9cab1a83ac77afbdc",
            "post_id": "66212f3bcab1a83ac77af8ab",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621ceeecab1a83ac77afbe0",
            "post_id": "66212f3bcab1a83ac77af8aa",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621cf03cab1a83ac77afbe4",
            "post_id": "66212f3bcab1a83ac77af8a9",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621cf4dcab1a83ac77afbea",
            "post_id": "66212f3bcab1a83ac77af8a8",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621cfabcab1a83ac77afbf0",
            "post_id": "66212f3bcab1a83ac77af8a6",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d0dbcab1a83ac77afc00",
            "post_id": "66212f3bcab1a83ac77af8a5",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d0f7cab1a83ac77afc04",
            "post_id": "66212f3bcab1a83ac77af8a4",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d111cab1a83ac77afc08",
            "post_id": "66212f3bcab1a83ac77af8a3",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d13dcab1a83ac77afc10",
            "post_id": "66212f3bcab1a83ac77af8a1",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d1d1cab1a83ac77afc16",
            "post_id": "66212f3bcab1a83ac77af89f",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d1ebcab1a83ac77afc1a",
            "post_id": "66212f3bcab1a83ac77af89e",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d33ecab1a83ac77afc21",
            "post_id": "66212f3bcab1a83ac77af890",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d34acab1a83ac77afc25",
            "post_id": "66212f3bcab1a83ac77af89a",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d39acab1a83ac77afc2b",
            "post_id": "66212f3bcab1a83ac77af899",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d3d6cab1a83ac77afc2f",
            "post_id": "66212f3bcab1a83ac77af897",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d3e8cab1a83ac77afc33",
            "post_id": "66212f3bcab1a83ac77af898",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d428cab1a83ac77afc37",
            "post_id": "66212f3bcab1a83ac77af895",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d43ecab1a83ac77afc3b",
            "post_id": "66212f3bcab1a83ac77af893",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d45fcab1a83ac77afc3f",
            "post_id": "66212f3bcab1a83ac77af891",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d524cab1a83ac77afc4a",
            "post_id": "66212f3bcab1a83ac77af88f",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d555cab1a83ac77afc52",
            "post_id": "66212f3bcab1a83ac77af88c",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d680cab1a83ac77afc76",
            "post_id": "66212f3bcab1a83ac77af88b",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d6b5cab1a83ac77afc7e",
            "post_id": "66212f3bcab1a83ac77af88a",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d6fdcab1a83ac77afc89",
            "post_id": "66212f3bcab1a83ac77af888",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d71bcab1a83ac77afc8f",
            "post_id": "66212f3bcab1a83ac77af886",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d75fcab1a83ac77afc9b",
            "post_id": "66212f3bcab1a83ac77af885",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d7afcab1a83ac77afca1",
            "post_id": "66212f3bcab1a83ac77af883",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          },
          {
            "id": "6621d84acab1a83ac77afcaf",
            "post_id": "66212f3bcab1a83ac77af882",
            "product_id": "66211aa402e6b735e837da7c",
            "sort_order": 0
          }
        ],
        "posts_tags": [
          {
            "id": "66212f3bcab1a83ac77af8cd",
            "post_id": "66212f3bcab1a83ac77af882",
            "tag_id": "66212f3bcab1a83ac77af82d",
            "sort_order": 4
          },
          {
            "id": "66212f3bcab1a83ac77af8ce",
            "post_id": "66212f3bcab1a83ac77af882",
            "tag_id": "66212f3bcab1a83ac77af82e",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8cf",
            "post_id": "66212f3bcab1a83ac77af882",
            "tag_id": "66212f3bcab1a83ac77af82f",
            "sort_order": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8d0",
            "post_id": "66212f3bcab1a83ac77af882",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 2
          },
          {
            "id": "66212f3bcab1a83ac77af8d1",
            "post_id": "66212f3bcab1a83ac77af882",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3bcab1a83ac77af8d4",
            "post_id": "66212f3bcab1a83ac77af883",
            "tag_id": "66212f3bcab1a83ac77af82e",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8d5",
            "post_id": "66212f3bcab1a83ac77af883",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8d6",
            "post_id": "66212f3bcab1a83ac77af883",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 2
          },
          {
            "id": "66212f3bcab1a83ac77af8d7",
            "post_id": "66212f3bcab1a83ac77af883",
            "tag_id": "66212f3bcab1a83ac77af832",
            "sort_order": 3
          },
          {
            "id": "66212f3bcab1a83ac77af8d8",
            "post_id": "66212f3bcab1a83ac77af883",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3bcab1a83ac77af8db",
            "post_id": "66212f3bcab1a83ac77af884",
            "tag_id": "66212f3bcab1a83ac77af832",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8dc",
            "post_id": "66212f3bcab1a83ac77af884",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8dd",
            "post_id": "66212f3bcab1a83ac77af884",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3bcab1a83ac77af8e0",
            "post_id": "66212f3bcab1a83ac77af885",
            "tag_id": "66212f3bcab1a83ac77af82e",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8e1",
            "post_id": "66212f3bcab1a83ac77af885",
            "tag_id": "66212f3bcab1a83ac77af833",
            "sort_order": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8e2",
            "post_id": "66212f3bcab1a83ac77af885",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 2
          },
          {
            "id": "66212f3bcab1a83ac77af8e3",
            "post_id": "66212f3bcab1a83ac77af885",
            "tag_id": "66212f3bcab1a83ac77af832",
            "sort_order": 3
          },
          {
            "id": "66212f3bcab1a83ac77af8e4",
            "post_id": "66212f3bcab1a83ac77af885",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3bcab1a83ac77af8e7",
            "post_id": "66212f3bcab1a83ac77af886",
            "tag_id": "66212f3bcab1a83ac77af834",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8e8",
            "post_id": "66212f3bcab1a83ac77af886",
            "tag_id": "66212f3bcab1a83ac77af835",
            "sort_order": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8e9",
            "post_id": "66212f3bcab1a83ac77af886",
            "tag_id": "66212f3bcab1a83ac77af836",
            "sort_order": 2
          },
          {
            "id": "66212f3bcab1a83ac77af8ea",
            "post_id": "66212f3bcab1a83ac77af886",
            "tag_id": "66212f3bcab1a83ac77af837",
            "sort_order": 3
          },
          {
            "id": "66212f3bcab1a83ac77af8eb",
            "post_id": "66212f3bcab1a83ac77af886",
            "tag_id": "66212f3bcab1a83ac77af838",
            "sort_order": 4
          },
          {
            "id": "66212f3bcab1a83ac77af8ec",
            "post_id": "66212f3bcab1a83ac77af886",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 5
          },
          {
            "id": "66212f3bcab1a83ac77af8ef",
            "post_id": "66212f3bcab1a83ac77af887",
            "tag_id": "66212f3bcab1a83ac77af833",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8f0",
            "post_id": "66212f3bcab1a83ac77af887",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8f1",
            "post_id": "66212f3bcab1a83ac77af887",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3bcab1a83ac77af8f4",
            "post_id": "66212f3bcab1a83ac77af888",
            "tag_id": "66212f3bcab1a83ac77af839",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8f5",
            "post_id": "66212f3bcab1a83ac77af888",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8f6",
            "post_id": "66212f3bcab1a83ac77af888",
            "tag_id": "66212f3bcab1a83ac77af83a",
            "sort_order": 2
          },
          {
            "id": "66212f3bcab1a83ac77af8f7",
            "post_id": "66212f3bcab1a83ac77af888",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3bcab1a83ac77af8fa",
            "post_id": "66212f3bcab1a83ac77af889",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 0
          },
          {
            "id": "66212f3bcab1a83ac77af8fb",
            "post_id": "66212f3bcab1a83ac77af889",
            "tag_id": "66212f3bcab1a83ac77af835",
            "sort_order": 1
          },
          {
            "id": "66212f3bcab1a83ac77af8fc",
            "post_id": "66212f3bcab1a83ac77af889",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 2
          },
          {
            "id": "66212f3bcab1a83ac77af8fd",
            "post_id": "66212f3bcab1a83ac77af889",
            "tag_id": "66212f3bcab1a83ac77af834",
            "sort_order": 3
          },
          {
            "id": "66212f3bcab1a83ac77af8fe",
            "post_id": "66212f3bcab1a83ac77af889",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 4
          },
          {
            "id": "66212f3bcab1a83ac77af8ff",
            "post_id": "66212f3bcab1a83ac77af889",
            "tag_id": "66212f3bcab1a83ac77af83a",
            "sort_order": 5
          },
          {
            "id": "66212f3bcab1a83ac77af900",
            "post_id": "66212f3bcab1a83ac77af889",
            "tag_id": "66212f3bcab1a83ac77af83c",
            "sort_order": 6
          },
          {
            "id": "66212f3bcab1a83ac77af901",
            "post_id": "66212f3bcab1a83ac77af889",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 7
          },
          {
            "id": "66212f3ccab1a83ac77af904",
            "post_id": "66212f3bcab1a83ac77af88a",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af905",
            "post_id": "66212f3bcab1a83ac77af88a",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af906",
            "post_id": "66212f3bcab1a83ac77af88a",
            "tag_id": "66212f3bcab1a83ac77af83e",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af907",
            "post_id": "66212f3bcab1a83ac77af88a",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af90a",
            "post_id": "66212f3bcab1a83ac77af88b",
            "tag_id": "66212f3bcab1a83ac77af83f",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af90b",
            "post_id": "66212f3bcab1a83ac77af88b",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af90c",
            "post_id": "66212f3bcab1a83ac77af88b",
            "tag_id": "66212f3bcab1a83ac77af840",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af90d",
            "post_id": "66212f3bcab1a83ac77af88b",
            "tag_id": "66212f3bcab1a83ac77af83e",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af90e",
            "post_id": "66212f3bcab1a83ac77af88b",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af911",
            "post_id": "66212f3bcab1a83ac77af88c",
            "tag_id": "66212f3bcab1a83ac77af841",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af912",
            "post_id": "66212f3bcab1a83ac77af88c",
            "tag_id": "66212f3bcab1a83ac77af842",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af913",
            "post_id": "66212f3bcab1a83ac77af88c",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af916",
            "post_id": "66212f3bcab1a83ac77af88d",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af917",
            "post_id": "66212f3bcab1a83ac77af88d",
            "tag_id": "66212f3bcab1a83ac77af83c",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af918",
            "post_id": "66212f3bcab1a83ac77af88d",
            "tag_id": "66212f3bcab1a83ac77af843",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af919",
            "post_id": "66212f3bcab1a83ac77af88d",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af91c",
            "post_id": "66212f3bcab1a83ac77af88e",
            "tag_id": "66212f3bcab1a83ac77af844",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af91d",
            "post_id": "66212f3bcab1a83ac77af88e",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af920",
            "post_id": "66212f3bcab1a83ac77af88f",
            "tag_id": "66212f3bcab1a83ac77af841",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af921",
            "post_id": "66212f3bcab1a83ac77af88f",
            "tag_id": "66212f3bcab1a83ac77af840",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af922",
            "post_id": "66212f3bcab1a83ac77af88f",
            "tag_id": "66212f3bcab1a83ac77af845",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af923",
            "post_id": "66212f3bcab1a83ac77af88f",
            "tag_id": "66212f3bcab1a83ac77af846",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af924",
            "post_id": "66212f3bcab1a83ac77af88f",
            "tag_id": "66212f3bcab1a83ac77af847",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af925",
            "post_id": "66212f3bcab1a83ac77af88f",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 5
          },
          {
            "id": "66212f3ccab1a83ac77af928",
            "post_id": "66212f3bcab1a83ac77af890",
            "tag_id": "66212f3bcab1a83ac77af848",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af929",
            "post_id": "66212f3bcab1a83ac77af890",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af92c",
            "post_id": "66212f3bcab1a83ac77af891",
            "tag_id": "66212f3bcab1a83ac77af849",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af92d",
            "post_id": "66212f3bcab1a83ac77af891",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af92e",
            "post_id": "66212f3bcab1a83ac77af891",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af931",
            "post_id": "66212f3bcab1a83ac77af892",
            "tag_id": "66212f3bcab1a83ac77af82e",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af932",
            "post_id": "66212f3bcab1a83ac77af892",
            "tag_id": "66212f3bcab1a83ac77af833",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af933",
            "post_id": "66212f3bcab1a83ac77af892",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af934",
            "post_id": "66212f3bcab1a83ac77af892",
            "tag_id": "66212f3bcab1a83ac77af835",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af935",
            "post_id": "66212f3bcab1a83ac77af892",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af936",
            "post_id": "66212f3bcab1a83ac77af892",
            "tag_id": "66212f3bcab1a83ac77af832",
            "sort_order": 5
          },
          {
            "id": "66212f3ccab1a83ac77af937",
            "post_id": "66212f3bcab1a83ac77af892",
            "tag_id": "66212f3bcab1a83ac77af840",
            "sort_order": 6
          },
          {
            "id": "66212f3ccab1a83ac77af938",
            "post_id": "66212f3bcab1a83ac77af892",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 7
          },
          {
            "id": "66212f3ccab1a83ac77af939",
            "post_id": "66212f3bcab1a83ac77af892",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 8
          },
          {
            "id": "66212f3ccab1a83ac77af93c",
            "post_id": "66212f3bcab1a83ac77af893",
            "tag_id": "66212f3bcab1a83ac77af848",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af93d",
            "post_id": "66212f3bcab1a83ac77af893",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af940",
            "post_id": "66212f3bcab1a83ac77af894",
            "tag_id": "66212f3bcab1a83ac77af84a",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af941",
            "post_id": "66212f3bcab1a83ac77af894",
            "tag_id": "66212f3bcab1a83ac77af84b",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af942",
            "post_id": "66212f3bcab1a83ac77af894",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af943",
            "post_id": "66212f3bcab1a83ac77af894",
            "tag_id": "66212f3bcab1a83ac77af83c",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af944",
            "post_id": "66212f3bcab1a83ac77af894",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af947",
            "post_id": "66212f3bcab1a83ac77af895",
            "tag_id": "66212f3bcab1a83ac77af84c",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af948",
            "post_id": "66212f3bcab1a83ac77af895",
            "tag_id": "66212f3bcab1a83ac77af84d",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af949",
            "post_id": "66212f3bcab1a83ac77af895",
            "tag_id": "66212f3bcab1a83ac77af849",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af94a",
            "post_id": "66212f3bcab1a83ac77af895",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af94b",
            "post_id": "66212f3bcab1a83ac77af895",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af94e",
            "post_id": "66212f3bcab1a83ac77af896",
            "tag_id": "66212f3bcab1a83ac77af849",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af94f",
            "post_id": "66212f3bcab1a83ac77af896",
            "tag_id": "66212f3bcab1a83ac77af84e",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af950",
            "post_id": "66212f3bcab1a83ac77af896",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af953",
            "post_id": "66212f3bcab1a83ac77af897",
            "tag_id": "66212f3bcab1a83ac77af84e",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af954",
            "post_id": "66212f3bcab1a83ac77af897",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af957",
            "post_id": "66212f3bcab1a83ac77af898",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af958",
            "post_id": "66212f3bcab1a83ac77af898",
            "tag_id": "66212f3bcab1a83ac77af84f",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af959",
            "post_id": "66212f3bcab1a83ac77af898",
            "tag_id": "66212f3bcab1a83ac77af850",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af95a",
            "post_id": "66212f3bcab1a83ac77af898",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af95d",
            "post_id": "66212f3bcab1a83ac77af899",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af95e",
            "post_id": "66212f3bcab1a83ac77af899",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af961",
            "post_id": "66212f3bcab1a83ac77af89a",
            "tag_id": "66212f3bcab1a83ac77af848",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af962",
            "post_id": "66212f3bcab1a83ac77af89a",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af965",
            "post_id": "66212f3bcab1a83ac77af89b",
            "tag_id": "66212f3bcab1a83ac77af852",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af966",
            "post_id": "66212f3bcab1a83ac77af89b",
            "tag_id": "66212f3bcab1a83ac77af853",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af967",
            "post_id": "66212f3bcab1a83ac77af89b",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af96a",
            "post_id": "66212f3bcab1a83ac77af89c",
            "tag_id": "66212f3bcab1a83ac77af854",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af96b",
            "post_id": "66212f3bcab1a83ac77af89c",
            "tag_id": "66212f3bcab1a83ac77af83f",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af96c",
            "post_id": "66212f3bcab1a83ac77af89c",
            "tag_id": "66212f3bcab1a83ac77af835",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af96d",
            "post_id": "66212f3bcab1a83ac77af89c",
            "tag_id": "66212f3bcab1a83ac77af855",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af96e",
            "post_id": "66212f3bcab1a83ac77af89c",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af971",
            "post_id": "66212f3bcab1a83ac77af89d",
            "tag_id": "66212f3bcab1a83ac77af846",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af972",
            "post_id": "66212f3bcab1a83ac77af89d",
            "tag_id": "66212f3bcab1a83ac77af856",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af973",
            "post_id": "66212f3bcab1a83ac77af89d",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af976",
            "post_id": "66212f3bcab1a83ac77af89e",
            "tag_id": "66212f3bcab1a83ac77af82e",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af977",
            "post_id": "66212f3bcab1a83ac77af89e",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af978",
            "post_id": "66212f3bcab1a83ac77af89e",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af979",
            "post_id": "66212f3bcab1a83ac77af89e",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af97a",
            "post_id": "66212f3bcab1a83ac77af89e",
            "tag_id": "66212f3bcab1a83ac77af857",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af97b",
            "post_id": "66212f3bcab1a83ac77af89e",
            "tag_id": "66212f3bcab1a83ac77af858",
            "sort_order": 5
          },
          {
            "id": "66212f3ccab1a83ac77af97c",
            "post_id": "66212f3bcab1a83ac77af89e",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 6
          },
          {
            "id": "66212f3ccab1a83ac77af97f",
            "post_id": "66212f3bcab1a83ac77af89f",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af980",
            "post_id": "66212f3bcab1a83ac77af89f",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af981",
            "post_id": "66212f3bcab1a83ac77af89f",
            "tag_id": "66212f3bcab1a83ac77af859",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af982",
            "post_id": "66212f3bcab1a83ac77af89f",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af985",
            "post_id": "66212f3bcab1a83ac77af8a0",
            "tag_id": "66212f3bcab1a83ac77af850",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af986",
            "post_id": "66212f3bcab1a83ac77af8a0",
            "tag_id": "66212f3bcab1a83ac77af85a",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af987",
            "post_id": "66212f3bcab1a83ac77af8a0",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af98a",
            "post_id": "66212f3bcab1a83ac77af8a1",
            "tag_id": "66212f3bcab1a83ac77af852",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af98b",
            "post_id": "66212f3bcab1a83ac77af8a1",
            "tag_id": "66212f3bcab1a83ac77af853",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af98c",
            "post_id": "66212f3bcab1a83ac77af8a1",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af98f",
            "post_id": "66212f3bcab1a83ac77af8a2",
            "tag_id": "66212f3bcab1a83ac77af82e",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af990",
            "post_id": "66212f3bcab1a83ac77af8a2",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af991",
            "post_id": "66212f3bcab1a83ac77af8a2",
            "tag_id": "66212f3bcab1a83ac77af858",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af992",
            "post_id": "66212f3bcab1a83ac77af8a2",
            "tag_id": "66212f3bcab1a83ac77af857",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af993",
            "post_id": "66212f3bcab1a83ac77af8a2",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af996",
            "post_id": "66212f3bcab1a83ac77af8a3",
            "tag_id": "66212f3bcab1a83ac77af852",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af997",
            "post_id": "66212f3bcab1a83ac77af8a3",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af998",
            "post_id": "66212f3bcab1a83ac77af8a3",
            "tag_id": "66212f3bcab1a83ac77af858",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af999",
            "post_id": "66212f3bcab1a83ac77af8a3",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af99c",
            "post_id": "66212f3bcab1a83ac77af8a4",
            "tag_id": "66212f3bcab1a83ac77af85b",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af99d",
            "post_id": "66212f3bcab1a83ac77af8a4",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9a0",
            "post_id": "66212f3bcab1a83ac77af8a5",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9a1",
            "post_id": "66212f3bcab1a83ac77af8a5",
            "tag_id": "66212f3bcab1a83ac77af852",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9a2",
            "post_id": "66212f3bcab1a83ac77af8a5",
            "tag_id": "66212f3bcab1a83ac77af853",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9a3",
            "post_id": "66212f3bcab1a83ac77af8a5",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af9a6",
            "post_id": "66212f3bcab1a83ac77af8a6",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9a7",
            "post_id": "66212f3bcab1a83ac77af8a6",
            "tag_id": "66212f3bcab1a83ac77af85c",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9a8",
            "post_id": "66212f3bcab1a83ac77af8a6",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9a9",
            "post_id": "66212f3bcab1a83ac77af8a6",
            "tag_id": "66212f3bcab1a83ac77af84f",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af9aa",
            "post_id": "66212f3bcab1a83ac77af8a6",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af9ad",
            "post_id": "66212f3bcab1a83ac77af8a7",
            "tag_id": "66212f3bcab1a83ac77af84a",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9ae",
            "post_id": "66212f3bcab1a83ac77af8a7",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9af",
            "post_id": "66212f3bcab1a83ac77af8a7",
            "tag_id": "66212f3bcab1a83ac77af84b",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9b0",
            "post_id": "66212f3bcab1a83ac77af8a7",
            "tag_id": "66212f3bcab1a83ac77af85d",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af9b1",
            "post_id": "66212f3bcab1a83ac77af8a7",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af9b4",
            "post_id": "66212f3bcab1a83ac77af8a8",
            "tag_id": "66212f3bcab1a83ac77af852",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9b5",
            "post_id": "66212f3bcab1a83ac77af8a8",
            "tag_id": "66212f3bcab1a83ac77af85e",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9b6",
            "post_id": "66212f3bcab1a83ac77af8a8",
            "tag_id": "66212f3bcab1a83ac77af853",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9b7",
            "post_id": "66212f3bcab1a83ac77af8a8",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af9ba",
            "post_id": "66212f3bcab1a83ac77af8a9",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9bb",
            "post_id": "66212f3bcab1a83ac77af8a9",
            "tag_id": "66212f3bcab1a83ac77af84d",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9bc",
            "post_id": "66212f3bcab1a83ac77af8a9",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9bf",
            "post_id": "66212f3bcab1a83ac77af8aa",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9c0",
            "post_id": "66212f3bcab1a83ac77af8aa",
            "tag_id": "66212f3bcab1a83ac77af84d",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9c1",
            "post_id": "66212f3bcab1a83ac77af8aa",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9c4",
            "post_id": "66212f3bcab1a83ac77af8ab",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9c5",
            "post_id": "66212f3bcab1a83ac77af8ab",
            "tag_id": "66212f3bcab1a83ac77af84d",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9c6",
            "post_id": "66212f3bcab1a83ac77af8ab",
            "tag_id": "66212f3bcab1a83ac77af85f",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9c7",
            "post_id": "66212f3bcab1a83ac77af8ab",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af9ca",
            "post_id": "66212f3bcab1a83ac77af8ac",
            "tag_id": "66212f3bcab1a83ac77af82e",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9cb",
            "post_id": "66212f3bcab1a83ac77af8ac",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9cc",
            "post_id": "66212f3bcab1a83ac77af8ac",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9cd",
            "post_id": "66212f3bcab1a83ac77af8ac",
            "tag_id": "66212f3bcab1a83ac77af858",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af9ce",
            "post_id": "66212f3bcab1a83ac77af8ac",
            "tag_id": "66212f3bcab1a83ac77af857",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af9cf",
            "post_id": "66212f3bcab1a83ac77af8ac",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 5
          },
          {
            "id": "66212f3ccab1a83ac77af9d2",
            "post_id": "66212f3bcab1a83ac77af8ad",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9d3",
            "post_id": "66212f3bcab1a83ac77af8ad",
            "tag_id": "66212f3bcab1a83ac77af858",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9d4",
            "post_id": "66212f3bcab1a83ac77af8ad",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9d7",
            "post_id": "66212f3bcab1a83ac77af8ae",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9d8",
            "post_id": "66212f3bcab1a83ac77af8ae",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9d9",
            "post_id": "66212f3bcab1a83ac77af8ae",
            "tag_id": "66212f3bcab1a83ac77af840",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9da",
            "post_id": "66212f3bcab1a83ac77af8ae",
            "tag_id": "66212f3bcab1a83ac77af84d",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af9db",
            "post_id": "66212f3bcab1a83ac77af8ae",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af9de",
            "post_id": "66212f3bcab1a83ac77af8af",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9df",
            "post_id": "66212f3bcab1a83ac77af8af",
            "tag_id": "66212f3bcab1a83ac77af84f",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9e0",
            "post_id": "66212f3bcab1a83ac77af8af",
            "tag_id": "66212f3bcab1a83ac77af84d",
            "sort_order": 2
          },
          {
            "id": "66212f3ccab1a83ac77af9e1",
            "post_id": "66212f3bcab1a83ac77af8af",
            "tag_id": "66212f3bcab1a83ac77af860",
            "sort_order": 3
          },
          {
            "id": "66212f3ccab1a83ac77af9e2",
            "post_id": "66212f3bcab1a83ac77af8af",
            "tag_id": "66212f3bcab1a83ac77af85a",
            "sort_order": 4
          },
          {
            "id": "66212f3ccab1a83ac77af9e3",
            "post_id": "66212f3bcab1a83ac77af8af",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 5
          },
          {
            "id": "66212f3ccab1a83ac77af9e6",
            "post_id": "66212f3bcab1a83ac77af8b0",
            "tag_id": "66212f3bcab1a83ac77af857",
            "sort_order": 0
          },
          {
            "id": "66212f3ccab1a83ac77af9e7",
            "post_id": "66212f3bcab1a83ac77af8b0",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3ccab1a83ac77af9e8",
            "post_id": "66212f3bcab1a83ac77af8b0",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77af9eb",
            "post_id": "66212f3bcab1a83ac77af8b1",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9ec",
            "post_id": "66212f3bcab1a83ac77af8b1",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77af9ed",
            "post_id": "66212f3bcab1a83ac77af8b1",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77af9ee",
            "post_id": "66212f3bcab1a83ac77af8b1",
            "tag_id": "66212f3bcab1a83ac77af852",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77af9ef",
            "post_id": "66212f3bcab1a83ac77af8b1",
            "tag_id": "66212f3bcab1a83ac77af853",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77af9f0",
            "post_id": "66212f3bcab1a83ac77af8b1",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77af9f3",
            "post_id": "66212f3bcab1a83ac77af8b2",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9f4",
            "post_id": "66212f3bcab1a83ac77af8b2",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77af9f5",
            "post_id": "66212f3bcab1a83ac77af8b2",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77af9f8",
            "post_id": "66212f3bcab1a83ac77af8b3",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9f9",
            "post_id": "66212f3bcab1a83ac77af8b3",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77af9fa",
            "post_id": "66212f3bcab1a83ac77af8b3",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77af9fd",
            "post_id": "66212f3bcab1a83ac77af8b4",
            "tag_id": "66212f3bcab1a83ac77af84f",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77af9fe",
            "post_id": "66212f3bcab1a83ac77af8b4",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77af9ff",
            "post_id": "66212f3bcab1a83ac77af8b4",
            "tag_id": "66212f3bcab1a83ac77af85c",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa00",
            "post_id": "66212f3bcab1a83ac77af8b4",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa03",
            "post_id": "66212f3bcab1a83ac77af8b5",
            "tag_id": "66212f3bcab1a83ac77af862",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa04",
            "post_id": "66212f3bcab1a83ac77af8b5",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa05",
            "post_id": "66212f3bcab1a83ac77af8b5",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa06",
            "post_id": "66212f3bcab1a83ac77af8b5",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa09",
            "post_id": "66212f3bcab1a83ac77af8b6",
            "tag_id": "66212f3bcab1a83ac77af848",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa0a",
            "post_id": "66212f3bcab1a83ac77af8b6",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa0b",
            "post_id": "66212f3bcab1a83ac77af8b6",
            "tag_id": "66212f3bcab1a83ac77af863",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa0c",
            "post_id": "66212f3bcab1a83ac77af8b6",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa0d",
            "post_id": "66212f3bcab1a83ac77af8b6",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa10",
            "post_id": "66212f3bcab1a83ac77af8b7",
            "tag_id": "66212f3bcab1a83ac77af852",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa11",
            "post_id": "66212f3bcab1a83ac77af8b7",
            "tag_id": "66212f3bcab1a83ac77af853",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa12",
            "post_id": "66212f3bcab1a83ac77af8b7",
            "tag_id": "66212f3bcab1a83ac77af85b",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa13",
            "post_id": "66212f3bcab1a83ac77af8b7",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa16",
            "post_id": "66212f3bcab1a83ac77af8b8",
            "tag_id": "66212f3bcab1a83ac77af848",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa17",
            "post_id": "66212f3bcab1a83ac77af8b8",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa18",
            "post_id": "66212f3bcab1a83ac77af8b8",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa19",
            "post_id": "66212f3bcab1a83ac77af8b8",
            "tag_id": "66212f3bcab1a83ac77af862",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa1a",
            "post_id": "66212f3bcab1a83ac77af8b8",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa1d",
            "post_id": "66212f3bcab1a83ac77af8b9",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa1e",
            "post_id": "66212f3bcab1a83ac77af8b9",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa1f",
            "post_id": "66212f3bcab1a83ac77af8b9",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa22",
            "post_id": "66212f3bcab1a83ac77af8ba",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa23",
            "post_id": "66212f3bcab1a83ac77af8ba",
            "tag_id": "66212f3bcab1a83ac77af864",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa24",
            "post_id": "66212f3bcab1a83ac77af8ba",
            "tag_id": "66212f3bcab1a83ac77af865",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa25",
            "post_id": "66212f3bcab1a83ac77af8ba",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa26",
            "post_id": "66212f3bcab1a83ac77af8ba",
            "tag_id": "66212f3bcab1a83ac77af866",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa27",
            "post_id": "66212f3bcab1a83ac77af8ba",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77afa2a",
            "post_id": "66212f3bcab1a83ac77af8bb",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa2b",
            "post_id": "66212f3bcab1a83ac77af8bb",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa2c",
            "post_id": "66212f3bcab1a83ac77af8bb",
            "tag_id": "66212f3bcab1a83ac77af867",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa2d",
            "post_id": "66212f3bcab1a83ac77af8bb",
            "tag_id": "66212f3bcab1a83ac77af868",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa2e",
            "post_id": "66212f3bcab1a83ac77af8bb",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa31",
            "post_id": "66212f3bcab1a83ac77af8bc",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa32",
            "post_id": "66212f3bcab1a83ac77af8bc",
            "tag_id": "66212f3bcab1a83ac77af869",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa33",
            "post_id": "66212f3bcab1a83ac77af8bc",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa34",
            "post_id": "66212f3bcab1a83ac77af8bc",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa37",
            "post_id": "66212f3bcab1a83ac77af8bd",
            "tag_id": "66212f3bcab1a83ac77af867",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa38",
            "post_id": "66212f3bcab1a83ac77af8bd",
            "tag_id": "66212f3bcab1a83ac77af848",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa39",
            "post_id": "66212f3bcab1a83ac77af8bd",
            "tag_id": "66212f3bcab1a83ac77af86b",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa3a",
            "post_id": "66212f3bcab1a83ac77af8bd",
            "tag_id": "66212f3bcab1a83ac77af86c",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa3b",
            "post_id": "66212f3bcab1a83ac77af8bd",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa3c",
            "post_id": "66212f3bcab1a83ac77af8bd",
            "tag_id": "66212f3bcab1a83ac77af863",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77afa3d",
            "post_id": "66212f3bcab1a83ac77af8bd",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 6
          },
          {
            "id": "66212f3dcab1a83ac77afa40",
            "post_id": "66212f3bcab1a83ac77af8be",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa41",
            "post_id": "66212f3bcab1a83ac77af8be",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa42",
            "post_id": "66212f3bcab1a83ac77af8be",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa43",
            "post_id": "66212f3bcab1a83ac77af8be",
            "tag_id": "66212f3bcab1a83ac77af86d",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa44",
            "post_id": "66212f3bcab1a83ac77af8be",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa45",
            "post_id": "66212f3bcab1a83ac77af8be",
            "tag_id": "66212f3bcab1a83ac77af848",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77afa46",
            "post_id": "66212f3bcab1a83ac77af8be",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 6
          },
          {
            "id": "66212f3dcab1a83ac77afa49",
            "post_id": "66212f3bcab1a83ac77af8bf",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa4a",
            "post_id": "66212f3bcab1a83ac77af8bf",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa4b",
            "post_id": "66212f3bcab1a83ac77af8bf",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa4c",
            "post_id": "66212f3bcab1a83ac77af8bf",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa4d",
            "post_id": "66212f3bcab1a83ac77af8bf",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa50",
            "post_id": "66212f3bcab1a83ac77af8c0",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa51",
            "post_id": "66212f3bcab1a83ac77af8c0",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa52",
            "post_id": "66212f3bcab1a83ac77af8c0",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa53",
            "post_id": "66212f3bcab1a83ac77af8c0",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa56",
            "post_id": "66212f3bcab1a83ac77af8c1",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa57",
            "post_id": "66212f3bcab1a83ac77af8c1",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa58",
            "post_id": "66212f3bcab1a83ac77af8c1",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa59",
            "post_id": "66212f3bcab1a83ac77af8c1",
            "tag_id": "66212f3bcab1a83ac77af85f",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa5a",
            "post_id": "66212f3bcab1a83ac77af8c1",
            "tag_id": "66212f3bcab1a83ac77af868",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa5b",
            "post_id": "66212f3bcab1a83ac77af8c1",
            "tag_id": "66212f3bcab1a83ac77af867",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77afa5c",
            "post_id": "66212f3bcab1a83ac77af8c1",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 6
          },
          {
            "id": "66212f3dcab1a83ac77afa5f",
            "post_id": "66212f3bcab1a83ac77af8c2",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa60",
            "post_id": "66212f3bcab1a83ac77af8c2",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa61",
            "post_id": "66212f3bcab1a83ac77af8c2",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa62",
            "post_id": "66212f3bcab1a83ac77af8c2",
            "tag_id": "66212f3bcab1a83ac77af84f",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa63",
            "post_id": "66212f3bcab1a83ac77af8c2",
            "tag_id": "66212f3bcab1a83ac77af86d",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa64",
            "post_id": "66212f3bcab1a83ac77af8c2",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77afa67",
            "post_id": "66212f3bcab1a83ac77af8c3",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa68",
            "post_id": "66212f3bcab1a83ac77af8c3",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa69",
            "post_id": "66212f3bcab1a83ac77af8c3",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa6a",
            "post_id": "66212f3bcab1a83ac77af8c3",
            "tag_id": "66212f3bcab1a83ac77af84d",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa6b",
            "post_id": "66212f3bcab1a83ac77af8c3",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa6e",
            "post_id": "66212f3bcab1a83ac77af8c4",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa6f",
            "post_id": "66212f3bcab1a83ac77af8c4",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa70",
            "post_id": "66212f3bcab1a83ac77af8c4",
            "tag_id": "66212f3bcab1a83ac77af851",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa71",
            "post_id": "66212f3bcab1a83ac77af8c4",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa72",
            "post_id": "66212f3bcab1a83ac77af8c4",
            "tag_id": "66212f3bcab1a83ac77af862",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa73",
            "post_id": "66212f3bcab1a83ac77af8c4",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77afa76",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af86e",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa77",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af86f",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa78",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af870",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa79",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af871",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa7a",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af831",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa7b",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af83d",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77afa7c",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af872",
            "sort_order": 6
          },
          {
            "id": "66212f3dcab1a83ac77afa7d",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af873",
            "sort_order": 7
          },
          {
            "id": "66212f3dcab1a83ac77afa7e",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af857",
            "sort_order": 8
          },
          {
            "id": "66212f3dcab1a83ac77afa7f",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af858",
            "sort_order": 9
          },
          {
            "id": "66212f3dcab1a83ac77afa80",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 10
          },
          {
            "id": "66212f3dcab1a83ac77afa81",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af82d",
            "sort_order": 11
          },
          {
            "id": "66212f3dcab1a83ac77afa82",
            "post_id": "66212f3bcab1a83ac77af8c5",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 12
          },
          {
            "id": "66212f3dcab1a83ac77afa85",
            "post_id": "66212f3bcab1a83ac77af8c6",
            "tag_id": "66212f3bcab1a83ac77af874",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa86",
            "post_id": "66212f3bcab1a83ac77af8c6",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa87",
            "post_id": "66212f3bcab1a83ac77af8c6",
            "tag_id": "66212f3bcab1a83ac77af875",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa88",
            "post_id": "66212f3bcab1a83ac77af8c6",
            "tag_id": "66212f3bcab1a83ac77af876",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa89",
            "post_id": "66212f3bcab1a83ac77af8c6",
            "tag_id": "66212f3bcab1a83ac77af83f",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa8a",
            "post_id": "66212f3bcab1a83ac77af8c6",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77afa8d",
            "post_id": "66212f3bcab1a83ac77af8c7",
            "tag_id": "66212f3bcab1a83ac77af877",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa8e",
            "post_id": "66212f3bcab1a83ac77af8c7",
            "tag_id": "66212f3bcab1a83ac77af878",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa8f",
            "post_id": "66212f3bcab1a83ac77af8c7",
            "tag_id": "66212f3bcab1a83ac77af861",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa90",
            "post_id": "66212f3bcab1a83ac77af8c7",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa93",
            "post_id": "66212f3bcab1a83ac77af8c8",
            "tag_id": "66212f3bcab1a83ac77af858",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa94",
            "post_id": "66212f3bcab1a83ac77af8c8",
            "tag_id": "66212f3bcab1a83ac77af879",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa95",
            "post_id": "66212f3bcab1a83ac77af8c8",
            "tag_id": "66212f3bcab1a83ac77af87a",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa96",
            "post_id": "66212f3bcab1a83ac77af8c8",
            "tag_id": "66212f3bcab1a83ac77af870",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afa97",
            "post_id": "66212f3bcab1a83ac77af8c8",
            "tag_id": "66212f3bcab1a83ac77af857",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afa98",
            "post_id": "66212f3bcab1a83ac77af8c8",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77afa99",
            "post_id": "66212f3bcab1a83ac77af8c8",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 6
          },
          {
            "id": "66212f3dcab1a83ac77afa9c",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "tag_id": "66212f3bcab1a83ac77af840",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afa9d",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "tag_id": "66212f3bcab1a83ac77af845",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afa9e",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "tag_id": "66212f3bcab1a83ac77af846",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afa9f",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "tag_id": "66212f3bcab1a83ac77af847",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afaa0",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "tag_id": "66212f3bcab1a83ac77af87b",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afaa1",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "tag_id": "66212f3bcab1a83ac77af87c",
            "sort_order": 5
          },
          {
            "id": "66212f3dcab1a83ac77afaa2",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "tag_id": "66212f3bcab1a83ac77af87d",
            "sort_order": 6
          },
          {
            "id": "66212f3dcab1a83ac77afaa3",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "tag_id": "66212f3bcab1a83ac77af87e",
            "sort_order": 7
          },
          {
            "id": "66212f3dcab1a83ac77afaa4",
            "post_id": "66212f3bcab1a83ac77af8c9",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 8
          },
          {
            "id": "66212f3dcab1a83ac77afaa7",
            "post_id": "66212f3bcab1a83ac77af8ca",
            "tag_id": "66212f3bcab1a83ac77af879",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afaa8",
            "post_id": "66212f3bcab1a83ac77af8ca",
            "tag_id": "66212f3bcab1a83ac77af830",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afaa9",
            "post_id": "66212f3bcab1a83ac77af8ca",
            "tag_id": "66212f3bcab1a83ac77af87f",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afaaa",
            "post_id": "66212f3bcab1a83ac77af8ca",
            "tag_id": "66212f3bcab1a83ac77af868",
            "sort_order": 3
          },
          {
            "id": "66212f3dcab1a83ac77afaab",
            "post_id": "66212f3bcab1a83ac77af8ca",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 4
          },
          {
            "id": "66212f3dcab1a83ac77afaae",
            "post_id": "66212f3bcab1a83ac77af8cb",
            "tag_id": "66212f3bcab1a83ac77af880",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afaaf",
            "post_id": "66212f3bcab1a83ac77af8cb",
            "tag_id": "66212f3bcab1a83ac77af87f",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afab0",
            "post_id": "66212f3bcab1a83ac77af8cb",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          },
          {
            "id": "66212f3dcab1a83ac77afab3",
            "post_id": "66212f3bcab1a83ac77af8cc",
            "tag_id": "66212f3bcab1a83ac77af857",
            "sort_order": 0
          },
          {
            "id": "66212f3dcab1a83ac77afab4",
            "post_id": "66212f3bcab1a83ac77af8cc",
            "tag_id": "66212f3bcab1a83ac77af83b",
            "sort_order": 1
          },
          {
            "id": "66212f3dcab1a83ac77afab5",
            "post_id": "66212f3bcab1a83ac77af8cc",
            "tag_id": "66212f3bcab1a83ac77af881",
            "sort_order": 2
          }
        ],
        "products": [
          {
            "id": "66211aa402e6b735e837da7b",
            "name": "Free",
            "slug": "free",
            "active": 1,
            "welcome_page_url": null,
            "visibility": "public",
            "trial_days": 0,
            "description": null,
            "type": "free",
            "currency": null,
            "monthly_price": null,
            "yearly_price": null,
            "created_at": "2024-04-18T13:05:40.000Z",
            "updated_at": "2024-04-18T13:05:40.000Z",
            "monthly_price_id": null,
            "yearly_price_id": null
          },
          {
            "id": "66211aa402e6b735e837da7c",
            "name": "Made By Nathan",
            "slug": "default-product",
            "active": 1,
            "welcome_page_url": null,
            "visibility": "public",
            "trial_days": 0,
            "description": null,
            "type": "paid",
            "currency": "USD",
            "monthly_price": 500,
            "yearly_price": 5000,
            "created_at": "2024-04-18T13:05:40.000Z",
            "updated_at": "2024-04-18T13:15:28.000Z",
            "monthly_price_id": null,
            "yearly_price_id": null
          }
        ],
        "products_benefits": [],
        "roles": [
          {
            "id": "66211aa302e6b735e837da6e",
            "name": "Administrator",
            "description": "Administrators",
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-18T13:05:39.000Z"
          },
          {
            "id": "66211aa302e6b735e837da6f",
            "name": "Editor",
            "description": "Editors",
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-18T13:05:39.000Z"
          },
          {
            "id": "66211aa302e6b735e837da70",
            "name": "Author",
            "description": "Authors",
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-18T13:05:39.000Z"
          },
          {
            "id": "66211aa302e6b735e837da71",
            "name": "Contributor",
            "description": "Contributors",
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-18T13:05:39.000Z"
          },
          {
            "id": "66211aa302e6b735e837da72",
            "name": "Owner",
            "description": "Blog Owner",
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-18T13:05:39.000Z"
          },
          {
            "id": "66211aa302e6b735e837da73",
            "name": "Admin Integration",
            "description": "External Apps",
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-18T13:05:39.000Z"
          },
          {
            "id": "66211aa302e6b735e837da74",
            "name": "Ghost Explore Integration",
            "description": "Internal Integration for the Ghost Explore directory",
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-18T13:05:39.000Z"
          },
          {
            "id": "66211aa302e6b735e837da75",
            "name": "Self-Serve Migration Integration",
            "description": "Internal Integration for the Self-Serve migration tool",
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-18T13:05:39.000Z"
          },
          {
            "id": "66211aa302e6b735e837da76",
            "name": "DB Backup Integration",
            "description": "Internal DB Backup Client",
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-18T13:05:39.000Z"
          },
          {
            "id": "66211aa302e6b735e837da77",
            "name": "Scheduler Integration",
            "description": "Internal Scheduler Client",
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-18T13:05:39.000Z"
          }
        ],
        "roles_users": [
          {
            "id": "66211aa302e6b735e837da78",
            "role_id": "66211aa302e6b735e837da72",
            "user_id": "1"
          }
        ],
        "settings": [
          {
            "id": "66211aa502e6b735e837dc58",
            "group": "core",
            "key": "last_mentions_report_email_timestamp",
            "value": null,
            "type": "number",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc59",
            "group": "core",
            "key": "db_hash",
            "value": "9e2140e6-be0e-436d-b5b4-2fb7251299d6",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc5a",
            "group": "core",
            "key": "routes_hash",
            "value": "956f6fcca08e70eab80fd2c35e9fb1d6",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-19T03:39:04.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc5b",
            "group": "core",
            "key": "next_update_check",
            "value": "1713532968",
            "type": "number",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:22:47.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc5c",
            "group": "core",
            "key": "notifications",
            "value": "[{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"66211de0342bfd3a6232d52e\",\"createdAtVersion\":\"5.82.2\",\"type\":\"warn\",\"message\":\"Ghost is currently unable to send email. See https://ghost.org/docs/concepts/config/#mail for instructions.\",\"seen\":false,\"addedAt\":\"2024-04-18T13:19:28.616Z\"}]",
            "type": "array",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:19:28.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc5d",
            "group": "core",
            "key": "version_notifications",
            "value": "[]",
            "type": "array",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc5e",
            "group": "core",
            "key": "admin_session_secret",
            "value": "03d70540ac10c31a929b0f443158cc40ad71c0aae1be7f736c6753566d0affd5",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc5f",
            "group": "core",
            "key": "theme_session_secret",
            "value": "3f81152343524e7e9c7e80d775e81479fe6511c19c28e81e152df48eb0d10b40",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc60",
            "group": "core",
            "key": "ghost_public_key",
            "value": "-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAKQyM30oP44gnL6HqQ/ASiM60zSXkPaJi25IqtzvRHKYK9zOgIpkElVw+lIFnU2Z\nh8nuoGM632yc66ceE04XbUzP5aYe9KJRa1Jp0AjZWVzK6nIEfXdjq5ia9zqvA3NryL7/ozZ8\nwsNYy/A1/5jzdZ218ahRzvJ1iRhh8Mgu6wL3AgMBAAE=\n-----END RSA PUBLIC KEY-----\n",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc61",
            "group": "core",
            "key": "ghost_private_key",
            "value": "-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQCkMjN9KD+OIJy+h6kPwEojOtM0l5D2iYtuSKrc70RymCvczoCKZBJVcPpS\nBZ1NmYfJ7qBjOt9snOunHhNOF21Mz+WmHvSiUWtSadAI2VlcyupyBH13Y6uYmvc6rwNza8i+\n/6M2fMLDWMvwNf+Y83WdtfGoUc7ydYkYYfDILusC9wIDAQABAoGBAIkuL/pnAAJcmNhOOx8f\nxlD8uqx73O89JzKyn54KgSNEo5DNLnNw/ChKRbj1W+ETXnGFXpbI/xWdXPy4keRyiiuFAdqe\nAbqRuGtvb+24h5sCtqbz+esZKqF3hUeJvLMoh8fQMmjrvq5MDTRlG3SQZK+4J9yGKOOKpY0s\nuuuplFBxAkEA3YRC+zpRGGpv6x411l9bGjUpAZuVfjF8D+8TVRpfzu2qRSeIqAnUREBnNyEj\nsFsgugQIlKqUFripGowrEuKeHQJBAL3Bo1MsN9QCSpSihVAPMEZolMnDTMW0L+OxmMEdilhK\nXVaiDMnsiDUZEYlDYk77jguq8uMXQC2t69m3N8Vz6SMCQCvu/XHiQQ88nPHezgK0atcpz/Y3\nq1CZ8+cdHZJ1Zqcdz/VjP+FEAct/knkGo5Non3cFMcZ6hmBzQ2a2ghx+wakCQQC8big4dIVv\n02KqHIUTjjGbCUkO3hBDlv2jNn2A70utBxOO7taSQX60c5NVYgOieOyCK5yL40/IzJeTF/ya\n59JPAkEAr/+yozBuQHqJnWbuxAwMXutwqSaI/l/siZKCLkcefvwbKaLs9C6ccSpxX+qFMp4W\nr4oNzR8ed3z4XQ0sGRsvQg==\n-----END RSA PRIVATE KEY-----\n",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc62",
            "group": "core",
            "key": "members_public_key",
            "value": "-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAI34VDLdn6EjiVXlXc3v6AfqW1qUfWG2JmUWMgjErfCFfYP5Q6xdacrPzlsFl/nw\n42cqn4v9a07EmkiDn1gcUXFb8ni6TE2vsYh11inAFy/zUrcb2hUCUDgfjoxJ5GZf2EOoSBAg\nBQd1ZeEpW5NR/mlFhtMew/4UMPS/cI5+RAklAgMBAAE=\n-----END RSA PUBLIC KEY-----\n",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc63",
            "group": "core",
            "key": "members_private_key",
            "value": "-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQCN+FQy3Z+hI4lV5V3N7+gH6ltalH1htiZlFjIIxK3whX2D+UOsXWnKz85b\nBZf58ONnKp+L/WtOxJpIg59YHFFxW/J4ukxNr7GIddYpwBcv81K3G9oVAlA4H46MSeRmX9hD\nqEgQIAUHdWXhKVuTUf5pRYbTHsP+FDD0v3COfkQJJQIDAQABAoGBAAuZH/fP1zyo1I1p4ZHz\naXdMFA6AVwXmhZh4ibnhp3wgy7I+aOLp9ryU4XzaJiJLJajF+KbNGzkiIqCN8DSYi6ah/afa\nynf7ae9KL+TZgdn/CVToGtUtZsvM82szPRywJvZXciKYXb9h/TWZyovrrScVUpm6jCRVPOBU\nzgi0otUBAkEAw3uoioSjeczUlaUqM7AnaMzWcE5hsWwjnu25nUdGmlkYU+omi8d6CRbLGK7y\narm/Qx7JPucYNmZKGjYK1PD4IQJBALnrrgaMVnHbZJfWxSXCMSQizujzx5QGKY2TVPxakcwE\nKouFsTq3A4m8Bxlem9MKAcZFRlpe0PQD+B7aDDAvIIUCQQCFLPGdrM9SY2FQsb0WiaPPmf1d\ndYjIvstlsr8Jj01iSeBxCsxH3hYdqxGiN02ft/u9VnP0DqxII1fIk5i9iY0BAkBxvTHYhbA4\ntUwj69ruD4/6mGTWdJSrBN4U44ZBX7MECaRxeJeE4QOEFoiNR6iygdO2FRlGHe1c6rS3QxPj\nwmD1AkARxLS0IaHPVv+Fpynth9/O9AsJuh6uQjSdLyYX+BHUchw7lVtpoUBv7Dmh0dazU/xi\n1BdDbAYpJH1e9cI3hPq+\n-----END RSA PRIVATE KEY-----\n",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc64",
            "group": "core",
            "key": "members_email_auth_secret",
            "value": "e1d94604a1b593474835231d2310d325f8ae34debf7a6f2a6fd9452a550533decde58f1be7e349097003fb5938fed0798c3ec23b80015f17bfa2ff9d610be4b1",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc67",
            "group": "site",
            "key": "title",
            "value": "Made By Nathan",
            "type": "string",
            "flags": "PUBLIC",
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:15:28.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc68",
            "group": "site",
            "key": "description",
            "value": "Here are some of the things I've made.",
            "type": "string",
            "flags": "PUBLIC",
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:25:19.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc69",
            "group": "site",
            "key": "logo",
            "value": "",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc6a",
            "group": "site",
            "key": "cover_image",
            "value": "https://static.ghost.org/v5.0.0/images/publication-cover.jpg",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc6b",
            "group": "site",
            "key": "icon",
            "value": "",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc6c",
            "group": "site",
            "key": "accent_color",
            "value": "#5619ff",
            "type": "string",
            "flags": "PUBLIC",
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:25:19.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc6d",
            "group": "site",
            "key": "locale",
            "value": "en",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc6e",
            "group": "site",
            "key": "timezone",
            "value": "Pacific/Auckland",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-19T00:28:25.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc6f",
            "group": "site",
            "key": "codeinjection_head",
            "value": "<script defer data-domain=\"madebynathan.com\" data-api=\"https://pa.ndbr.workers.dev/api\" src=\"https://pa.ndbr.workers.dev/main.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism-themes/1.5.0/prism-xonokai.min.css\" integrity=\"sha512-+5xrjo9FRrb9vHw75lHK0yJxZpwpOWLa8WKl8Wzio0ACZTxLZ40L+yR/RWUscIjPzMbITpxOV4YzxAe3rBn/bw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n\n<style>\n  .nav-sign-up { display: none; }\n  #disqus_thread {\n    max-width: 700px;\n    margin: auto;\n    margin-top: 20px;\n  }\n</style>\n",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-19T02:57:32.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc70",
            "group": "site",
            "key": "codeinjection_foot",
            "value": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/components/prism-core.min.js\" integrity=\"sha512-9khQRAUBYEJDCDVP2yw3LRUQvjJ0Pjx0EShmaQjcHa6AXiOv6qHQu9lCAIR8O+/D8FtaCoJ2c0Tf9Xo7hYH01Q==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/plugins/autoloader/prism-autoloader.min.js\" integrity=\"sha512-fTl/qcO1VgvKtOMApX2PdZzkziyr2stM65GYPLGuYMnuMm1z2JLJG6XVU7C/mR+E7xBUqCivykuhlzfqxXBXbg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-19T00:44:46.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc71",
            "group": "site",
            "key": "facebook",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T14:57:28.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc72",
            "group": "site",
            "key": "twitter",
            "value": "@ndbroadbent",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T14:57:28.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc73",
            "group": "site",
            "key": "navigation",
            "value": "[{\"url\":\"/\",\"label\":\"Blog\"},{\"url\":\"https://ndbroadbent.com\",\"label\":\"Personal Site\"},{\"url\":\"https://docspring.com\",\"label\":\"DocSpring\"}]",
            "type": "array",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T14:52:19.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc74",
            "group": "site",
            "key": "secondary_navigation",
            "value": "[{\"label\":\"Sign up\",\"url\":\"#/portal/\"}]",
            "type": "array",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc75",
            "group": "site",
            "key": "meta_title",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc76",
            "group": "site",
            "key": "meta_description",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc77",
            "group": "site",
            "key": "og_image",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc78",
            "group": "site",
            "key": "og_title",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc79",
            "group": "site",
            "key": "og_description",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc7a",
            "group": "site",
            "key": "twitter_image",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc7b",
            "group": "site",
            "key": "twitter_title",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc7c",
            "group": "site",
            "key": "twitter_description",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc7d",
            "group": "theme",
            "key": "active_theme",
            "value": "Source-disqus",
            "type": "string",
            "flags": "RO",
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-19T02:54:16.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc7e",
            "group": "private",
            "key": "is_private",
            "value": "false",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc7f",
            "group": "private",
            "key": "password",
            "value": "",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc80",
            "group": "private",
            "key": "public_hash",
            "value": "508e6ed8cd2ff492411b8a25a64a3b",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc81",
            "group": "members",
            "key": "default_content_visibility",
            "value": "public",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc82",
            "group": "members",
            "key": "default_content_visibility_tiers",
            "value": "[]",
            "type": "array",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc83",
            "group": "members",
            "key": "members_signup_access",
            "value": "none",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-19T03:07:23.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc84",
            "group": "members",
            "key": "members_support_address",
            "value": "noreply",
            "type": "string",
            "flags": "PUBLIC,RO",
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc87",
            "group": "members",
            "key": "stripe_plans",
            "value": "[]",
            "type": "array",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc8a",
            "group": "members",
            "key": "stripe_connect_livemode",
            "value": null,
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc8b",
            "group": "members",
            "key": "stripe_connect_display_name",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc8d",
            "group": "members",
            "key": "members_monthly_price_id",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc8e",
            "group": "members",
            "key": "members_yearly_price_id",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc8f",
            "group": "members",
            "key": "members_track_sources",
            "value": "true",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc90",
            "group": "portal",
            "key": "portal_name",
            "value": "true",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc91",
            "group": "portal",
            "key": "portal_button",
            "value": "true",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc92",
            "group": "portal",
            "key": "portal_plans",
            "value": "[\"free\"]",
            "type": "array",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc93",
            "group": "portal",
            "key": "portal_default_plan",
            "value": "yearly",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc94",
            "group": "portal",
            "key": "portal_products",
            "value": "[]",
            "type": "array",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc95",
            "group": "portal",
            "key": "portal_button_style",
            "value": "icon-and-text",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc96",
            "group": "portal",
            "key": "portal_button_icon",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc97",
            "group": "portal",
            "key": "portal_button_signup_text",
            "value": "Subscribe",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc98",
            "group": "portal",
            "key": "portal_signup_terms_html",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc99",
            "group": "portal",
            "key": "portal_signup_checkbox_required",
            "value": "false",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc9a",
            "group": "email",
            "key": "mailgun_domain",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc9b",
            "group": "email",
            "key": "mailgun_api_key",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc9c",
            "group": "email",
            "key": "mailgun_base_url",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc9d",
            "group": "email",
            "key": "email_track_opens",
            "value": "true",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dc9e",
            "group": "email",
            "key": "email_track_clicks",
            "value": "true",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dca0",
            "group": "amp",
            "key": "amp",
            "value": "false",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dca1",
            "group": "amp",
            "key": "amp_gtag_id",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dca2",
            "group": "firstpromoter",
            "key": "firstpromoter",
            "value": "false",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dca3",
            "group": "firstpromoter",
            "key": "firstpromoter_id",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dca4",
            "group": "labs",
            "key": "labs",
            "value": "{}",
            "type": "object",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dca5",
            "group": "slack",
            "key": "slack_url",
            "value": "",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dca6",
            "group": "slack",
            "key": "slack_username",
            "value": "Ghost",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dca7",
            "group": "unsplash",
            "key": "unsplash",
            "value": "true",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dca8",
            "group": "views",
            "key": "shared_views",
            "value": "[]",
            "type": "array",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dca9",
            "group": "editor",
            "key": "editor_default_email_recipients",
            "value": "disabled",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:49:58.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcaa",
            "group": "editor",
            "key": "editor_default_email_recipients_filter",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:49:50.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcab",
            "group": "announcement",
            "key": "announcement_content",
            "value": null,
            "type": "string",
            "flags": "PUBLIC",
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcac",
            "group": "announcement",
            "key": "announcement_visibility",
            "value": "[]",
            "type": "array",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcad",
            "group": "announcement",
            "key": "announcement_background",
            "value": "dark",
            "type": "string",
            "flags": "PUBLIC",
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcae",
            "group": "comments",
            "key": "comments_enabled",
            "value": "off",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcaf",
            "group": "analytics",
            "key": "outbound_link_tagging",
            "value": "true",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcb0",
            "group": "pintura",
            "key": "pintura",
            "value": "true",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcb1",
            "group": "pintura",
            "key": "pintura_js_url",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcb2",
            "group": "pintura",
            "key": "pintura_css_url",
            "value": null,
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcb3",
            "group": "donations",
            "key": "donations_currency",
            "value": "USD",
            "type": "string",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcb4",
            "group": "donations",
            "key": "donations_suggested_amount",
            "value": "0",
            "type": "number",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          },
          {
            "id": "66211aa502e6b735e837dcb5",
            "group": "recommendations",
            "key": "recommendations_enabled",
            "value": "false",
            "type": "boolean",
            "flags": null,
            "created_at": "2024-04-18T13:05:41.000Z",
            "updated_at": "2024-04-18T13:05:41.000Z"
          }
        ],
        "snippets": [],
        "stripe_prices": [],
        "stripe_products": [],
        "tags": [
          {
            "id": "66212f3bcab1a83ac77af82d",
            "name": "c",
            "slug": "c",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af82e",
            "name": "compaq-evo-t20",
            "slug": "compaq-evo-t20",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af82f",
            "name": "damn-small-linux",
            "slug": "damn-small-linux",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af830",
            "name": "linux",
            "slug": "linux",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af831",
            "name": "ruby",
            "slug": "ruby",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af832",
            "name": "shell-fm",
            "slug": "shell-fm",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af833",
            "name": "lcd4linux",
            "slug": "lcd4linux",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af834",
            "name": "reaper",
            "slug": "reaper",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af835",
            "name": "music",
            "slug": "music",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af836",
            "name": "fireworks",
            "slug": "fireworks",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af837",
            "name": "pyro",
            "slug": "pyro",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af838",
            "name": "show",
            "slug": "show",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af839",
            "name": "bluetooth",
            "slug": "bluetooth",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af83a",
            "name": "ubuntu-9.10",
            "slug": "ubuntu-9-10",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af83b",
            "name": "projects",
            "slug": "projects",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af83c",
            "name": "videos",
            "slug": "videos",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af83d",
            "name": "rails",
            "slug": "rails",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af83e",
            "name": "jqgrid",
            "slug": "jqgrid",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af83f",
            "name": "javascript",
            "slug": "javascript",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af840",
            "name": "web-design",
            "slug": "web-design",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af841",
            "name": "gimp",
            "slug": "gimp",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af842",
            "name": "photography",
            "slug": "photography",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af843",
            "name": "youtube",
            "slug": "youtube",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af844",
            "name": "random",
            "slug": "random",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af845",
            "name": "favicon",
            "slug": "favicon",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af846",
            "name": "art",
            "slug": "art",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af847",
            "name": "logo",
            "slug": "logo",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af848",
            "name": "git",
            "slug": "git",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af849",
            "name": "bugfixes",
            "slug": "bugfixes",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af84a",
            "name": "rss",
            "slug": "rss-tag",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af84b",
            "name": "feed",
            "slug": "feed",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af84c",
            "name": "rspec",
            "slug": "rspec",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af84d",
            "name": "rails-3",
            "slug": "rails-3",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af84e",
            "name": "wordpress",
            "slug": "wordpress",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af84f",
            "name": "bundler",
            "slug": "bundler",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af850",
            "name": "plugins",
            "slug": "plugins",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af851",
            "name": "bash",
            "slug": "bash",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af852",
            "name": "iphone",
            "slug": "iphone",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af853",
            "name": "jailbreak",
            "slug": "jailbreak",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af854",
            "name": "greasemonkey",
            "slug": "greasemonkey",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af855",
            "name": "grooveshark",
            "slug": "grooveshark",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af856",
            "name": "metal",
            "slug": "metal",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af857",
            "name": "electronics",
            "slug": "electronics",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af858",
            "name": "home-automation",
            "slug": "home-automation",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af859",
            "name": "continous-integration",
            "slug": "continous-integration",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af85a",
            "name": "gedit",
            "slug": "gedit",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af85b",
            "name": "thoughts",
            "slug": "thoughts",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af85c",
            "name": "ruby-gems",
            "slug": "ruby-gems",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af85d",
            "name": "comics",
            "slug": "comics",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af85e",
            "name": "ios",
            "slug": "ios",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af85f",
            "name": "capistrano",
            "slug": "capistrano",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af860",
            "name": "rvm",
            "slug": "rvm",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af861",
            "name": "scripts",
            "slug": "scripts",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af862",
            "name": "ubuntu",
            "slug": "ubuntu",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af863",
            "name": "zsh",
            "slug": "zsh",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af864",
            "name": "github",
            "slug": "github",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af865",
            "name": "travis-ci",
            "slug": "travis-ci",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af866",
            "name": "prompt",
            "slug": "prompt",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af867",
            "name": "administration",
            "slug": "administration",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af868",
            "name": "server",
            "slug": "server",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af869",
            "name": "skype",
            "slug": "skype",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af86b",
            "name": "google-groups",
            "slug": "google-groups",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af86c",
            "name": "mailing-list",
            "slug": "mailing-list",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af86d",
            "name": "rubygems",
            "slug": "rubygems",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af86e",
            "name": "raspberry-pi",
            "slug": "raspberry-pi",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af86f",
            "name": "microwave",
            "slug": "microwave",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af870",
            "name": "kitchen",
            "slug": "kitchen",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af871",
            "name": "appliances",
            "slug": "appliances",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af872",
            "name": "sinatra",
            "slug": "sinatra",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af873",
            "name": "linux videos",
            "slug": "linux-videos",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af874",
            "name": "games",
            "slug": "games",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af875",
            "name": "react native",
            "slug": "react-native",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af876",
            "name": "react",
            "slug": "react",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af877",
            "name": "docker",
            "slug": "docker",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af878",
            "name": "hugo",
            "slug": "hugo",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af879",
            "name": "home-assistant",
            "slug": "home-assistant",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af87a",
            "name": "esp32",
            "slug": "esp32",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af87b",
            "name": "ai",
            "slug": "ai",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af87c",
            "name": "midjourney",
            "slug": "midjourney",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af87d",
            "name": "stable-diffusion",
            "slug": "stable-diffusion",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af87e",
            "name": "dalle-2",
            "slug": "dalle-2",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af87f",
            "name": "debian",
            "slug": "debian",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af880",
            "name": "plex",
            "slug": "plex",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          },
          {
            "id": "66212f3bcab1a83ac77af881",
            "name": "#Import 2024-04-18 14:33",
            "slug": "hash-import-2024-04-18-14-33",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "internal",
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "canonical_url": null,
            "accent_color": null,
            "created_at": "2024-04-18T14:33:31.000Z",
            "updated_at": "2024-04-18T14:33:31.000Z"
          }
        ],
        "users": [
          {
            "id": "1",
            "name": "Nathan Broadbent",
            "slug": "nathan",
            "password": "$2a$10$ByaTQ/L70/KdoorT2UWjpeZSnZtRSAeUZcU/GYsbvkSJP6iIbyit2",
            "email": "hello@ndbroadbent.com",
            "profile_image": "https://www.gravatar.com/avatar/dfba62f695988e9b7cb5153966ae0ac5?s=250&r=x&d=mp",
            "cover_image": null,
            "bio": null,
            "website": null,
            "location": null,
            "facebook": null,
            "twitter": null,
            "accessibility": "{\"onboarding\":{\"completedSteps\":[\"customize-design\"],\"checklistState\":\"started\"},\"nightShift\":true}",
            "status": "active",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "tour": null,
            "last_seen": "2024-04-19T03:10:40.000Z",
            "comment_notifications": 1,
            "free_member_signup_notification": 1,
            "paid_subscription_started_notification": 1,
            "paid_subscription_canceled_notification": 0,
            "mention_notifications": 1,
            "recommendation_notifications": 1,
            "milestone_notifications": 1,
            "donation_notifications": 1,
            "created_at": "2024-04-18T13:05:39.000Z",
            "updated_at": "2024-04-19T03:10:40.000Z"
          }
        ]
      }
    }
  ]
}
