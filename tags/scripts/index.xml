<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripts on Made by Nathan</title>
    <link>https://madebynathan.com/tags/scripts/</link>
    <description>Recent content in Scripts on Made by Nathan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 05 Dec 2021 02:15:59 +0000</lastBuildDate>
    
	<atom:link href="https://madebynathan.com/tags/scripts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How Docker Saved My Blog</title>
      <link>https://madebynathan.com/posts/2021-12-05-how-docker-saved-my-blog/</link>
      <pubDate>Sun, 05 Dec 2021 02:15:59 +0000</pubDate>
      
      <guid>https://madebynathan.com/posts/2021-12-05-how-docker-saved-my-blog/</guid>
      <description>I haven&amp;rsquo;t written any blog posts for a while. One reason is that I&amp;rsquo;ve been hard at work on DocSpring for the last few years, and I haven&amp;rsquo;t had a lot of time to work on personal projects. But the main reason is that my blog uses an older version of Hugo, which is a &amp;ldquo;static site generator&amp;rdquo; 1.
I switched from Jekyll to Hugo in 2017, and the current version of Hugo at the time was 0.</description>
    </item>
    
    <item>
      <title>Open files generated by &#39;rails generate&#39; in your editor</title>
      <link>https://madebynathan.com/2012/12/20/open-files-generated-by-rails-generate-in-your-editor/</link>
      <pubDate>Thu, 20 Dec 2012 13:02:20 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/12/20/open-files-generated-by-rails-generate-in-your-editor/</guid>
      <description>Note: This post is for people who use the terminal to run Rails generators. It probably won&amp;rsquo;t interest you if your editor has a plugin to run them. 
After running a Rails generator, you&amp;rsquo;ll often need to edit the generated files in your text editor.
Rails 4 may soon have the ability to open generated files in your text editor if you pass the --editor option on the command line.</description>
    </item>
    
    <item>
      <title>Auto-reloading your .bashrc (or .zshrc)</title>
      <link>https://madebynathan.com/2012/10/29/auto-reloading-your-bashrc/</link>
      <pubDate>Mon, 29 Oct 2012 20:31:21 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/10/29/auto-reloading-your-bashrc/</guid>
      <description>If you often make changes to your ~/.bashrc, you might be sick of typing source ~/.bashrc after every change. It can also be annoying when you switch to a different tab in your terminal, but your new aliases or functions aren&amp;rsquo;t available until you type source ~/.bashrc.
While I was working on scm_breeze and my dotfiles repo, I grew tired of having to type this command, so I aliased it to sbrc.</description>
    </item>
    
    <item>
      <title>Saving space in the terminal with symbols</title>
      <link>https://madebynathan.com/2012/10/14/saving-space-in-the-terminal-with-symbols/</link>
      <pubDate>Sun, 14 Oct 2012 22:28:47 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/10/14/saving-space-in-the-terminal-with-symbols/</guid>
      <description>I&amp;rsquo;m saving a little space in my terminal by replacing my username and group (ndbroadbent) with a single symbol. I&amp;rsquo;m doing this in my prompt, as well as in the output of ls commands:
(My laptop&amp;rsquo;s hostname is also represented by a symbol.)
For the ls output, it was a bit tricky to re-justify the username and group columns after substituting my username. I decided to do it in ruby, and then played some ruby golf:</description>
    </item>
    
    <item>
      <title>Automate your Rails development with cron: Keep projects updated, install gems, and maintain a repo index</title>
      <link>https://madebynathan.com/2012/10/11/automate-your-development-machine-keep-projects-updated-install-gems-refresh-git-repo-index/</link>
      <pubDate>Thu, 11 Oct 2012 14:56:54 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/10/11/automate-your-development-machine-keep-projects-updated-install-gems-refresh-git-repo-index/</guid>
      <description>A day in the life of a Rails developer will usually involve a few git pulls, bundle installs, and switching between different projects. I thought it would be great if my projects could be automatically kept up-to-date, so that I don&amp;rsquo;t have to spend too much time updating code or installing new gems.
I&amp;rsquo;m using the whenever gem to create cron tasks that:
 Update all my git repos from their remotes Satisfy all of my Gemfile&amp;rsquo;s dependencies Cache rake and capistrano commands for tab completion Fetch Travis CI build statuses to show in my terminal Maintain an index of my git repos so I can quickly switch between projects, while keeping them organized  For all of these tasks, I&amp;rsquo;m using the git_index function provided by my SCM Breeze project.</description>
    </item>
    
    <item>
      <title>Skype notifications using libnotify on Linux</title>
      <link>https://madebynathan.com/2012/03/24/skype-notifications-using-libnotify-on-linux/</link>
      <pubDate>Sat, 24 Mar 2012 18:55:18 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/03/24/skype-notifications-using-libnotify-on-linux/</guid>
      <description>Skype on Linux comes with it&amp;rsquo;s own notification system. It&amp;rsquo;s not that bad, but it&amp;rsquo;s not consistent, either. If you want to configure Skype to use libnotify instead, run the following script in your terminal:
(NOTE: You must have installed Skype, and logged in at least once.)
bash &amp;lt; &amp;lt;(curl -s https://raw.github.com/gist/2181122/skype-libnotify.sh)  This downloads and executes the script from this gist: https://gist.github.com/2181122
It fetches the skype configuration from here, which is part of my dotfiles repo.</description>
    </item>
    
    <item>
      <title>Managing Project Design Assets For Git Repositories: A Simple Solution</title>
      <link>https://madebynathan.com/2011/10/21/managing-project-design-assets-for-git-repositories/</link>
      <pubDate>Fri, 21 Oct 2011 23:25:47 +0000</pubDate>
      
      <guid>https://madebynathan.com/2011/10/21/managing-project-design-assets-for-git-repositories/</guid>
      <description>When you&amp;rsquo;re creating logos or icons for a project that uses git, have you ever wondered where you should store those .psd or .xcf files? Do you commit all of your raw design files, or does it put you off that any changes to those files will bloat your repository?
The following post describes a part of my SCM Breeze project. If you haven&amp;rsquo;t seen it already, take a look at my blog post that describes what it can do.</description>
    </item>
    
    <item>
      <title>SCM Breeze</title>
      <link>https://madebynathan.com/2011/10/19/git-shortcuts-like-youve-never-seen-before/</link>
      <pubDate>Wed, 19 Oct 2011 01:14:01 +0000</pubDate>
      
      <guid>https://madebynathan.com/2011/10/19/git-shortcuts-like-youve-never-seen-before/</guid>
      <description>SCM Breeze is a set of shell scripts (for bash and zsh) that make it easier to use git. It integrates with your shell to give you numbered file shortcuts, a repository index with tab completion, and a community driven collection of useful SCM functions.
Disclaimer: git is currently the only supported SCM. I&amp;rsquo;ve kept the project&amp;rsquo;s name open because it won&amp;rsquo;t be difficult to port it for other SCMs.</description>
    </item>
    
    <item>
      <title>Running bash color codes through sed</title>
      <link>https://madebynathan.com/2011/08/18/running-bash-color-codes-through-sed/</link>
      <pubDate>Thu, 18 Aug 2011 04:48:59 +0000</pubDate>
      
      <guid>https://madebynathan.com/2011/08/18/running-bash-color-codes-through-sed/</guid>
      <description>I have a script that runs a search and replace on a git status. I recently found out how to do &#39;git config color.status always&#39;, so that git status gives color codes to my functions. However, this broke the substitution, and it took me a while to figure it out.
At the end of every line, there was an invisible &#39;reset&#39; color code, and this meant that &#39;sed &#34;s/string$/$replace&#34;&#39; was no longer finding &#39;string$&#39;.</description>
    </item>
    
    <item>
      <title>Bash Color Index</title>
      <link>https://madebynathan.com/2011/08/16/bash-color-index/</link>
      <pubDate>Tue, 16 Aug 2011 08:47:38 +0000</pubDate>
      
      <guid>https://madebynathan.com/2011/08/16/bash-color-index/</guid>
      <description>Sometimes it&amp;rsquo;s nice to add color output to your bash scripts. Here&amp;rsquo;s a small &amp;lsquo;color index&amp;rsquo; reference script for your .bashrc, for when you want to add a bit of color to your scripts.
Save the following script somewhere in your PATH (e.g. /bin/color_index), and make it executable. (chmod +x /bin/color_index)
#!/bin/bash # Bash Colors Index # Shows an index of all available bash colors # ------------------------------------------------ echo -e &amp;quot;\n Usage: \\\e[\*;**(;**)m&amp;quot; echo -e &amp;quot; Default: \\\e[0m&amp;quot; blank_line=&amp;quot;\e[0m\n \e[0;30;40m$(printf &amp;quot;%41s&amp;quot;)\e[0m&amp;quot; echo -e &amp;quot;$blank_line&amp;quot; # Top border for style in 2 0 1 4 9; do echo -en &amp;quot; \e[0;30;40m &amp;quot; # Display black fg on white bg echo -en &amp;quot;\e[${style};30;47m${style};30\e[0;30;40m &amp;quot; for foreground in $(seq 31 37); do ctrl=&amp;quot;\e[${style};${foreground};40m&amp;quot; echo -en &amp;quot;${ctrl}&amp;quot; echo -en &amp;quot;${style};${foreground}\e[0;30;40m &amp;quot; done echo -e &amp;quot;$blank_line&amp;quot; # Separators done echo -en &amp;quot; \e[0;30;40m &amp;quot; # Background colors echo -en &amp;quot;\e[0;37;40m*;40\e[0;30;40m \e[0m&amp;quot; # Display white fg on black bg for background in $(seq 41 47); do ctrl=&amp;quot;\e[0;30;${background}m&amp;quot; echo -en &amp;quot;${ctrl}&amp;quot; echo -en &amp;quot;*;${background}\e[0;30;40m &amp;quot; done echo -e &amp;quot;$blank_line&amp;quot; &amp;quot;\n&amp;quot; # Bottom border  Running &amp;lsquo;color_index&amp;rsquo; will display something like this:</description>
    </item>
    
    <item>
      <title>Automatically change iPhone wallpaper every 30 minutes</title>
      <link>https://madebynathan.com/2011/07/20/automatically-change-iphone-wallpaper-every-30-minutes/</link>
      <pubDate>Wed, 20 Jul 2011 16:27:10 +0000</pubDate>
      
      <guid>https://madebynathan.com/2011/07/20/automatically-change-iphone-wallpaper-every-30-minutes/</guid>
      <description>NOTE: This is only for jailbroken iPhones.
I love finding awesome wallpapers on reddit. My Ubuntu desktop cycles through my wallpaper collection with a program called Cortina, and I wanted my iPhone to do the same.
So I wrote a very simple script and a launchd plist that runs the script every 30 minutes. If you want to set this up for your jailbroken iPhone, all you need is SSH and a collection of images.</description>
    </item>
    
  </channel>
</rss>