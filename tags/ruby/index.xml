<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Made by Nathan</title>
    <link>https://madebynathan.com/tags/ruby/</link>
    <description>Recent content in Ruby on Made by Nathan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 10 Jul 2013 23:51:47 +0000</lastBuildDate>
    
	<atom:link href="https://madebynathan.com/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raspberry Pi Microwave</title>
      <link>https://madebynathan.com/2013/07/10/raspberry-pi-powered-microwave/</link>
      <pubDate>Wed, 10 Jul 2013 23:51:47 +0000</pubDate>
      
      <guid>https://madebynathan.com/2013/07/10/raspberry-pi-powered-microwave/</guid>
      <description>A few months ago, I was inspired by this post on Reddit, titled: Food items should have QR codes that instruct the microwave exactly what to do. Like high for 2 minutes, let stand 1 minute, medium 1 minutes..
I thought this was a pretty cool idea, and that it would be a fun project for a Raspberry Pi. I agreed with the people who thought using UPC barcodes would be better, since products already have them, so I went with a barcode scanner + online product database.</description>
    </item>
    
    <item>
      <title>Ubuntu Keyboard Shortcut: Open a selected file in Sublime Text 2</title>
      <link>https://madebynathan.com/2013/03/29/keyboard-shortcut-to-open-selected-file-in-sublime-text-2/</link>
      <pubDate>Fri, 29 Mar 2013 23:44:58 +0000</pubDate>
      
      <guid>https://madebynathan.com/2013/03/29/keyboard-shortcut-to-open-selected-file-in-sublime-text-2/</guid>
      <description>Whenever I&amp;rsquo;m looking at backtraces, logs, or failing tests in the terminal, I often need to open one of those files in my text editor. It was previously a semi-arduous process that involved highlighting, copying, pasting and the return key. Now, all I need to do is double-click or highlight a line, and then press a keyboard shortcut to open that file &amp;amp; line in my text editor (currently Sublime Text 2.</description>
    </item>
    
    <item>
      <title>Open files generated by &#39;rails generate&#39; in your editor</title>
      <link>https://madebynathan.com/2012/12/20/open-files-generated-by-rails-generate-in-your-editor/</link>
      <pubDate>Thu, 20 Dec 2012 13:02:20 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/12/20/open-files-generated-by-rails-generate-in-your-editor/</guid>
      <description>Note: This post is for people who use the terminal to run Rails generators. It probably won&amp;rsquo;t interest you if your editor has a plugin to run them. 
After running a Rails generator, you&amp;rsquo;ll often need to edit the generated files in your text editor.
Rails 4 may soon have the ability to open generated files in your text editor if you pass the --editor option on the command line.</description>
    </item>
    
    <item>
      <title>Automatically run &#39;bundle install&#39; when Bundler can&#39;t find a gem</title>
      <link>https://madebynathan.com/2012/12/18/automatically-run-bundle-install-if-bundler-raises-gemnotfound/</link>
      <pubDate>Tue, 18 Dec 2012 19:56:01 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/12/18/automatically-run-bundle-install-if-bundler-raises-gemnotfound/</guid>
      <description>Every Rails developer has probably experienced the following error:
Could not find &amp;lt;gem&amp;gt; in any of the sources Run `bundle install` to install missing gems.   This happens if you or someone else adds a gem to your Gemfile, or if a gem version is updated in Gemfile.lock, and you forget to run bundle install before running a Rails command.
Here&amp;rsquo;s a simple function that handles this automatically, called bundle_install_wrapper().</description>
    </item>
    
    <item>
      <title>capistrano_colors has been merged into capistrano</title>
      <link>https://madebynathan.com/2012/11/08/capistrano_colors-has-been-merged-into-capistrano/</link>
      <pubDate>Thu, 08 Nov 2012 12:55:17 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/11/08/capistrano_colors-has-been-merged-into-capistrano/</guid>
      <description>capistrano_colors has been merged into capistrano. If you update capistrano to version 2.13.5, you will no longer need to include capistrano_colors in your Gemfile.Don&amp;rsquo;t forget to also remove require &#39;capistrano_colors&#39; from config/deploy.rb.
If you&amp;rsquo;ve been using capistrano without the capistrano_colors gem, well, you&amp;rsquo;ve been missing out! Your logs will now be nicely formatted and colored by default, like this:
However, if you happen to be a big fan of black &amp;amp; white logs, you can just add disable_log_formatters to config/deploy.</description>
    </item>
    
    <item>
      <title>Saving space in the terminal with symbols</title>
      <link>https://madebynathan.com/2012/10/14/saving-space-in-the-terminal-with-symbols/</link>
      <pubDate>Sun, 14 Oct 2012 22:28:47 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/10/14/saving-space-in-the-terminal-with-symbols/</guid>
      <description>I&amp;rsquo;m saving a little space in my terminal by replacing my username and group (ndbroadbent) with a single symbol. I&amp;rsquo;m doing this in my prompt, as well as in the output of ls commands:
(My laptop&amp;rsquo;s hostname is also represented by a symbol.)
For the ls output, it was a bit tricky to re-justify the username and group columns after substituting my username. I decided to do it in ruby, and then played some ruby golf:</description>
    </item>
    
    <item>
      <title>Automate your Rails development with cron: Keep projects updated, install gems, and maintain a repo index</title>
      <link>https://madebynathan.com/2012/10/11/automate-your-development-machine-keep-projects-updated-install-gems-refresh-git-repo-index/</link>
      <pubDate>Thu, 11 Oct 2012 14:56:54 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/10/11/automate-your-development-machine-keep-projects-updated-install-gems-refresh-git-repo-index/</guid>
      <description>A day in the life of a Rails developer will usually involve a few git pulls, bundle installs, and switching between different projects. I thought it would be great if my projects could be automatically kept up-to-date, so that I don&amp;rsquo;t have to spend too much time updating code or installing new gems.
I&amp;rsquo;m using the whenever gem to create cron tasks that:
 Update all my git repos from their remotes Satisfy all of my Gemfile&amp;rsquo;s dependencies Cache rake and capistrano commands for tab completion Fetch Travis CI build statuses to show in my terminal Maintain an index of my git repos so I can quickly switch between projects, while keeping them organized  For all of these tasks, I&amp;rsquo;m using the git_index function provided by my SCM Breeze project.</description>
    </item>
    
    <item>
      <title>Travis CI Status in Shell Prompt</title>
      <link>https://madebynathan.com/2012/01/14/travis-ci-status-in-shell-prompt/</link>
      <pubDate>Sat, 14 Jan 2012 01:21:13 +0000</pubDate>
      
      <guid>https://madebynathan.com/2012/01/14/travis-ci-status-in-shell-prompt/</guid>
      <description>Update: I&amp;rsquo;ve updated the build status checking script, because updating all branches was taking too long (over 20 minutes.) Now it performs frequent updates for the current branch, and only periodic updates for all branches.
Travis CI is a distributed continuous integration service for the open source community, and it can be used with any of your public projects on GitHub. You&amp;rsquo;ve probably seen some &amp;lsquo;build status&amp;rsquo; badges like this:</description>
    </item>
    
    <item>
      <title>Testing Multiple Databases for a Rails app on Travis CI</title>
      <link>https://madebynathan.com/2011/12/13/testing-multiple-databases-for-a-rails-app-on-travis-ci/</link>
      <pubDate>Tue, 13 Dec 2011 23:12:50 +0000</pubDate>
      
      <guid>https://madebynathan.com/2011/12/13/testing-multiple-databases-for-a-rails-app-on-travis-ci/</guid>
      <description>I&amp;rsquo;m currently doing a lot of work on an open source Ruby on Rails project called Fat Free CRM. The code is hosted on github, and we are using the amazing continuous integration service provided by Travis CI.
Find out more about Travis CI here.
We&amp;rsquo;ve been working on some powerful features for Fat Free CRM, such as dynamic custom fields, and we wanted to make sure that they work across all of our supported databases.</description>
    </item>
    
    <item>
      <title>Don&#39;t use &#39;bundle install {gem}&#39;.</title>
      <link>https://madebynathan.com/2011/09/03/dont-use-bundle-install-gem/</link>
      <pubDate>Sat, 03 Sep 2011 04:39:22 +0000</pubDate>
      
      <guid>https://madebynathan.com/2011/09/03/dont-use-bundle-install-gem/</guid>
      <description>Maybe you want to update haml to the latest version. You tried to run bundle install haml, but now some really weird stuff is happening. Bundler decided to install all of your gems from scratch into a ./haml folder. Even when you try bundle update haml, the gems are still going into the ./haml folder! What&amp;rsquo;s going on?
bundle install haml is totally different from bundle update haml.
What bundle install haml does:  Installs all of your gems into a &amp;lsquo;haml&amp;rsquo; folder.</description>
    </item>
    
    <item>
      <title>How to calculate Easter Sunday</title>
      <link>https://madebynathan.com/2011/03/31/how-to-calculate-easter-sunday/</link>
      <pubDate>Thu, 31 Mar 2011 17:41:27 +0000</pubDate>
      
      <guid>https://madebynathan.com/2011/03/31/how-to-calculate-easter-sunday/</guid>
      <description>I wanted the LCD screen on my apartment door to display a message on certain days, such as birthdays, Christmas, and Easter. I didn&amp;rsquo;t realize how hard it was to calculate which day Easter Sunday is&amp;hellip;
def easter(year) c=year/100 n=year-19*(year/19) k=(c-17)/25 i=c-c/4-(c-k)/3+19*n+15 i-=30*(i/30) i-=(i/28)*(1 -(i/28)*(29/(i+1))*((21-n)/11)) j=year+year/4+i+2-c+c/4 j-=7*(j/7) l=i-j month=3+(l+40)/44 day=l+28-31*(month/4) [day, month] end  This happens to be the first Sunday after the Paschal full moon following the northern hemisphere&amp;rsquo;s vernal equinox.</description>
    </item>
    
    <item>
      <title>Build a ruby gem and host it on rubygems.org in 4 easy steps</title>
      <link>https://madebynathan.com/2011/01/22/how-to-build-a-ruby-gem-and-host-it-on-rubygems-org-in-4-easy-steps/</link>
      <pubDate>Sat, 22 Jan 2011 06:39:39 +0000</pubDate>
      
      <guid>https://madebynathan.com/2011/01/22/how-to-build-a-ruby-gem-and-host-it-on-rubygems-org-in-4-easy-steps/</guid>
      <description>Building a ruby gem these days is really, really easy. Bundler provides a great framework generator to get you started. Bundler also lets you install a gem straight from a github repository, so now is the time to say goodbye to your git submodules and start packaging your code into gems.  Sign up for a rubygems.org account $ bundle gem shiny_new_gem (This creates the framework for your gem) Edit &amp;lsquo;shiny_new_gem.</description>
    </item>
    
    <item>
      <title>Get Punished for Breaking Your Software Tests</title>
      <link>https://madebynathan.com/2010/11/12/get-attacked-for-breaking-software/</link>
      <pubDate>Fri, 12 Nov 2010 09:38:09 +0000</pubDate>
      
      <guid>https://madebynathan.com/2010/11/12/get-attacked-for-breaking-software/</guid>
      <description>At work, we use software called Atlassian Bamboo. It does CI (continuous integration) for us, so whenever a developer updates the code, it will run all of the software&amp;rsquo;s tests, and makes sure everything still works.
We had a USB Missile launcher lying around, and I thought it could be put to good use. So now, whenever a developer commits a change that breaks a test, he gets shot.</description>
    </item>
    
    <item>
      <title>RFID apartment lock (&amp; iPhone app)</title>
      <link>https://madebynathan.com/2010/11/05/octopus-card-door-lock/</link>
      <pubDate>Fri, 05 Nov 2010 20:10:37 +0000</pubDate>
      
      <guid>https://madebynathan.com/2010/11/05/octopus-card-door-lock/</guid>
      <description>Octopus cards in Hong Kong can be used to purchase almost anything, such as groceries, McDonalds, and public transport. Since everyone has one, a lot of apartments are using them for access control.
One of my first projects after moving back to Hong Kong was installing an electronic lock on my apartment door. My door can be now be unlocked with an Octopus RFID card, iPhone app, or over the web.</description>
    </item>
    
    <item>
      <title>Last.fm on embedded systems</title>
      <link>https://madebynathan.com/2010/06/26/last-fm-on-embedded-systems/</link>
      <pubDate>Sat, 26 Jun 2010 00:30:15 +0000</pubDate>
      
      <guid>https://madebynathan.com/2010/06/26/last-fm-on-embedded-systems/</guid>
      <description>I&amp;rsquo;ve finished most of the work I&amp;rsquo;m going to do on my shell.fm ruby server. Its written on sinatra + jquery + jquery-ui (so, a lot of ajax calls). It also requires my custom shell.fm fork if you want the volume control to work.
You can find my shell.fm fork here: http://github.com/ndbroadbent/shell-fm
and the shell.fm sinatra server is here: http://github.com/ndbroadbent/shell-fm_sinatra
By the way, this post is about an embedded linux system that plays last.</description>
    </item>
    
    <item>
      <title>YoutubeJukebox</title>
      <link>https://madebynathan.com/2010/05/13/youtubejukebox/</link>
      <pubDate>Thu, 13 May 2010 17:46:25 +0000</pubDate>
      
      <guid>https://madebynathan.com/2010/05/13/youtubejukebox/</guid>
      <description>http://github.com/ndbroadbent/youtube_jukebox
A ruby script that downloads youtube videos, converts them to mp3, and plays them in a vlc playlist as they are processed.</description>
    </item>
    
    <item>
      <title>jqgrid on Spree</title>
      <link>https://madebynathan.com/2010/04/30/jqgrid-on-spree/</link>
      <pubDate>Fri, 30 Apr 2010 17:22:57 +0000</pubDate>
      
      <guid>https://madebynathan.com/2010/04/30/jqgrid-on-spree/</guid>
      <description>Been a fan of jqgrid for quite some time, but wasn&amp;rsquo;t looking forward to the struggle of getting it to work with Rails.
Thankfully, someones already done it for me: http://www.2dconcept.com/jquery-grid-rails-plugin
It did take a little while to debug some things that were going wrong, though. Firebug was giving me the error: $.jgrid.formatter is undefined. After some digging around, I realized that no jqgrid locale files were being loaded.
By default, Spree has its i18n locale set to &amp;ldquo;en-US&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Last.fm Player - Project Videos</title>
      <link>https://madebynathan.com/2010/04/29/project-videos/</link>
      <pubDate>Thu, 29 Apr 2010 11:35:52 +0000</pubDate>
      
      <guid>https://madebynathan.com/2010/04/29/project-videos/</guid>
      <description>My Compaq Evo T20 running tinycore linux, playing shell.fm, displaying track info via lcd4linux on a Pertelian X2o40 USB LCD display.

 
Uses music software Reaper to play audio and generate MIDI events. Midi events are sent to the &#39;output&#39; of MIDI Yoke, which patches them to a software emulated MIDI input. Used the MIDIOX COM wrapper with Visual Basic, to monitor the MIDI Yoke input and trigger http downloads on certain MIDI note events.</description>
    </item>
    
    <item>
      <title>Hacking DSP-420 LCD displays</title>
      <link>https://madebynathan.com/2010/04/25/my-job-is-sweet/</link>
      <pubDate>Sun, 25 Apr 2010 13:55:31 +0000</pubDate>
      
      <guid>https://madebynathan.com/2010/04/25/my-job-is-sweet/</guid>
      <description>I recently found a bunch ofDSP-420 LCD displays, like the ones that you see on POS terminals in grocery stores. After a fruitless battle with the proprietary protocol of an LED wallboard (that I also found at work :) ), it was good to find so much protocol documentation on these little displays. I had it up and running within a few hours, displaying the artist, title and track length from shell.</description>
    </item>
    
    <item>
      <title>Next project!</title>
      <link>https://madebynathan.com/2010/04/15/next-project/</link>
      <pubDate>Thu, 15 Apr 2010 23:15:57 +0000</pubDate>
      
      <guid>https://madebynathan.com/2010/04/15/next-project/</guid>
      <description>So I have practically finished the last.fm player. Its running as I type this, and the sinatra server running on the machine is keeping me up to date with the tracks that are playing. But I&amp;rsquo;m not quite finished with this little project yet.
At work, I found an Advatel TCD226C LED Wallboard. It is a single line, 26 character LED display, that can communicate over RS232. The only problem is that the protocol is proprietary and the manufacturer isnt going to budge.</description>
    </item>
    
    <item>
      <title>The Compaq Evo T20 works</title>
      <link>https://madebynathan.com/2010/04/15/it-works/</link>
      <pubDate>Thu, 15 Apr 2010 22:22:32 +0000</pubDate>
      
      <guid>https://madebynathan.com/2010/04/15/it-works/</guid>
      <description>I&amp;rsquo;ve finished the software research stage of my Compaq Evo T20 experiments. I have settled on the Tinycore 2.7 distribution. So I now have a 300MHz thin client that:
 can connect to a wired or wireless network. can play audio through its onboard sound device. has the required libraries to run MPD (music player daemon) and shell.fm (minimal console application for streaming last.fm stations.) can run Ruby 1.8.7, rubygems, rails, sinatra, etc (Ruby 1.</description>
    </item>
    
  </channel>
</rss>